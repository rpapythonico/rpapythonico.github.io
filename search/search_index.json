{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documenta\u00e7\u00f5es | Arquivos | Extens\u00f5es | Ap\u00eandice | M\u00eddias Sociais | Autores Documenta\u00e7\u00f5es Python datetime os glob shutil xlrd openpyxl pandas xlsxwriter Selenium re Requests smtplib pyodbc sqlite3 csv pdfminer.six pdfplumber PyMuPDF Beautiful Soup Resumo dos Arquivos Aula 1 Clique para expandir! Demonstra\u00e7\u00e3o de erro no Python. Aula1 > Demos > demo_execucao.py Demonstra\u00e7\u00e3o do Selenium executando uma intera\u00e7\u00e3o web. Aula1 > Demos > demo_google.py Script que efetua c\u00e1lculo de IMC. Aula1 > Exercicios > calculadora_imc.py Script que valida a obrigatoriedade das elei\u00e7\u00f5es de acordo com a idade. Aula1 > Exercicios > demo_google.py Aula 2 Clique para expandir! Script que reordena uma lista. Aula2 > Exercicios > reordenacao.py Script que efetua a tabuada de 1 \u00e0 10 de um n\u00famero fornecido pelo usu\u00e1rio Aula2 > Exercicios > tabuada.py Aula 3 Clique para expandir! Script que separa a frase escrita e apresenta a primeira palavra, a \u00faltima palavra, a frase sem o come\u00e7o e sem o fim, o texto com letras ma\u00ed\u00fasculas e letras min\u00fasculas. Aula 3 > Exercicios > ttv_frases.py Script que separa o nome completo fornecido e informa o primeiro nome, o \u00faltimo sobrenome e a quantidade de caracteres. Aula 3 > Exercicios > ttv_nome.py Projeto em Jupyter Notebook (ou Google Colab) contendo todo o conte\u00fado apresentado durante a aula da turma A2022T1. Aula 3 > Material > A2022T1 > Aula_3_Fun\u00e7\u00f5es,_Manipula\u00e7\u00f5es_e_Erros.ipynb Projeto em formato \".py\" contendo todo o conte\u00fado apresentado durante a aula da turma A2022T1. Aula 3 > Material > A2022T1 > aula_3_fun\u00e7\u00f5es,_manipula\u00e7\u00f5es_e_erros.py Aula 4 Clique para expandir! Arquivo XLSX contendo um censo populacional fict\u00edcio dos EUA. Aula4 > Arquivos > censuspopdata.xlsx Arquivo XLSX contendo dados fict\u00edcios de pessoas residentes nos EUA. Aula4 > Arquivos > challenge.xlsx Arquivo XLSX contendo dados reais retirados do portal IBGE sobre as atividades econ\u00f4micas e seus devidos c\u00f3digos. Aula4 > Arquivos > dadosIbge. Arquivo XLSX contendo dados f\u00edctios de pessoas e suas compras nos meses do ano de 2014. Aula4 > Arquivos > duesRecords.xlsx Arquivo XLSX contendo dados fict\u00edcios de pessoas ao redor do mundo. Aula4 > Arquivos > file_example_XLSX_10.xlsx Arquivo XLSX contendo dados de produtos \u00e0 venda em um com\u00e9rcio fict\u00edcio. Aula4 > Arquivos > produceSales.xlsx Aula 6 Clique para expandir! Script do projeto que coleta dados de estadia do Booking utilizando data de check-in, data de check-out e a cidade desejada. Aula6 > Projeto > booking.py Aula 7 Clique para expandir! Arquivo .json que possui um compilado de requisi\u00e7\u00f5es em APIs p\u00fablicas demonstrando a arquitetura REST. Aula7 > Collection > Aula7.postman_collection.json Aula 8 Clique para expandir! Script contendo uma vis\u00e3o inicial sobre Orienta\u00e7\u00e3o \u00e0 Objetos utilizando como base uma classe \"Cachorro\". Aula8 > Demos > classe_cachorro.py Script contendo disparo de email utilizando o protocolo SMTP. Aula8 > Demos > email_com_ou_sem_anexo.py Arquivo de backup com tabelas do banco de dados MS SQL. Aula8 > Materiais > SUCOS_VENDAS.BAK Cr\u00e9ditos: Alura Arquivo de backup com tabelas do banco de dados SQLite. Aula8 > Materiais > aula8.db Script contendo automa\u00e7\u00e3o para efetuar carga no banco de dados SQLite. Aula8 > Materiais > carregar_banco.py Arquivo contendo dados brutos para serem carregados em bancos de dados. Aula8 > Materiais > data.json Extens\u00f5es - VSCode Python autoDocstring - Python Docstring Generator Better Comments indent-rainbow Prettier - Code formatter vscode-icons Ap\u00eandice Hor\u00e1rio das aulas: Ter\u00e7as e Quintas - 20:00 \u00e0s 21:30 M\u00eddias Sociais Autores @Wilberhg @ThomashSantos","title":"Principal"},{"location":"#_1","text":"Documenta\u00e7\u00f5es | Arquivos | Extens\u00f5es | Ap\u00eandice | M\u00eddias Sociais | Autores","title":""},{"location":"#documentacoes","text":"Python datetime os glob shutil xlrd openpyxl pandas xlsxwriter Selenium re Requests smtplib pyodbc sqlite3 csv pdfminer.six pdfplumber PyMuPDF Beautiful Soup","title":" Documenta\u00e7\u00f5es"},{"location":"#resumo-dos-arquivos","text":"","title":" Resumo dos Arquivos"},{"location":"#aula-1","text":"Clique para expandir! Demonstra\u00e7\u00e3o de erro no Python. Aula1 > Demos > demo_execucao.py Demonstra\u00e7\u00e3o do Selenium executando uma intera\u00e7\u00e3o web. Aula1 > Demos > demo_google.py Script que efetua c\u00e1lculo de IMC. Aula1 > Exercicios > calculadora_imc.py Script que valida a obrigatoriedade das elei\u00e7\u00f5es de acordo com a idade. Aula1 > Exercicios > demo_google.py","title":"Aula 1"},{"location":"#aula-2","text":"Clique para expandir! Script que reordena uma lista. Aula2 > Exercicios > reordenacao.py Script que efetua a tabuada de 1 \u00e0 10 de um n\u00famero fornecido pelo usu\u00e1rio Aula2 > Exercicios > tabuada.py","title":"Aula 2"},{"location":"#aula-3","text":"Clique para expandir! Script que separa a frase escrita e apresenta a primeira palavra, a \u00faltima palavra, a frase sem o come\u00e7o e sem o fim, o texto com letras ma\u00ed\u00fasculas e letras min\u00fasculas. Aula 3 > Exercicios > ttv_frases.py Script que separa o nome completo fornecido e informa o primeiro nome, o \u00faltimo sobrenome e a quantidade de caracteres. Aula 3 > Exercicios > ttv_nome.py Projeto em Jupyter Notebook (ou Google Colab) contendo todo o conte\u00fado apresentado durante a aula da turma A2022T1. Aula 3 > Material > A2022T1 > Aula_3_Fun\u00e7\u00f5es,_Manipula\u00e7\u00f5es_e_Erros.ipynb Projeto em formato \".py\" contendo todo o conte\u00fado apresentado durante a aula da turma A2022T1. Aula 3 > Material > A2022T1 > aula_3_fun\u00e7\u00f5es,_manipula\u00e7\u00f5es_e_erros.py","title":"Aula 3"},{"location":"#aula-4","text":"Clique para expandir! Arquivo XLSX contendo um censo populacional fict\u00edcio dos EUA. Aula4 > Arquivos > censuspopdata.xlsx Arquivo XLSX contendo dados fict\u00edcios de pessoas residentes nos EUA. Aula4 > Arquivos > challenge.xlsx Arquivo XLSX contendo dados reais retirados do portal IBGE sobre as atividades econ\u00f4micas e seus devidos c\u00f3digos. Aula4 > Arquivos > dadosIbge. Arquivo XLSX contendo dados f\u00edctios de pessoas e suas compras nos meses do ano de 2014. Aula4 > Arquivos > duesRecords.xlsx Arquivo XLSX contendo dados fict\u00edcios de pessoas ao redor do mundo. Aula4 > Arquivos > file_example_XLSX_10.xlsx Arquivo XLSX contendo dados de produtos \u00e0 venda em um com\u00e9rcio fict\u00edcio. Aula4 > Arquivos > produceSales.xlsx","title":"Aula 4"},{"location":"#aula-6","text":"Clique para expandir! Script do projeto que coleta dados de estadia do Booking utilizando data de check-in, data de check-out e a cidade desejada. Aula6 > Projeto > booking.py","title":"Aula 6"},{"location":"#aula-7","text":"Clique para expandir! Arquivo .json que possui um compilado de requisi\u00e7\u00f5es em APIs p\u00fablicas demonstrando a arquitetura REST. Aula7 > Collection > Aula7.postman_collection.json","title":"Aula 7"},{"location":"#aula-8","text":"Clique para expandir! Script contendo uma vis\u00e3o inicial sobre Orienta\u00e7\u00e3o \u00e0 Objetos utilizando como base uma classe \"Cachorro\". Aula8 > Demos > classe_cachorro.py Script contendo disparo de email utilizando o protocolo SMTP. Aula8 > Demos > email_com_ou_sem_anexo.py Arquivo de backup com tabelas do banco de dados MS SQL. Aula8 > Materiais > SUCOS_VENDAS.BAK Cr\u00e9ditos: Alura Arquivo de backup com tabelas do banco de dados SQLite. Aula8 > Materiais > aula8.db Script contendo automa\u00e7\u00e3o para efetuar carga no banco de dados SQLite. Aula8 > Materiais > carregar_banco.py Arquivo contendo dados brutos para serem carregados em bancos de dados. Aula8 > Materiais > data.json","title":"Aula 8"},{"location":"#extensoes-vscode","text":"Python autoDocstring - Python Docstring Generator Better Comments indent-rainbow Prettier - Code formatter vscode-icons","title":" Extens\u00f5es - VSCode"},{"location":"#apendice","text":"Hor\u00e1rio das aulas: Ter\u00e7as e Quintas - 20:00 \u00e0s 21:30","title":" Ap\u00eandice"},{"location":"#midias-sociais","text":"","title":" M\u00eddias Sociais"},{"location":"#autores","text":"@Wilberhg @ThomashSantos","title":" Autores"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/","text":"Aula 1 - Introdu\u00e7\u00e3o Instala\u00e7\u00e3o https://www.python.org/downloads/ Download Python 3.10.2 https://www.anaconda.com/products/individual#Downloads 64-Bit Graphical Installer (510 MB) IDEs Google Collab: https://colab.research.google.com/ Jupyter Notebook: https://jupyter.org/install PyCharm: https://www.jetbrains.com/pt-br/pycharm/download/ Visual Code: https://code.visualstudio.com/Download Guia Vari\u00e1veis Armazenar valores para serem usados depois. O conceito na vida real se assemelha como um bolso de cal\u00e7a onde voc\u00ea pode guardar suas chaves. print() Emite dados na tela quando se quer apresentar algo ao usu\u00e1rio ou para testes; Ex.: texto = 'Hello World' print ( texto ) Tipagem int() Valores num\u00e9ricos inteiros (isto \u00e9, SEM casas decimais). float() Valores num\u00e9ricos reais (isto \u00e9, COM casas decimais). string() Letras/texto. bool() Validador. Verdadeiro ou Falso Sintaxe: True/False Ex.: valor = 1 valor = int ( valor ) #output: 1 valor = float ( valor ) #output: 1.0 valor = string ( valor ) #output: '1' valor = bool ( valor ) #output: True Tupla ( ) S\u00e3o imut\u00e1veis; Ex.: #atribui\u00e7\u00e3o composta tupla_de_bandas = 'Led Zeppelin' , 'The Doors' , 'Black Sabbath' #ou tupla_de_bandas = ( 'Led Zeppelin' , 'The Doors' , 'Black Sabbath' ) Lista [ ] S\u00e3o mut\u00e1veis; Ex.: lista_de_livros = [ 'Harry Potter' , 'Sherlock Holmes' , 'Jogos Vorazes' ] Identa\u00e7\u00e3o Tab; Tabs definem o alinhamento dentro de alguma condi\u00e7\u00e3o, looping ou fun\u00e7\u00e3o dentro do Python. Condi\u00e7\u00e3o if, elif e else Ex.: idade = 17 if idade idade < 16 : print ( 'Adolescente' ) elif idade > 16 and < 21 : print ( 'Jovem' ) else : print ( 'Adulto' ) len() Ex.: texto = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.' len ( texto ) #output: 74 input() Ex.: nome = input ( 'Qual o seu nome? R: ' ) print ( nome ) Coment\u00e1rios e \"\" \"\" Servem para criar \"coment\u00e1rios\" no c\u00f3digo e assim facilitar a leitura dele por voc\u00ea mesmo ou outra pessoa. Ex.: #Essa variavel receber\u00e1 um valor e j\u00e1 ter\u00e1 seu dado convertido para inteiro valor_dois = int ( input ( 'Insira um novo valor para a soma: ' )) #ou print ( 'Inicial' ) \"\"\"Este \u00e9 um coment\u00e1rio \"\"\" ''' ''' print ( 'Final' ) Colinha '=' passa valores '==' compara se os valores s\u00e3o iguais 'in' para checar algum valor '=== ' compara o valor e o tipo da vari\u00e1vel Refer\u00eancias Automatize tarefas ma\u00e7antes com Python https://www.amazon.com.br/Automatize-tarefas-ma\u00e7antes-com-Python-ebook/dp/B075JTQYB7 Curso Intensivo de Python https://www.amazon.com.br/Curso-Intensivo-Python-Introdu\u00e7\u00e3o-Programa\u00e7\u00e3o/dp/8575225030/","title":"Aula 1 - Instala\u00e7\u00e3o, IDEs, Vari\u00e1veis, Tipagens, Condicionais e Extras"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#aula-1-introducao","text":"","title":"Aula 1 - Introdu\u00e7\u00e3o"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#instalacao","text":"https://www.python.org/downloads/ Download Python 3.10.2 https://www.anaconda.com/products/individual#Downloads 64-Bit Graphical Installer (510 MB)","title":"Instala\u00e7\u00e3o"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#ides","text":"Google Collab: https://colab.research.google.com/ Jupyter Notebook: https://jupyter.org/install PyCharm: https://www.jetbrains.com/pt-br/pycharm/download/ Visual Code: https://code.visualstudio.com/Download","title":"IDEs"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#guia","text":"","title":"Guia"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#variaveis","text":"Armazenar valores para serem usados depois. O conceito na vida real se assemelha como um bolso de cal\u00e7a onde voc\u00ea pode guardar suas chaves.","title":"Vari\u00e1veis"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#print","text":"Emite dados na tela quando se quer apresentar algo ao usu\u00e1rio ou para testes; Ex.: texto = 'Hello World' print ( texto )","title":"print()"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#tipagem","text":"int() Valores num\u00e9ricos inteiros (isto \u00e9, SEM casas decimais). float() Valores num\u00e9ricos reais (isto \u00e9, COM casas decimais). string() Letras/texto. bool() Validador. Verdadeiro ou Falso Sintaxe: True/False Ex.: valor = 1 valor = int ( valor ) #output: 1 valor = float ( valor ) #output: 1.0 valor = string ( valor ) #output: '1' valor = bool ( valor ) #output: True","title":"Tipagem"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#tupla","text":"( ) S\u00e3o imut\u00e1veis; Ex.: #atribui\u00e7\u00e3o composta tupla_de_bandas = 'Led Zeppelin' , 'The Doors' , 'Black Sabbath' #ou tupla_de_bandas = ( 'Led Zeppelin' , 'The Doors' , 'Black Sabbath' )","title":"Tupla"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#lista","text":"[ ] S\u00e3o mut\u00e1veis; Ex.: lista_de_livros = [ 'Harry Potter' , 'Sherlock Holmes' , 'Jogos Vorazes' ]","title":"Lista"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#identacao","text":"Tab; Tabs definem o alinhamento dentro de alguma condi\u00e7\u00e3o, looping ou fun\u00e7\u00e3o dentro do Python.","title":"Identa\u00e7\u00e3o"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#condicao","text":"if, elif e else Ex.: idade = 17 if idade idade < 16 : print ( 'Adolescente' ) elif idade > 16 and < 21 : print ( 'Jovem' ) else : print ( 'Adulto' )","title":"Condi\u00e7\u00e3o"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#len","text":"Ex.: texto = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.' len ( texto ) #output: 74","title":"len()"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#input","text":"Ex.: nome = input ( 'Qual o seu nome? R: ' ) print ( nome )","title":"input()"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#comentarios","text":"","title":"Coment\u00e1rios"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#e","text":"Servem para criar \"coment\u00e1rios\" no c\u00f3digo e assim facilitar a leitura dele por voc\u00ea mesmo ou outra pessoa. Ex.: #Essa variavel receber\u00e1 um valor e j\u00e1 ter\u00e1 seu dado convertido para inteiro valor_dois = int ( input ( 'Insira um novo valor para a soma: ' )) #ou print ( 'Inicial' ) \"\"\"Este \u00e9 um coment\u00e1rio \"\"\" ''' ''' print ( 'Final' )","title":"e \"\" \"\""},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#colinha","text":"'=' passa valores '==' compara se os valores s\u00e3o iguais 'in' para checar algum valor '=== ' compara o valor e o tipo da vari\u00e1vel","title":"Colinha"},{"location":"S01/Aula%201%20-%20Introduc%CC%A7a%CC%83o/#referencias","text":"Automatize tarefas ma\u00e7antes com Python https://www.amazon.com.br/Automatize-tarefas-ma\u00e7antes-com-Python-ebook/dp/B075JTQYB7 Curso Intensivo de Python https://www.amazon.com.br/Curso-Intensivo-Python-Introdu\u00e7\u00e3o-Programa\u00e7\u00e3o/dp/8575225030/","title":"Refer\u00eancias"},{"location":"S01/Aula%202%20-%20Listas%2C%20Diciona%CC%81rios%20e%20Loopings/","text":"Aula 2 - Listas, Dicion\u00e1rios e Loopings Lista list() ou [ ] Ex.: lista = [ 'Thomas' , 'Wilber' , 'Marcos' , 'Pedro' ] .pop Ex.: lista . pop () print ( lista ) # output: ['Thomas', 'Wilber', 'Marcos'] .append() Ex.: lista . append ( 'Fernando' ) print ( lista ) # output: ['Thomas', 'Wilber', 'Marcos', 'Fernando'] .remove() Ex.: lista . remove ( 'Marcos' ) print ( lista ) # output: ['Thomas', 'Wilber', 'Fernando'] Slice: Ex.: print ( lista [ 1 : 3 ]) # output: ['Thomas', 'Wilber'] Dicion\u00e1rio dict() ou { } Ex.: fruta = {} fruta [ 'maca' ] = '\u00c9 uma fruta vermelha' fruta [ 'limao' ] = '\u00c9 uma fruta verde' fruta [ 'banana' ] = '\u00c9 uma fruta amarela' #ou fruta = { 'maca' : '\u00c9 uma fruta vermelha' , 'limao' : '\u00c9 uma fruta verde' , 'banana' : '\u00c9 uma fruta amarela' } .keys() Ex.: fruta . keys () # output: dict_keys(['maca', 'limao', 'banana']) .values() Ex.: fruta . values () # output: dict_values(['\u00c9 uma fruta vermelha', '\u00c9 uma fruta verde', '\u00c9 uma fruta amarela']) items() Ex.: fruta . items () # output: dict_items([('maca', '\u00c9 uma fruta vermelha'), ('limao', '\u00c9 uma fruta verde'), ('banana', '\u00c9 uma fruta amarela')]) Loopings For Looping com uma quantidade definida: for numero in range ( 5 ): print ( numero ) # output: # 0 # 1 # 2 # 3 # 4 ``` - Looping usando um intervalo de n\u00fameros : ``` python for numero in range ( 3 , 8 ): print ( numero ) # output: # 3 # 4 # 5 # 6 # 7 ``` - Looping usando listas como delimitador : ``` python lista_de_filmes = [ 'Kill Bill' , 'Pulp Fiction' , 'C\u00e3es de Aluguel' ] for filme in lista_de_filmes : print ( filme ) # output: # Kill Bill # Pulp Fiction # C\u00e3es de Aluguel ``` - Looping usando listas com seus respectivos \u00edndices : ``` python lista_de_filmes = [ 'Kill Bill' , 'Pulp Fiction' , 'C\u00e3es de Aluguel' ] for indice , filme in enumerate ( lista_de_filmes ): print ( indice , '-' , filme ) # output: # 0 - Kill Bill # 1 - Pulp Fiction # 2 - C\u00e3es de Aluguel ``` ### While: - Looping condicional utilizando incrementador : ``` python contador = 0 while contador < 5 : print ( f 'O contador \u00e9 { contador } e ainda \u00e9 menor que 5!' ) contador += 1 # output: # O contador \u00e9 0 e ainda \u00e9 menor que 5! # O contador \u00e9 1 e ainda \u00e9 menor que 5! # O contador \u00e9 2 e ainda \u00e9 menor que 5! # O contador \u00e9 3 e ainda \u00e9 menor que 5! # O contador \u00e9 4 e ainda \u00e9 menor que 5! ``` - Looping condicional infinito com \"input\" : ``` python nome = '' while nome != 'seu nome' : nome = input ( 'Insira seu nome: ' ) print ( 'Parab\u00e9ns, voc\u00ea entendeu a brincadeira!' ) ``` - Looping condicional infinito com \"break\" e \"continue\" : ``` python valor = 0 while True : num = input ( 'Insira um valor para a soma: ' ) if num != 'q' : valor += int ( num ) print ( f ' \\n Agora o valor \u00e9: { valor } \\n ' ) continue else : break print ( 'Looping encerrado!' ) # output: # Insira um valor para a soma: 2 # Agora o valor \u00e9: 2 # Insira um valor para a soma: 4 # Agora o valor \u00e9: 6 # Insira um valor para a soma: q # Looping encerrado! ```","title":"Aula 2 - Listas, Diciona\u0301rios e Loopings"},{"location":"S01/Aula%202%20-%20Listas%2C%20Diciona%CC%81rios%20e%20Loopings/#aula-2-listas-dicionarios-e-loopings","text":"","title":"Aula 2 - Listas, Dicion\u00e1rios e Loopings"},{"location":"S01/Aula%202%20-%20Listas%2C%20Diciona%CC%81rios%20e%20Loopings/#lista","text":"list() ou [ ] Ex.: lista = [ 'Thomas' , 'Wilber' , 'Marcos' , 'Pedro' ] .pop Ex.: lista . pop () print ( lista ) # output: ['Thomas', 'Wilber', 'Marcos'] .append() Ex.: lista . append ( 'Fernando' ) print ( lista ) # output: ['Thomas', 'Wilber', 'Marcos', 'Fernando'] .remove() Ex.: lista . remove ( 'Marcos' ) print ( lista ) # output: ['Thomas', 'Wilber', 'Fernando'] Slice: Ex.: print ( lista [ 1 : 3 ]) # output: ['Thomas', 'Wilber']","title":"Lista"},{"location":"S01/Aula%202%20-%20Listas%2C%20Diciona%CC%81rios%20e%20Loopings/#dicionario","text":"dict() ou { } Ex.: fruta = {} fruta [ 'maca' ] = '\u00c9 uma fruta vermelha' fruta [ 'limao' ] = '\u00c9 uma fruta verde' fruta [ 'banana' ] = '\u00c9 uma fruta amarela' #ou fruta = { 'maca' : '\u00c9 uma fruta vermelha' , 'limao' : '\u00c9 uma fruta verde' , 'banana' : '\u00c9 uma fruta amarela' } .keys() Ex.: fruta . keys () # output: dict_keys(['maca', 'limao', 'banana']) .values() Ex.: fruta . values () # output: dict_values(['\u00c9 uma fruta vermelha', '\u00c9 uma fruta verde', '\u00c9 uma fruta amarela']) items() Ex.: fruta . items () # output: dict_items([('maca', '\u00c9 uma fruta vermelha'), ('limao', '\u00c9 uma fruta verde'), ('banana', '\u00c9 uma fruta amarela')])","title":"Dicion\u00e1rio"},{"location":"S01/Aula%202%20-%20Listas%2C%20Diciona%CC%81rios%20e%20Loopings/#loopings","text":"","title":"Loopings"},{"location":"S01/Aula%202%20-%20Listas%2C%20Diciona%CC%81rios%20e%20Loopings/#for","text":"Looping com uma quantidade definida: for numero in range ( 5 ): print ( numero ) # output: # 0 # 1 # 2 # 3 # 4 ``` - Looping usando um intervalo de n\u00fameros : ``` python for numero in range ( 3 , 8 ): print ( numero ) # output: # 3 # 4 # 5 # 6 # 7 ``` - Looping usando listas como delimitador : ``` python lista_de_filmes = [ 'Kill Bill' , 'Pulp Fiction' , 'C\u00e3es de Aluguel' ] for filme in lista_de_filmes : print ( filme ) # output: # Kill Bill # Pulp Fiction # C\u00e3es de Aluguel ``` - Looping usando listas com seus respectivos \u00edndices : ``` python lista_de_filmes = [ 'Kill Bill' , 'Pulp Fiction' , 'C\u00e3es de Aluguel' ] for indice , filme in enumerate ( lista_de_filmes ): print ( indice , '-' , filme ) # output: # 0 - Kill Bill # 1 - Pulp Fiction # 2 - C\u00e3es de Aluguel ``` ### While: - Looping condicional utilizando incrementador : ``` python contador = 0 while contador < 5 : print ( f 'O contador \u00e9 { contador } e ainda \u00e9 menor que 5!' ) contador += 1 # output: # O contador \u00e9 0 e ainda \u00e9 menor que 5! # O contador \u00e9 1 e ainda \u00e9 menor que 5! # O contador \u00e9 2 e ainda \u00e9 menor que 5! # O contador \u00e9 3 e ainda \u00e9 menor que 5! # O contador \u00e9 4 e ainda \u00e9 menor que 5! ``` - Looping condicional infinito com \"input\" : ``` python nome = '' while nome != 'seu nome' : nome = input ( 'Insira seu nome: ' ) print ( 'Parab\u00e9ns, voc\u00ea entendeu a brincadeira!' ) ``` - Looping condicional infinito com \"break\" e \"continue\" : ``` python valor = 0 while True : num = input ( 'Insira um valor para a soma: ' ) if num != 'q' : valor += int ( num ) print ( f ' \\n Agora o valor \u00e9: { valor } \\n ' ) continue else : break print ( 'Looping encerrado!' ) # output: # Insira um valor para a soma: 2 # Agora o valor \u00e9: 2 # Insira um valor para a soma: 4 # Agora o valor \u00e9: 6 # Insira um valor para a soma: q # Looping encerrado! ```","title":"For"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/","text":"Aula 3 - Fun\u00e7\u00f5es, Manipula\u00e7\u00f5es e Erros Fun\u00e7\u00f5es def(): Ex.: ````python def soma(num1, num2): return num1 + num2 ``` Manipula\u00e7\u00e3o de String Indexa\u00e7\u00e3o e slicing [:]: Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase[:6] # output: 'Python' frase[31:] # output: 'mundo' frase[:] # output: 'Python \u00e9 a melhor linguagem do mundo' ``` .find(): Ex.: ```python frase.find('mundo') # output: 31 ``` None e vazio: Apaga o valor de dentro de uma vari\u00e1vel. Ex.: ```python frase = None ``` in e not in Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' 'Python' in frase # output: True 'Python' not in frase # output: False ``` upper() e isupper() Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase.isupper() # output: False frase.upper() # output: 'PYTHON \u00c9 A MELHOR LINGUAGEM DO MUNDO' ``` lower() e islower() Ex.: ```python frase = 'PYTHON \u00c9 A MELHOR LINGUAGEM DO MUNDO' frase.islower() # output: False frase.lower() # output: 'python \u00e9 a melhor linguagem do mundo' ``` startswith() e endswith() Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase.startswith('Python') # output: True frase.endswith('mundo') # output: True ``` split() e join() Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase = palavra.split(' ') # output: ['Python', '\u00e9', 'a', 'melhor', 'linguagem', 'do', 'mundo'] ';'.join(frase) #output: 'Python;\u00e9;a;melhor;linguagem;do;mundo' ``` rjust(), ljust() e center(): Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase.rjust(50,'-') # output: '--------------Python \u00e9 a melhor linguagem do mundo' frase.ljust(50,'-') # output: 'Python \u00e9 a melhor linguagem do mundo--------------' frase.center(50,'*') # output: '*******Python \u00e9 a melhor linguagem do mundo*******' ``` zfill(): Ex.: ```python cpf = '345678911' cpf.zfill(11) # output: '00345678911' ``` strip(), rstrip() e lstrip(): Ex.: ```python nome = ' Harry Potter ' nome.strip() # output: 'Harry Potter' nome.rstrip() # output: ' Harry Potter' nome.lstrip() # output: 'Harry Potter ' ``` replace(): Ex.: ```python frase = 'Java \u00e9 a melhor linguagem do mundo' frase.replace('Java', 'Python') # output: 'Python \u00e9 a melhor linguagem do mundo' ``` Exce\u00e7\u00f5es/Erros try:, except:, else: e finally: Ex.: ```python def divisao(valor1, valor2): valor1 = str(valor1) try: # \u00c9 a etapa de tentativa. Se der sucesso, vai para o \"else\" e se der erro, ir\u00e1 para o \"except\" valor1 = int(valor1) valor2 = int(valor2) except ZeroDivisionError as error: # Trata o erro de divis\u00e3o por zero somente print(f'{error}') print(f'N\u00e3o foi poss\u00edvel dividir o valor {valor1} pelo valor {valor2}') except: # Trata qualquer erro que n\u00e3o esteja mapeado print('Erro desconhecido e ele poderia ter parado o programa!') else: # Se tudo der certo dentro do \"try\", o c\u00f3digo continuar\u00e1 aqui return valor1 / valor2 finally: # Essa a\u00e7\u00e3o abaixo ser\u00e1 executada independente de sucesso ou erro print('Isso aqui rodar\u00e1 independente do erro') num1= 25 num2 = 0 divisao(num1, num2) # output: 'N\u00e3o foi poss\u00edvel dividir o valor 25 pelo valor 0' ``` raise: Ex.: ```python raise BaseException('Este \u00e9 um erro personalizado caso caia em alguma condicional inv\u00e1lida!') # output: Traceback (most recent call last): # File \"<pyshell#27>\", line 1, in <module> # raise BaseException('Este \u00e9 um erro personalizado caso caia em alguma condicional inv\u00e1lida!') # BaseException: Este \u00e9 um erro personalizado caso caia em alguma condicional inv\u00e1lida! ``` Tipos de erros: https://www.programiz.com/python-programming/exceptions#built-in datetime Importar a biblioteca: import datetime Pegar a data ou data e hora do dia vigente: hoje = datetime . date . today () # output: datetime.date(2021, 10, 27) #ou hoje = datetime . datetime . today () # output: datetime.datetime(2021, 10, 27, 0, 6, 56, 978062) Converter a data para um formato visual e no formato string: hoje_formatado = hoje . strftime ( ' %d /%m/%Y' ) # output: '27/10/2021' Retornar a string para o formato datetime: data_antes = datetime . datetime . strptime ( hoje_formatado , '%Y/%m/ %d ' ) # output: datetime.datetime(2021, 10, 27, 0, 0) Trazer a data de ontem ou de amanh\u00e3: # Dia anterior ontem = hoje - datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 10, 26, 0, 6, 56, 978062) # Dia seguinte amanha = hoje + datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 10, 28, 0, 6, 56, 978062) Calcular a diferen\u00e7a de dias de uma data para outra: ( amanha - ontem ) . days # output: 2 Extras Documenta\u00e7\u00e3o datetime: https://docs.python.org/pt-br/3/library/datetime.html Tabela de s\u00edmbolos para o strftime: https://www.programiz.com/python-programming/datetime/strftime#format-code ````","title":"Aula 3 - Func\u0327o\u0303es, Manipulac\u0327o\u0303es e Erros"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/#aula-3-funcoes-manipulacoes-e-erros","text":"","title":"Aula 3 - Fun\u00e7\u00f5es, Manipula\u00e7\u00f5es e Erros"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/#funcoes","text":"def(): Ex.: ````python def soma(num1, num2): return num1 + num2 ```","title":"Fun\u00e7\u00f5es"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/#manipulacao-de-string","text":"Indexa\u00e7\u00e3o e slicing [:]: Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase[:6] # output: 'Python' frase[31:] # output: 'mundo' frase[:] # output: 'Python \u00e9 a melhor linguagem do mundo' ``` .find(): Ex.: ```python frase.find('mundo') # output: 31 ``` None e vazio: Apaga o valor de dentro de uma vari\u00e1vel. Ex.: ```python frase = None ``` in e not in Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' 'Python' in frase # output: True 'Python' not in frase # output: False ``` upper() e isupper() Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase.isupper() # output: False frase.upper() # output: 'PYTHON \u00c9 A MELHOR LINGUAGEM DO MUNDO' ``` lower() e islower() Ex.: ```python frase = 'PYTHON \u00c9 A MELHOR LINGUAGEM DO MUNDO' frase.islower() # output: False frase.lower() # output: 'python \u00e9 a melhor linguagem do mundo' ``` startswith() e endswith() Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase.startswith('Python') # output: True frase.endswith('mundo') # output: True ``` split() e join() Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase = palavra.split(' ') # output: ['Python', '\u00e9', 'a', 'melhor', 'linguagem', 'do', 'mundo'] ';'.join(frase) #output: 'Python;\u00e9;a;melhor;linguagem;do;mundo' ``` rjust(), ljust() e center(): Ex.: ```python frase = 'Python \u00e9 a melhor linguagem do mundo' frase.rjust(50,'-') # output: '--------------Python \u00e9 a melhor linguagem do mundo' frase.ljust(50,'-') # output: 'Python \u00e9 a melhor linguagem do mundo--------------' frase.center(50,'*') # output: '*******Python \u00e9 a melhor linguagem do mundo*******' ``` zfill(): Ex.: ```python cpf = '345678911' cpf.zfill(11) # output: '00345678911' ``` strip(), rstrip() e lstrip(): Ex.: ```python nome = ' Harry Potter ' nome.strip() # output: 'Harry Potter' nome.rstrip() # output: ' Harry Potter' nome.lstrip() # output: 'Harry Potter ' ``` replace(): Ex.: ```python frase = 'Java \u00e9 a melhor linguagem do mundo' frase.replace('Java', 'Python') # output: 'Python \u00e9 a melhor linguagem do mundo' ```","title":"Manipula\u00e7\u00e3o de String"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/#excecoeserros","text":"try:, except:, else: e finally: Ex.: ```python def divisao(valor1, valor2): valor1 = str(valor1) try: # \u00c9 a etapa de tentativa. Se der sucesso, vai para o \"else\" e se der erro, ir\u00e1 para o \"except\" valor1 = int(valor1) valor2 = int(valor2) except ZeroDivisionError as error: # Trata o erro de divis\u00e3o por zero somente print(f'{error}') print(f'N\u00e3o foi poss\u00edvel dividir o valor {valor1} pelo valor {valor2}') except: # Trata qualquer erro que n\u00e3o esteja mapeado print('Erro desconhecido e ele poderia ter parado o programa!') else: # Se tudo der certo dentro do \"try\", o c\u00f3digo continuar\u00e1 aqui return valor1 / valor2 finally: # Essa a\u00e7\u00e3o abaixo ser\u00e1 executada independente de sucesso ou erro print('Isso aqui rodar\u00e1 independente do erro') num1= 25 num2 = 0 divisao(num1, num2) # output: 'N\u00e3o foi poss\u00edvel dividir o valor 25 pelo valor 0' ``` raise: Ex.: ```python raise BaseException('Este \u00e9 um erro personalizado caso caia em alguma condicional inv\u00e1lida!') # output: Traceback (most recent call last): # File \"<pyshell#27>\", line 1, in <module> # raise BaseException('Este \u00e9 um erro personalizado caso caia em alguma condicional inv\u00e1lida!') # BaseException: Este \u00e9 um erro personalizado caso caia em alguma condicional inv\u00e1lida! ``` Tipos de erros: https://www.programiz.com/python-programming/exceptions#built-in","title":"Exce\u00e7\u00f5es/Erros"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/#datetime","text":"Importar a biblioteca: import datetime Pegar a data ou data e hora do dia vigente: hoje = datetime . date . today () # output: datetime.date(2021, 10, 27) #ou hoje = datetime . datetime . today () # output: datetime.datetime(2021, 10, 27, 0, 6, 56, 978062) Converter a data para um formato visual e no formato string: hoje_formatado = hoje . strftime ( ' %d /%m/%Y' ) # output: '27/10/2021' Retornar a string para o formato datetime: data_antes = datetime . datetime . strptime ( hoje_formatado , '%Y/%m/ %d ' ) # output: datetime.datetime(2021, 10, 27, 0, 0) Trazer a data de ontem ou de amanh\u00e3: # Dia anterior ontem = hoje - datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 10, 26, 0, 6, 56, 978062) # Dia seguinte amanha = hoje + datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 10, 28, 0, 6, 56, 978062) Calcular a diferen\u00e7a de dias de uma data para outra: ( amanha - ontem ) . days # output: 2","title":"datetime"},{"location":"S01/Aula%203%20-%20Func%CC%A7o%CC%83es%2C%20Manipulac%CC%A7o%CC%83es%20e%20Erros/#extras","text":"Documenta\u00e7\u00e3o datetime: https://docs.python.org/pt-br/3/library/datetime.html Tabela de s\u00edmbolos para o strftime: https://www.programiz.com/python-programming/datetime/strftime#format-code ````","title":"Extras"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/","text":"Aula 4 - Bibliotecas, Excel e TXTs Bibliotecas Reposit\u00f3rio das Bibliotecas: https://pypi.org/ Comando para instalar bibliotecas externas: pip install nome_da_biblioteca # Ex.: pip install openpyxl Comando para usar biblioteca no c\u00f3digo # Importa a biblioteca com todas as fun\u00e7\u00f5es dela import nome_da_biblioteca # import xlrd # Importa a biblioteca e permite criar um \"apelido\" pra ela import nome_da_biblioteca as ndb # Ex.: import pandas as pd # Importa uma fun\u00e7\u00e3o espec\u00edfica de dentro da biblioteca from nome_da_biblioteca import funcao # Ex.: from time import sleep Manipula\u00e7\u00e3o de Arquivos Abrir o arquivo: Para criar: ```python arqv = open('nome_do_arquivo.txt', 'w') ``` Para ler: ```python arqv = open('nome_do_arquivo.txt', 'r') ``` Para continuar um texto: ```python arqv = open('nome_do_arquivo.txt', 'a') ``` Escrever dentro do .txt: arqv . write ( 'texto do arquivo' ) Fechar o arquivo: arqv . close () Intera\u00e7\u00e3o com o SO: os: Importar a biblioteca: ```python import os ``` Renomear um arquivo: ```python os.rename('arquivo_teste.txt', 'arquivo_modificado.txt') ``` Remover um arquivo da pasta: ```python os.remove('arquivo_modificado.txt') ``` Listar os arquivos presentes na pasta: ```python os.listdir('.') ``` Aponta a execu\u00e7\u00e3o do Python para uma pasta em espec\u00edfico: ```python os.chdir('') ``` glob: Importar a biblioteca: ```python import glob ``` Listar arquivos do diret\u00f3rio pela sua extens\u00e3o: ```python glob.glob(r'.\\*.txt') ``` shutil: Importar a biblioteca: ```python import shutil ``` Movimentar um arquivo para outra pasta: ```python shutil.move('arquivo_modificado.txt', r'.\\pasta_move\\arquivo_modificado.txt') ``` Copiar um arquivo para outra pasta: ```python shutil.copy(r'.\\pasta_move\\arquivo_modificado.txt', r'.\\arquivo_modificado_copy.txt') ``` Bibliotecas Excel: xlrd Importar a biblioteca: import xlrd Abre um arquivo Excel (XLS): wb = xlrd . open_workbook ( 'banca_jornal.xls' ) Seleciona a aba do Excel: sheet = wb . sheet_by_name ( 'Planilha1' ) Pega valores da primeira coluna: for cell in sheet . col ( 0 ): cell openpyxl Importa a biblioteca: import openpyxl Abrir um arquivo Excel (XLS ou XLSX): wb = openpyxl . load_workbook ( 'banca_jornal.xlsx' ) Apresenta o nome de todas as abas do Excel aberto: wb . get_sheet_names () # output: ['Planilha1'] Seleciona a aba do Excel: sheet = wb [ 'Planilha1' ] Ler o valor da primeira c\u00e9lula (A1): sheet [ 'A1' ] . value # output: Chiclete Apresentar n\u00fameros de linhas: sheet . max_row # output: 6 Percorre uma coluna inteira do Excel: # Nesse c\u00f3digo, ele n\u00e3o ir\u00e1 pegar o cabe\u00e7alho da tabela # Caso queira pegar o cabe\u00e7alho, basta trocar o n\u00famero 2 pelo n\u00famero 1 for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) # output: # Chiclete # Barra de Chocolate # Agua mineral # Jornal # Salgadinho Pegar valores das tr\u00eas colunas, passando por todas as linhas: for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) . value unidade = sheet . cell ( linha , 2 ) . value valor = sheet . cell ( linha , 3 ) . value print ( f 'O produto { nome * } teve* { unidade } unidades vendidas no valor unit\u00e1rio de R$ { valor } ' ) # output: # O produto Chiclete foi teve 45 unidades vendidas no valor unit\u00e1rio de R$1 # O produto Barra de Chocolate foi teve 23 unidades vendidas no valor unit\u00e1rio de R$4 # O produto Agua mineral foi teve 66 unidades vendidas no valor unit\u00e1rio de R$2 # O produto Jornal foi teve 4 unidades vendidas no valor unit\u00e1rio de R$0.5 # O produto Salgadinho foi teve 16 unidades vendidas no valor unit\u00e1rio de R$2.5 Fechar o arquivo Excel - pandas Importar a biblioteca: import pandas as pd Ler arquivo Excel: df = pd . read_excel ( 'banca_jornal.xlsx' ) Selecionar uma coluna: df [ 'Produto' ] Apresenta as abas dispon\u00edveis do Excel: pd . ExcelFile . sheet_names xlsxwriter Importar a biblioteca: import xlsxwriter Criar arquivo Excel: wb = xlsxwriter . Woorkbook ( 'alunos.xlsx' ) Criar aba no arquivo Excel: ws = wb . add_worksheet ( 'Planilha' ) Colocar palavras em Negrito: bold = wb . add_format ({ 'bold' : 1 }) Escreve cabe\u00e7alho em negrito no Excel: ws . write ( 'A1' , 'Nome' , bold ) ws . write ( 'B1' , 'Idade' , bold ) ws . write ( 'C1' , 'Cidade' , bold ) Cria valores para serem adicionados em formato de tabela: alunos = [( 'Thomas' , '24' , 'Curitiba' ), ( 'Fernanda' , '12' , 'Sao Paulo' ), ( 'Augusto' , '56' , 'Rio de Janeiro' ), ( 'Marcela' , '22' , 'Maringa' )] Looping para escrever valores em formato de tabela: row = 1 col = 0 for aluno in alunos : ws . write_string ( row , col , aluno [ 0 ]) ws . write_string ( row , col + 1 , aluno [ 1 ]) ws . write_string ( row , col + 2 , aluno [ 2 ]) row += 1 Fechar e salvar o arquivo Excel: wb . close () Extras Caracteres especiais: Outras op\u00e7\u00f5es: https://www.python-excel.org/","title":"Aula 4 - Bibliotecas, Excel e TXTs"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#aula-4-bibliotecas-excel-e-txts","text":"","title":"Aula 4 - Bibliotecas, Excel e TXTs"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#bibliotecas","text":"Reposit\u00f3rio das Bibliotecas: https://pypi.org/ Comando para instalar bibliotecas externas: pip install nome_da_biblioteca # Ex.: pip install openpyxl Comando para usar biblioteca no c\u00f3digo # Importa a biblioteca com todas as fun\u00e7\u00f5es dela import nome_da_biblioteca # import xlrd # Importa a biblioteca e permite criar um \"apelido\" pra ela import nome_da_biblioteca as ndb # Ex.: import pandas as pd # Importa uma fun\u00e7\u00e3o espec\u00edfica de dentro da biblioteca from nome_da_biblioteca import funcao # Ex.: from time import sleep","title":"Bibliotecas"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#manipulacao-de-arquivos","text":"Abrir o arquivo: Para criar: ```python arqv = open('nome_do_arquivo.txt', 'w') ``` Para ler: ```python arqv = open('nome_do_arquivo.txt', 'r') ``` Para continuar um texto: ```python arqv = open('nome_do_arquivo.txt', 'a') ``` Escrever dentro do .txt: arqv . write ( 'texto do arquivo' ) Fechar o arquivo: arqv . close ()","title":"Manipula\u00e7\u00e3o de Arquivos"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#interacao-com-o-so","text":"os: Importar a biblioteca: ```python import os ``` Renomear um arquivo: ```python os.rename('arquivo_teste.txt', 'arquivo_modificado.txt') ``` Remover um arquivo da pasta: ```python os.remove('arquivo_modificado.txt') ``` Listar os arquivos presentes na pasta: ```python os.listdir('.') ``` Aponta a execu\u00e7\u00e3o do Python para uma pasta em espec\u00edfico: ```python os.chdir('') ``` glob: Importar a biblioteca: ```python import glob ``` Listar arquivos do diret\u00f3rio pela sua extens\u00e3o: ```python glob.glob(r'.\\*.txt') ``` shutil: Importar a biblioteca: ```python import shutil ``` Movimentar um arquivo para outra pasta: ```python shutil.move('arquivo_modificado.txt', r'.\\pasta_move\\arquivo_modificado.txt') ``` Copiar um arquivo para outra pasta: ```python shutil.copy(r'.\\pasta_move\\arquivo_modificado.txt', r'.\\arquivo_modificado_copy.txt') ```","title":"Intera\u00e7\u00e3o com o SO:"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#bibliotecas-excel","text":"","title":"Bibliotecas Excel:"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#xlrd","text":"Importar a biblioteca: import xlrd Abre um arquivo Excel (XLS): wb = xlrd . open_workbook ( 'banca_jornal.xls' ) Seleciona a aba do Excel: sheet = wb . sheet_by_name ( 'Planilha1' ) Pega valores da primeira coluna: for cell in sheet . col ( 0 ): cell","title":"xlrd"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#openpyxl","text":"Importa a biblioteca: import openpyxl Abrir um arquivo Excel (XLS ou XLSX): wb = openpyxl . load_workbook ( 'banca_jornal.xlsx' ) Apresenta o nome de todas as abas do Excel aberto: wb . get_sheet_names () # output: ['Planilha1'] Seleciona a aba do Excel: sheet = wb [ 'Planilha1' ] Ler o valor da primeira c\u00e9lula (A1): sheet [ 'A1' ] . value # output: Chiclete Apresentar n\u00fameros de linhas: sheet . max_row # output: 6 Percorre uma coluna inteira do Excel: # Nesse c\u00f3digo, ele n\u00e3o ir\u00e1 pegar o cabe\u00e7alho da tabela # Caso queira pegar o cabe\u00e7alho, basta trocar o n\u00famero 2 pelo n\u00famero 1 for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) # output: # Chiclete # Barra de Chocolate # Agua mineral # Jornal # Salgadinho Pegar valores das tr\u00eas colunas, passando por todas as linhas: for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) . value unidade = sheet . cell ( linha , 2 ) . value valor = sheet . cell ( linha , 3 ) . value print ( f 'O produto { nome * } teve* { unidade } unidades vendidas no valor unit\u00e1rio de R$ { valor } ' ) # output: # O produto Chiclete foi teve 45 unidades vendidas no valor unit\u00e1rio de R$1 # O produto Barra de Chocolate foi teve 23 unidades vendidas no valor unit\u00e1rio de R$4 # O produto Agua mineral foi teve 66 unidades vendidas no valor unit\u00e1rio de R$2 # O produto Jornal foi teve 4 unidades vendidas no valor unit\u00e1rio de R$0.5 # O produto Salgadinho foi teve 16 unidades vendidas no valor unit\u00e1rio de R$2.5 Fechar o arquivo Excel -","title":"openpyxl"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#pandas","text":"Importar a biblioteca: import pandas as pd Ler arquivo Excel: df = pd . read_excel ( 'banca_jornal.xlsx' ) Selecionar uma coluna: df [ 'Produto' ] Apresenta as abas dispon\u00edveis do Excel: pd . ExcelFile . sheet_names","title":"pandas"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#xlsxwriter","text":"Importar a biblioteca: import xlsxwriter Criar arquivo Excel: wb = xlsxwriter . Woorkbook ( 'alunos.xlsx' ) Criar aba no arquivo Excel: ws = wb . add_worksheet ( 'Planilha' ) Colocar palavras em Negrito: bold = wb . add_format ({ 'bold' : 1 }) Escreve cabe\u00e7alho em negrito no Excel: ws . write ( 'A1' , 'Nome' , bold ) ws . write ( 'B1' , 'Idade' , bold ) ws . write ( 'C1' , 'Cidade' , bold ) Cria valores para serem adicionados em formato de tabela: alunos = [( 'Thomas' , '24' , 'Curitiba' ), ( 'Fernanda' , '12' , 'Sao Paulo' ), ( 'Augusto' , '56' , 'Rio de Janeiro' ), ( 'Marcela' , '22' , 'Maringa' )] Looping para escrever valores em formato de tabela: row = 1 col = 0 for aluno in alunos : ws . write_string ( row , col , aluno [ 0 ]) ws . write_string ( row , col + 1 , aluno [ 1 ]) ws . write_string ( row , col + 2 , aluno [ 2 ]) row += 1 Fechar e salvar o arquivo Excel: wb . close ()","title":"xlsxwriter"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#extras","text":"","title":"Extras"},{"location":"S01/Aula%204%20-%20Bibliotecas%2C%20Excel%20e%20TXTs/#caracteres-especiais","text":"Outras op\u00e7\u00f5es: https://www.python-excel.org/","title":"Caracteres especiais:"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/","text":"Aula 5 - Selenium e BeautifulSoup Webdrivers Chromedriver: https://chromedriver.chromium.org/downloads Geckodriver: https://github.com/mozilla/geckodriver/releases IEDriver: https://www.selenium.dev/downloads/ x64: https://github.com/SeleniumHQ/selenium/releases/download/selenium-3.150.0/IEDriverServer_x64_3.150.2.zip x32: https://github.com/SeleniumHQ/selenium/releases/download/selenium-3.150.0/IEDriverServer_Win32_3.150.2.zip Operadriver: https://github.com/operasoftware/operachromiumdriver/releases Edgedriver: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/ Selenium Instala\u00e7\u00e3o do Selenium: pip install selenium Importa\u00e7\u00e3o da biblioteca: from selenium import webdriver Chamar navegadores com o(s) webdriver(s): #Google Chrome driver = webdriver . Chrome ( 'chromedriver.exe' ) #Mozilla Firefox driver = webdriver . Firefox ( 'geckodriver.exe' ) #Internet Explorer driver = webdriver . Ie ( 'IEDriverServer.exe' ) Maximizar a janela do navegador: driver . maximize_window () Colocar um tempo para carregamento - IMPL\u00cdCITO: driver . implicitly_wait ( 30 ) Colocar um tempo para carregamento - EXPL\u00cdCITO: from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC WebDriverWait ( driver , 30 ) . until ( EC . presence_of_element_located (( By . ID , 'twotabsearchtextbox' ))) Acessar um site: driver . get ( 'https://www.amazon.com.br/' ) Buscar elementos na p\u00e1gina: #Buscar pela class do elemento driver . find_element_by_class_name ( 'nav-input.nav-progressive-attribute' ) #Buscar pelo id do elemento driver . find_element_by_id ( 'twotabsearchtextbox' ) #Buscar pela tag do elemento driver . find_element_by_tag_name ( 'h1' ) #Buscar pelo xpath do elemento driver . find_element_by_xpath ( '//input[@id=\"twotabsearchtextbox\"]' ) #Buscar pelo texto completo do elemento: driver . find_element_by_link_text ( 'Todos' ) #Buscar pelo texto parcial do elemento: driver . find_element_by_partial_link_text ( 'endere\u00e7o' ) . click () #Buscar pelo seletor CSS: driver . find_element_by_css_selector ( '#searchDropdownBox' ) driver . find_element_by_css_selector ( '[name=url]' ) driver . find_element_by_css_selector ( '.nav-search-dropdown.searchSelect.nav-progressive-attrubute.nav-progressive-search-dropdown' ) Digita um valor no site: driver . find_element_by_id ( 'twotabsearchtextbox' ) . send_keys ( 'Python' ) Apagar um campo escrito: driver . find_element_by_id ( 'twotabsearchtextbox' ) . clear () Clicar em um elemento: driver . find_element_by_id ( 'nav-search-submit-button' ) . click () Movimentar a tela para um elemento (scroll): driver . find_element_by_class_name ( 'navFooterBackToTopText' ) . location_once_scrolled_into_view Extrair texto: driver . find_element_by_id ( 'glow-ingress-line2' ) . text Coletar atributos do HTML: driver . find_element_by_id ( 'nav-logo-sprites' ) . get_attribute ( 'aria-label' ) Tirar print de um elemento ou do site: #Print do elemento driver . find_element_by_id ( 'navbar' ) . screenshot ( 'menu.png' ) #Print do site driver . save_screenshot ( \"screenshot.png\" ) Selecionar uma op\u00e7\u00e3o no Dropdown: from selenium.webdriver.support.ui import Select dropdown = Select ( driver . find_element_by_id ( 'searchDropdownBox' )) #Selecionar pelo texto presente dropdown . select_by_visible_text ( 'Computadores e Inform\u00e1tica' ) #Selecionar pelo atributo value do HTML dropdown . select_by_value ( 'search-alias=computers' ) #Selecionar pelo n\u00famero dele na lista dropdown . select_by_index ( 11 ) Fechar aba do navegador: driver . close () Fechar navegador e seu webdriver: driver . quit () BeautifulSoup Importar biblioteca para \"baixar\" o HTML da p\u00e1gina: from urllib.request import urlopen Efetuar requisi\u00e7\u00e3o da p\u00e1gina HTML: html = urlopen ( 'https://quotes.toscrape.com/' ) Resolvendo problema de certificado SSL (se houver): ```python import ssl ssl._create_default_https_context = ssl._create_unverified_context ``` Outras formas de resolver o erro de certificado SSL: https://exerror.com/urlopen-error-ssl-certificate_verify_failed-certificate-verify-failed/ Instalar o \u201cparser\u201d do HTML: pip install beautifulsoup4 Importar biblioteca do \u201cparser\u201d de HTML: from bs4 import BeautifulSoup Formatar o c\u00f3digo de HTML para \u201cparsear\u201d: soup = BeautifulSoup ( html . read (), 'html.parser' ) ALTERNATIVA de biblioteca para \"baixar\" o html da p\u00e1gina: Instala\u00e7\u00e3o da \"lib\": ```bash pip install requests ``` Importa\u00e7\u00e3o da \u201clib\u201d: ```python import requests ``` Efetuar requisi\u00e7\u00e3o da p\u00e1gina HTML: ```python html = requests.get('https://quotes.toscrape.com/') ``` Formatar o c\u00f3digo de HTML para \u201cparsear\u201d: ```python soup = BeautifulSoup(html.text, 'html.parser') ``` Acessar uma TAG diretamente: soup . h1 # output: # <h1> # <a href=\"/\" style=\"text-decoration: none\">Quotes to Scrape</a> # </h1> Acessar o PRIMEIRO elemento atrav\u00e9s dos seus atributos b\u00e1sicos (ID ou CLASS): soup . find ( class_ = 'text' ) # output: # <span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span> Buscar algum elemento atrav\u00e9s do seu texto (entre as TAGS): soup . find ( text = \"deep-thoughts\" ) # output: 'deep-thoughts' Buscar mais de um elemento na p\u00e1gina: soup . find_all ( class_ = 'text' ) # ou soup . find_all ( 'span' , { 'class' : 'text' }) # output: [<span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span>, <span class=\"text\" itemprop=\"text\">\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d</span>, ... ] Ver atributos da TAG de HTML: div = soup . find ( 'div' , { 'class' : 'quote' }) div . attrs # output: {'class': ['quote'], 'itemscope': '', 'itemtype': 'http://schema.org/CreativeWork'} Pegar atributos da TAG de HTML: soup . find ( 'div' , { 'class' : 'quote' }) . get ( 'itemtype' ) # output: 'http://schema.org/CreativeWork' Xpath Guia de cria\u00e7\u00e3o de Xpath: https://www.guru99.com/xpath-selenium.html Extra: https://devhints.io/xpath CSS Selector: Guia: https://www.w3schools.com/cssref/css_selectors.asp Cheat Sheet: https://devhints.io/css Extra: https://www.freecodecamp.org/news/css-selectors-cheat-sheet/ Extras https://dunossauro.github.io/curso-python-selenium/ https://scrapy.org/ https://mechanicalsoup.readthedocs.io/en/stable/","title":"Aula 5 - Selenium e BeautifulSoup"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/#aula-5-selenium-e-beautifulsoup","text":"","title":"Aula 5 - Selenium e BeautifulSoup"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/#webdrivers","text":"Chromedriver: https://chromedriver.chromium.org/downloads Geckodriver: https://github.com/mozilla/geckodriver/releases IEDriver: https://www.selenium.dev/downloads/ x64: https://github.com/SeleniumHQ/selenium/releases/download/selenium-3.150.0/IEDriverServer_x64_3.150.2.zip x32: https://github.com/SeleniumHQ/selenium/releases/download/selenium-3.150.0/IEDriverServer_Win32_3.150.2.zip Operadriver: https://github.com/operasoftware/operachromiumdriver/releases Edgedriver: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/","title":"Webdrivers"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/#selenium","text":"Instala\u00e7\u00e3o do Selenium: pip install selenium Importa\u00e7\u00e3o da biblioteca: from selenium import webdriver Chamar navegadores com o(s) webdriver(s): #Google Chrome driver = webdriver . Chrome ( 'chromedriver.exe' ) #Mozilla Firefox driver = webdriver . Firefox ( 'geckodriver.exe' ) #Internet Explorer driver = webdriver . Ie ( 'IEDriverServer.exe' ) Maximizar a janela do navegador: driver . maximize_window () Colocar um tempo para carregamento - IMPL\u00cdCITO: driver . implicitly_wait ( 30 ) Colocar um tempo para carregamento - EXPL\u00cdCITO: from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC WebDriverWait ( driver , 30 ) . until ( EC . presence_of_element_located (( By . ID , 'twotabsearchtextbox' ))) Acessar um site: driver . get ( 'https://www.amazon.com.br/' ) Buscar elementos na p\u00e1gina: #Buscar pela class do elemento driver . find_element_by_class_name ( 'nav-input.nav-progressive-attribute' ) #Buscar pelo id do elemento driver . find_element_by_id ( 'twotabsearchtextbox' ) #Buscar pela tag do elemento driver . find_element_by_tag_name ( 'h1' ) #Buscar pelo xpath do elemento driver . find_element_by_xpath ( '//input[@id=\"twotabsearchtextbox\"]' ) #Buscar pelo texto completo do elemento: driver . find_element_by_link_text ( 'Todos' ) #Buscar pelo texto parcial do elemento: driver . find_element_by_partial_link_text ( 'endere\u00e7o' ) . click () #Buscar pelo seletor CSS: driver . find_element_by_css_selector ( '#searchDropdownBox' ) driver . find_element_by_css_selector ( '[name=url]' ) driver . find_element_by_css_selector ( '.nav-search-dropdown.searchSelect.nav-progressive-attrubute.nav-progressive-search-dropdown' ) Digita um valor no site: driver . find_element_by_id ( 'twotabsearchtextbox' ) . send_keys ( 'Python' ) Apagar um campo escrito: driver . find_element_by_id ( 'twotabsearchtextbox' ) . clear () Clicar em um elemento: driver . find_element_by_id ( 'nav-search-submit-button' ) . click () Movimentar a tela para um elemento (scroll): driver . find_element_by_class_name ( 'navFooterBackToTopText' ) . location_once_scrolled_into_view Extrair texto: driver . find_element_by_id ( 'glow-ingress-line2' ) . text Coletar atributos do HTML: driver . find_element_by_id ( 'nav-logo-sprites' ) . get_attribute ( 'aria-label' ) Tirar print de um elemento ou do site: #Print do elemento driver . find_element_by_id ( 'navbar' ) . screenshot ( 'menu.png' ) #Print do site driver . save_screenshot ( \"screenshot.png\" ) Selecionar uma op\u00e7\u00e3o no Dropdown: from selenium.webdriver.support.ui import Select dropdown = Select ( driver . find_element_by_id ( 'searchDropdownBox' )) #Selecionar pelo texto presente dropdown . select_by_visible_text ( 'Computadores e Inform\u00e1tica' ) #Selecionar pelo atributo value do HTML dropdown . select_by_value ( 'search-alias=computers' ) #Selecionar pelo n\u00famero dele na lista dropdown . select_by_index ( 11 ) Fechar aba do navegador: driver . close () Fechar navegador e seu webdriver: driver . quit ()","title":"Selenium"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/#beautifulsoup","text":"Importar biblioteca para \"baixar\" o HTML da p\u00e1gina: from urllib.request import urlopen Efetuar requisi\u00e7\u00e3o da p\u00e1gina HTML: html = urlopen ( 'https://quotes.toscrape.com/' ) Resolvendo problema de certificado SSL (se houver): ```python import ssl ssl._create_default_https_context = ssl._create_unverified_context ``` Outras formas de resolver o erro de certificado SSL: https://exerror.com/urlopen-error-ssl-certificate_verify_failed-certificate-verify-failed/ Instalar o \u201cparser\u201d do HTML: pip install beautifulsoup4 Importar biblioteca do \u201cparser\u201d de HTML: from bs4 import BeautifulSoup Formatar o c\u00f3digo de HTML para \u201cparsear\u201d: soup = BeautifulSoup ( html . read (), 'html.parser' ) ALTERNATIVA de biblioteca para \"baixar\" o html da p\u00e1gina: Instala\u00e7\u00e3o da \"lib\": ```bash pip install requests ``` Importa\u00e7\u00e3o da \u201clib\u201d: ```python import requests ``` Efetuar requisi\u00e7\u00e3o da p\u00e1gina HTML: ```python html = requests.get('https://quotes.toscrape.com/') ``` Formatar o c\u00f3digo de HTML para \u201cparsear\u201d: ```python soup = BeautifulSoup(html.text, 'html.parser') ``` Acessar uma TAG diretamente: soup . h1 # output: # <h1> # <a href=\"/\" style=\"text-decoration: none\">Quotes to Scrape</a> # </h1> Acessar o PRIMEIRO elemento atrav\u00e9s dos seus atributos b\u00e1sicos (ID ou CLASS): soup . find ( class_ = 'text' ) # output: # <span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span> Buscar algum elemento atrav\u00e9s do seu texto (entre as TAGS): soup . find ( text = \"deep-thoughts\" ) # output: 'deep-thoughts' Buscar mais de um elemento na p\u00e1gina: soup . find_all ( class_ = 'text' ) # ou soup . find_all ( 'span' , { 'class' : 'text' }) # output: [<span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span>, <span class=\"text\" itemprop=\"text\">\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d</span>, ... ] Ver atributos da TAG de HTML: div = soup . find ( 'div' , { 'class' : 'quote' }) div . attrs # output: {'class': ['quote'], 'itemscope': '', 'itemtype': 'http://schema.org/CreativeWork'} Pegar atributos da TAG de HTML: soup . find ( 'div' , { 'class' : 'quote' }) . get ( 'itemtype' ) # output: 'http://schema.org/CreativeWork'","title":"BeautifulSoup"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/#xpath","text":"Guia de cria\u00e7\u00e3o de Xpath: https://www.guru99.com/xpath-selenium.html Extra: https://devhints.io/xpath CSS Selector: Guia: https://www.w3schools.com/cssref/css_selectors.asp Cheat Sheet: https://devhints.io/css Extra: https://www.freecodecamp.org/news/css-selectors-cheat-sheet/","title":"Xpath"},{"location":"S01/Aula%205%20-%20Selenium%20e%20BeautifulSoup/#extras","text":"https://dunossauro.github.io/curso-python-selenium/ https://scrapy.org/ https://mechanicalsoup.readthedocs.io/en/stable/","title":"Extras"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/","text":"Aula 7 - RegEx e APIs Testar RegEx https://pythex.org/ https://regex101.com/ https://www.regexpal.com/ https://regexr.com/ re Importar biblioteca: import re Criar padr\u00e3o do RegEx \u00e0 ser procurado: tel_regex = re . compile ( r '\\(\\d\\d\\) \\d\\d\\d\\d\\d\\-\\d\\d\\d\\d' ) Buscar correspond\u00eancia na string inteira: coleta = tel_regex . search ( 'Meu n\u00famero \u00e9 (41) 99123-4567' ) Coletar a \u00fanica combina\u00e7\u00e3o completa: print ( coleta . group ( 0 )) # output: (41) 99123-4567 Fazer grupos com par\u00eanteses: grupos_regex = re . compile ( r '(\\d {2} ) (\\d{4,5})\\-(\\d {4} )' ) coleta = grupos_regex . search ( 'Meu n\u00famero \u00e9 41 99123-4567' ) Coletar dados dos grupos encapsulados pelo par\u00eanteses: # Usando index print ( f 'Este \u00e9 o grupo 0: { coleta . group ( 0 ) } ' ) # output: 41 99123-4567 print ( f 'Este \u00e9 o grupo 1: { coleta . group ( 1 ) } ' ) # output: 41 print ( f 'Este \u00e9 o grupo 2: { coleta . group ( 2 ) } ' ) # output: 99123 print ( f 'Este \u00e9 o grupo 3: { coleta . group ( 3 ) } ' ) # output: 4567 # Tupla com os valores dos grupos coleta . groups () # output: ('41', '99123', '4567') Selecionar uma palavra ou outra: regex_ou = re . compile ( 'Wilber|Thomas' ) coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Wilber' ) print ( coleta . group ()) # output: Wilber coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Thomas' ) print ( coleta . group ()) # output: Thomas Selecionar parcialmente uma palavra ou outra: regex_ou = re . compile ( 'Wil(ber|mar)' ) coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Wilber' ) print ( coleta . group ()) # output: Wilber coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Wilmar' ) print ( coleta . group ()) # output: Wilmar Elemento opcional no meio de uma palavra/frase (existe ou n\u00e3o existe): regex_bat = re . compile ( r 'Bat(wo)?man' ) coleta = regex_bat . search ( 'As aventuras de Batman' ) print ( coleta . group ()) # output: Batman coleta = regex_bat . search ( 'As aventuras da Batwoman' ) print ( coleta . group ()) # output: Batwoman Repeti\u00e7\u00e3o indefinida (0 ou 1 at\u00e9 o infinito): # 0 at\u00e9 o infinito regex_risada = re . compile ( r '(HA)*' ) # 1 at\u00e9 o infinito regex_risada = re . compile ( r '(HA)+' ) coleta = regex_risada . search ( 'HAHAHAHAHA! Est\u00e1 foi uma excelente piada!' ) print ( coleta . group ()) # output: HAHAHAHAHA Localizar mais de uma correspond\u00eancia (resultado em lista): tel_regex = re . compile ( r '\\(\\d {2} \\) \\d{4,5}\\-\\d {4} ' ) coleta = tel_regex . findall ( 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' ) print ( coleta ) # output: ['(41) 99123-4567', '(41) 3123-4567'] Correspond\u00eancia no in\u00edcio da frase/texto: regex_inicio = re . compile ( r '^Sabia' ) coleta = regex_inicio . search ( 'Sabia que o significado da vida, do universo e tudo mais \u00e9 42?' ) print ( coleta . group ()) # output: Sabia Correspond\u00eancia no final da frase/texto: regex_inicio = re . compile ( r '\\d {2} $' ) coleta = regex_inicio . search ( 'O significado da vida, do universo e tudo mais \u00e9 42' ) print ( coleta . group ()) # output: 42 Caractere coringa: regex_coringa = re . compile ( r '.at' ) coleta = regex_coringa . findall ( 'The cat with the hat hit a bat' ) print ( coleta ) # output: ['cat', 'hat', 'bat'] Correspond\u00eancia sem saber a palavra, mas tendo uma frase padr\u00e3o: regex_tudo = re . compile ( r 'Primeiro nome: (.*) Segundo Nome: (.*)' ) coleta = regex_tudo . search ( 'Primeiro nome: Harry Segundo Nome: Potter' ) print ( coleta . group ( 1 )) # output: Harry print ( coleta . group ( 2 )) # output: Potter Remover Case Sensitive (diferen\u00e7a entre mai\u00fasculas e min\u00fasculas) do RegEx: regex_cases = re . compile ( r 'metallica' , re . IGNORECASE ) coleta = regex_cases . search ( 'METALLICA \u00e9 uma banda de muito sucesso!' ) print ( coleta . group ()) # output: METALLICA Substituir valores: regex_sub = re . compile ( r '\\d' ) coleta = regex_sub . sub ( '*' , 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' ) print ( coleta ) # output: Meu n\u00famero residencial \u00e9 (**) *****-**** e meu n\u00famero de celular \u00e9 (**) ****-**** Separar uma frase atrav\u00e9s de um padr\u00e3o: regex_separador = re . compile ( r '\\s' ) coleta = regex_separador . split ( 'METALLICA \u00e9 uma banda de muito sucesso!' ) print ( coleta ) # output: ['METALLICA', '\u00e9', 'uma', 'banda', 'de', 'muito', 'sucesso!'] Padr\u00f5es prontos: Buscar por CPF: ```python regex_cpf = re.compile(r'\\d{3}\\.?\\d{3}\\.?\\d{3}\\-?\\d{2}') coleta = regex_cpf.findall('O seu CPF \u00e9 470.485.110-95 e o meu \u00e9 11745629009') print(coleta) # output: ['470.485.110-95', '11745629009'] ``` Busca por telefone: ```python regex_tel = re.compile(r'\\(?\\d{2}\\)?\\s?\\d{4,5}\\-?\\d{4}') coleta = regex_tel.findall(\"O seu telefone fixo \u00e9 (41) 3123-4567, j\u00e1 o celular \u00e9 41 99123-4567 e o meu seria 4131234567.\") print(coleta) # output: ['(41) 3123-4567', '41 99123-4567', '4131234567'] ``` Busca por Email: ```python regex_email = re.compile(r'(?:\\w+\\.)*\\w*\\@\\w*(?:\\.\\w+)+') coleta = regex_email.findall('O seu e-mail \u00e9 tiara.hessel9@yahoo.com, o meu e-mail \u00e9 shaun_nitzsche96@hotmail.com e acredito que podemos criar um e-mail em conjunto chamado alphonso19@outlook.com.br.') print(coleta) # output: ['tiara.hessel9@yahoo.com', 'shaun_nitzsche96@hotmail.com', 'alphonso19@outlook.com.br'] ``` APIs REST: Postman: https://www.postman.com/downloads/ Insomnia: https://insomnia.rest/download SOAP: SoapUI: https://www.soapui.org/downloads/soapui/ Bibliotecas: requests json Funcionalidades: GET API de teste: ```python import requests url = \"https://reqres.in/api/users?page=2\" response = requests.get(url) r_json = response.json() print(r_json['data'][0]['email']) # output: michael.lawson@reqres.in ``` API de Universidades no Brasil: ```python import requests url = \"http://universities.hipolabs.com/search?country=brazil\" response = requests.get(url) r_json = response.json() print(r_json[15]['name']) # output: Universidade Regional de Blumenau ``` Exemplos GET: https://viacep.com.br/ https://jsonplaceholder.typicode.com/ https://www.bcb.gov.br/api/servico/sitebcb/indicadorinflacao https://agify.io/ https://github.com/Hipo/university-domains-list POST: Cadastrar usu\u00e1rio de teste: ```python import requests import json url = \"https://reqres.in/api/users\" payload = json.dumps({ \"name\": \"Harry Potter\", \"job\": \"Desenvolvedor RPA\" }) headers = { 'Content-Type': 'application/json' } response = requests.post(url, headers=headers, data=payload) r_json = response.json() print(r_json['job']) # output: Desenvolvedor RPA ``` PUT: Serve para atualizar algum dado em base atrav\u00e9s de API. DELETE: Serve para apagar algum dado em base atrav\u00e9s de API. Extras APIs para \"Brincar\" https://apipheny.io/free-api/ https://github.com/public-apis/public-apis https://jsonplaceholder.typicode.com/ https://reqres.in/ https://gorest.co.in/ Aprender RegEx https://docs.python.org/3/library/re.html https://www.w3schools.com/python/python_regex.asp https://medium.com/xp-inc/regex-um-guia-pratico-para-express%C3%B5es-regulares- 1ac5fa4dd39f https://digitalinnovation.one/artigos/regex-regular-expression-ou-expressao-regular https://cheatography.com/davechild/cheat-sheets/regular-expressions/","title":"Aula 7 - RegEx e APIs"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#aula-7-regex-e-apis","text":"","title":"Aula 7 - RegEx e APIs"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#testar-regex","text":"https://pythex.org/ https://regex101.com/ https://www.regexpal.com/ https://regexr.com/","title":"Testar RegEx"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#re","text":"Importar biblioteca: import re Criar padr\u00e3o do RegEx \u00e0 ser procurado: tel_regex = re . compile ( r '\\(\\d\\d\\) \\d\\d\\d\\d\\d\\-\\d\\d\\d\\d' ) Buscar correspond\u00eancia na string inteira: coleta = tel_regex . search ( 'Meu n\u00famero \u00e9 (41) 99123-4567' ) Coletar a \u00fanica combina\u00e7\u00e3o completa: print ( coleta . group ( 0 )) # output: (41) 99123-4567 Fazer grupos com par\u00eanteses: grupos_regex = re . compile ( r '(\\d {2} ) (\\d{4,5})\\-(\\d {4} )' ) coleta = grupos_regex . search ( 'Meu n\u00famero \u00e9 41 99123-4567' ) Coletar dados dos grupos encapsulados pelo par\u00eanteses: # Usando index print ( f 'Este \u00e9 o grupo 0: { coleta . group ( 0 ) } ' ) # output: 41 99123-4567 print ( f 'Este \u00e9 o grupo 1: { coleta . group ( 1 ) } ' ) # output: 41 print ( f 'Este \u00e9 o grupo 2: { coleta . group ( 2 ) } ' ) # output: 99123 print ( f 'Este \u00e9 o grupo 3: { coleta . group ( 3 ) } ' ) # output: 4567 # Tupla com os valores dos grupos coleta . groups () # output: ('41', '99123', '4567') Selecionar uma palavra ou outra: regex_ou = re . compile ( 'Wilber|Thomas' ) coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Wilber' ) print ( coleta . group ()) # output: Wilber coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Thomas' ) print ( coleta . group ()) # output: Thomas Selecionar parcialmente uma palavra ou outra: regex_ou = re . compile ( 'Wil(ber|mar)' ) coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Wilber' ) print ( coleta . group ()) # output: Wilber coleta = regex_ou . search ( 'Ol\u00e1, meu nome \u00e9 Wilmar' ) print ( coleta . group ()) # output: Wilmar Elemento opcional no meio de uma palavra/frase (existe ou n\u00e3o existe): regex_bat = re . compile ( r 'Bat(wo)?man' ) coleta = regex_bat . search ( 'As aventuras de Batman' ) print ( coleta . group ()) # output: Batman coleta = regex_bat . search ( 'As aventuras da Batwoman' ) print ( coleta . group ()) # output: Batwoman Repeti\u00e7\u00e3o indefinida (0 ou 1 at\u00e9 o infinito): # 0 at\u00e9 o infinito regex_risada = re . compile ( r '(HA)*' ) # 1 at\u00e9 o infinito regex_risada = re . compile ( r '(HA)+' ) coleta = regex_risada . search ( 'HAHAHAHAHA! Est\u00e1 foi uma excelente piada!' ) print ( coleta . group ()) # output: HAHAHAHAHA Localizar mais de uma correspond\u00eancia (resultado em lista): tel_regex = re . compile ( r '\\(\\d {2} \\) \\d{4,5}\\-\\d {4} ' ) coleta = tel_regex . findall ( 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' ) print ( coleta ) # output: ['(41) 99123-4567', '(41) 3123-4567'] Correspond\u00eancia no in\u00edcio da frase/texto: regex_inicio = re . compile ( r '^Sabia' ) coleta = regex_inicio . search ( 'Sabia que o significado da vida, do universo e tudo mais \u00e9 42?' ) print ( coleta . group ()) # output: Sabia Correspond\u00eancia no final da frase/texto: regex_inicio = re . compile ( r '\\d {2} $' ) coleta = regex_inicio . search ( 'O significado da vida, do universo e tudo mais \u00e9 42' ) print ( coleta . group ()) # output: 42 Caractere coringa: regex_coringa = re . compile ( r '.at' ) coleta = regex_coringa . findall ( 'The cat with the hat hit a bat' ) print ( coleta ) # output: ['cat', 'hat', 'bat'] Correspond\u00eancia sem saber a palavra, mas tendo uma frase padr\u00e3o: regex_tudo = re . compile ( r 'Primeiro nome: (.*) Segundo Nome: (.*)' ) coleta = regex_tudo . search ( 'Primeiro nome: Harry Segundo Nome: Potter' ) print ( coleta . group ( 1 )) # output: Harry print ( coleta . group ( 2 )) # output: Potter Remover Case Sensitive (diferen\u00e7a entre mai\u00fasculas e min\u00fasculas) do RegEx: regex_cases = re . compile ( r 'metallica' , re . IGNORECASE ) coleta = regex_cases . search ( 'METALLICA \u00e9 uma banda de muito sucesso!' ) print ( coleta . group ()) # output: METALLICA Substituir valores: regex_sub = re . compile ( r '\\d' ) coleta = regex_sub . sub ( '*' , 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' ) print ( coleta ) # output: Meu n\u00famero residencial \u00e9 (**) *****-**** e meu n\u00famero de celular \u00e9 (**) ****-**** Separar uma frase atrav\u00e9s de um padr\u00e3o: regex_separador = re . compile ( r '\\s' ) coleta = regex_separador . split ( 'METALLICA \u00e9 uma banda de muito sucesso!' ) print ( coleta ) # output: ['METALLICA', '\u00e9', 'uma', 'banda', 'de', 'muito', 'sucesso!'] Padr\u00f5es prontos: Buscar por CPF: ```python regex_cpf = re.compile(r'\\d{3}\\.?\\d{3}\\.?\\d{3}\\-?\\d{2}') coleta = regex_cpf.findall('O seu CPF \u00e9 470.485.110-95 e o meu \u00e9 11745629009') print(coleta) # output: ['470.485.110-95', '11745629009'] ``` Busca por telefone: ```python regex_tel = re.compile(r'\\(?\\d{2}\\)?\\s?\\d{4,5}\\-?\\d{4}') coleta = regex_tel.findall(\"O seu telefone fixo \u00e9 (41) 3123-4567, j\u00e1 o celular \u00e9 41 99123-4567 e o meu seria 4131234567.\") print(coleta) # output: ['(41) 3123-4567', '41 99123-4567', '4131234567'] ``` Busca por Email: ```python regex_email = re.compile(r'(?:\\w+\\.)*\\w*\\@\\w*(?:\\.\\w+)+') coleta = regex_email.findall('O seu e-mail \u00e9 tiara.hessel9@yahoo.com, o meu e-mail \u00e9 shaun_nitzsche96@hotmail.com e acredito que podemos criar um e-mail em conjunto chamado alphonso19@outlook.com.br.') print(coleta) # output: ['tiara.hessel9@yahoo.com', 'shaun_nitzsche96@hotmail.com', 'alphonso19@outlook.com.br'] ```","title":"re"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#apis","text":"REST: Postman: https://www.postman.com/downloads/ Insomnia: https://insomnia.rest/download SOAP: SoapUI: https://www.soapui.org/downloads/soapui/ Bibliotecas: requests json Funcionalidades: GET API de teste: ```python import requests url = \"https://reqres.in/api/users?page=2\" response = requests.get(url) r_json = response.json() print(r_json['data'][0]['email']) # output: michael.lawson@reqres.in ``` API de Universidades no Brasil: ```python import requests url = \"http://universities.hipolabs.com/search?country=brazil\" response = requests.get(url) r_json = response.json() print(r_json[15]['name']) # output: Universidade Regional de Blumenau ``` Exemplos GET: https://viacep.com.br/ https://jsonplaceholder.typicode.com/ https://www.bcb.gov.br/api/servico/sitebcb/indicadorinflacao https://agify.io/ https://github.com/Hipo/university-domains-list POST: Cadastrar usu\u00e1rio de teste: ```python import requests import json url = \"https://reqres.in/api/users\" payload = json.dumps({ \"name\": \"Harry Potter\", \"job\": \"Desenvolvedor RPA\" }) headers = { 'Content-Type': 'application/json' } response = requests.post(url, headers=headers, data=payload) r_json = response.json() print(r_json['job']) # output: Desenvolvedor RPA ``` PUT: Serve para atualizar algum dado em base atrav\u00e9s de API. DELETE: Serve para apagar algum dado em base atrav\u00e9s de API.","title":"APIs"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#extras","text":"","title":"Extras"},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#apis-para-brincar","text":"https://apipheny.io/free-api/ https://github.com/public-apis/public-apis https://jsonplaceholder.typicode.com/ https://reqres.in/ https://gorest.co.in/","title":"APIs para \"Brincar\""},{"location":"S01/Aula%207%20-%20RegEx%20e%20APIs/#aprender-regex","text":"https://docs.python.org/3/library/re.html https://www.w3schools.com/python/python_regex.asp https://medium.com/xp-inc/regex-um-guia-pratico-para-express%C3%B5es-regulares- 1ac5fa4dd39f https://digitalinnovation.one/artigos/regex-regular-expression-ou-expressao-regular https://cheatography.com/davechild/cheat-sheets/regular-expressions/","title":"Aprender RegEx"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/","text":"Aula 8 - Email, DBs e OO smtplib Liberar Acesso ao SMTP do Gmail: https://myaccount.google.com/lesssecureapps Tela de ativa\u00e7\u00e3o: ![acesso_menos_seguro.png](../img/acesso_menos_seguro.png) Protocolos SMTP: Gmail: https://support.google.com/a/answer/176600?hl=pt#zippy=%2Cusar-o-servidor-smtp-do-gmail Link alternativo: https://support.google.com/mail/answer/7126229?hl=pt-BR Outlook: https://support.microsoft.com/pt-br/office/configura\u00e7\u00f5es-pop-imap-e-smtp-para-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040 Importar as bibliotecas: import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from email.mime.application import MIMEApplication Instanciar o email: mail = MIMEMultipart () Criar o corpo do e-mail: payload = \"\"\"Ol\u00e1! Tudo bem? Este \u00e9 um e-mail autom\u00e1tico para testar o disparo de e-mail ensinado pelo curso de RPA Python! Atenciosamente, RPA Pythonico \"\"\" Configurar o e-mail que est\u00e1 enviando: mail [ 'From' ] = 'rpapythonico@gmail.com' Configurar o(s) destinat\u00e1rio(s) do e-mail # UM destinat\u00e1rio mail [ 'To' ] = 'rpapythonico@gmail.com' # MAIS DE UM destinat\u00e1rio mail [ 'To' ] = 'rpapythonico@gmail.com,seu_email@provedor.com' Configurar o assunto do e-mail: mail [ 'Subject' ] = 'Email Autom\u00e1tico - SMTPLIB' Formatar o corpo do e-mail em formato de texto: mail . attach ( MIMEText ( payload , 'plain' )) Criar conex\u00e3o SMTP: server = smtplib . SMTP ( 'smtp.gmail.com' , '587' ) server . starttls () Se autenticar no servidor SMTP: server . login ( msg [ 'From' ], 'sua_senha' ) Enviar e-mail: SEM Anexo # UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ], mail . as_string ()) # MAIS DE UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ] . split ( \",\" ), mail . as_string ()) COM Anexo file = open ( 'seu_arquivo.py' , 'rb' ) app = MIMEApplication ( file . read (), 'py' ) app . add_header ( 'Content-Disposition' , 'attachment;filename=seu_arquivo.py' ) mail . attach ( app ) # UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ], mail . as_string ()) # MAIS DE UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ] . split ( \",\" ), mail . as_string ()) Finalizar conex\u00e3o SMTP: server . quit () Ferramentas DB MS SQL: Download SQL Server: https://www.microsoft.com/pt-br/sql-server/sql-server-downloads Selecionar a edi\u00e7\u00e3o \"Desenvolvedor\"/\"Developer\". Link direto: https://go.microsoft.com/fwlink/?linkid=866662 SQL Management Studio: P\u00e1gina de download: https://docs.microsoft.com/pt-br/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15 Link direto: https://aka.ms/ssmsfullsetup Biblioteca pyodbc: Documenta\u00e7\u00e3o pyodbc: https://github.com/mkleehammer/pyodbc/wiki Reposit\u00f3rio pyodbc: https://github.com/mkleehammer/pyodbc/ SQLite: Programas pra usar o SQLite: SQLite Browser: https://sqlitebrowser.org/dl/ SQLite Studio: https://sqlitestudio.pl/ Programa para ler um arquivo \".db\" do SQLite: SQLite Viewer Online: https://inloop.github.io/sqlite-viewer/ Site SQLite: https://www.sqlite.org/index.html Documenta\u00e7\u00e3o sqlite3: https://docs.python.org/3/library/sqlite3.html https://www.sqlitetutorial.net/ sqlite3 Importar biblioteca: import sqlite3 Criar conex\u00e3o: con = sqlite3 . connect ( 'example.db' ) Criar cursor: cur = con . cursor () Criar uma tabela: cur . execute ( '''CREATE TABLE \"TB_Cliente\"( \"CPF\" INTEGER NOT NULL UNIQUE, \"Nome_Completo\" TEXT NOT NULL, \"Data_Nascimento\" TEXT NOT NULL, \"Telefone\" TEXT, \"Email\" TEXT, \"CEP\" TEXT NOT NULL, PRIMARY KEY(\"CPF\"));''' ) Aprovar as intera\u00e7\u00f5es com o banco de dados: con . commit () Inserir algum dado: cur . execute ( '''INSERT INTO TB_Cliente VALUES (20955758572, 'Laura Luana Assis', '13/06/1948', '68991361938', 'lauraluanaassis-91@naressi.com.br', '69911355')''' ) con . commit () Inserir v\u00e1rios registros no banco: lista_registros = [( 88190475789 , 'Jos\u00e9 Hugo Manuel Porto' , '11/07/1997' , '41989320821' , 'jjosehugomanuelporto@patriciagrillo.adv.br' , '83309270' ), ( 39962955106 , 'Marina Carolina dos Santos' , '26/09/1995' , '81984235792' , 'marinacarolinadossantos_@lukin4.com.br' , '53350130' ), ( 20955758572 , 'Laura Luana Assis' , '13/06/1948' , '68991361938' , 'lauraluanaassis-91@naressi.com.br' , '69911355' ), ( 76938977550 , 'Yasmin Evelyn Maria Costa' , '20/04/1959' , '91998657654' , 'yasminevelynmariacosta-88@yahoo.com.ar' , '66810020' ), ( 25373027375 , 'Fernando Giovanni Bernardes' , '02/03/1964' , '81989889726' , 'fernandogiovannibernardes-92@soulcomunicacao.com.br' , '51180440' ), ( 85775491947 , 'Clarice Vit\u00f3ria Teixeira' , '24/02/1958' , '82996438794' , 'claricevitoriateixeira-97@india.com' , '57052605' ), ( 4847726278 , 'Kamilly Clara Caldeira' , '21/04/1982' , '27998331799' , 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br' , '29194248' ), ( 90123303354 , 'Carolina Cl\u00e1udia Pietra da Rocha' , '14/04/1952' , '63992520221' , 'carolinaclaudiapietradarocha__carolinaclaudiapietradarocha@riguetti.com.br' , '77017297' ), ( 96558670801 , 'Levi Theo Matheus Ramos' , '04/04/1961' , '22988505045' , 'levitheomatheusramos..levitheomatheusramos@cordeiromaquinas.com.br' , '28024123' ), ( 57218723306 , 'Davi M\u00e1rcio Rafael Nogueira' , '25/07/1997' , '69991521228' , 'davimarciorafaelnogueira..davimarciorafaelnogueira@silnave.com.br' , '76964042' )] cur . executemany ( \"INSERT INTO TB_Cliente VALUES (?, ?, ?, ?, ?, ?)\" , lista_registros ) con . commit () Apagar algum dado: cur . execute ( '''DELETE FROM TB_Cliente WHERE CPF = 88190475789''' ) con . commit () Atualizar algum dado: cur . execute ( '''UPDATE TB_Cliente SET Telefone = NULL, Email = NULL WHERE CPF = 39962955106''' ) con . commit () Ver um dado na tabela: cur . execute ( '''SELECT * FROM TB_Cliente''' ) cur . fetchone () # output: (116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130') Ver todos os dados da tabela: cur . execute ( '''SELECT * FROM TB_Cliente''' ) cur . fetchall () # Realizado slice ([:3) no output para apresentar pequenos exemplos # output: [(116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130'), (4847726278, 'Kamilly Clara Caldeira', '21/04/1982', '27998331799', 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br', '29194248'), (7287125803, 'Eduarda Emily Almada', '20/04/1941', '32985692709', 'eduardaemilyalmada_@peopleside.com.br', '36200142')] Fechar conex\u00e3o do banco de dados: con . close () pyodbc Instalar biblioteca: pip install pyodbc Importar biblioteca: import pyodbc Criar conex\u00e3o com o banco de dados: # Com credenciais conn = pyodbc . connect ( 'DRIVER={SQL Server};SERVER=localhost;DATABASE=TB_Cliente;UID=user;PWD=password' ) #Sem credenciais: conn = pyodbc . connect ( 'DRIVER={SQL Server};SERVER=localhost;DATABASE=TB_Cliente' ) Utilit\u00e1rios DB Visualizar bancos de dados: DBeaver: https://dbeaver.io/?r=qal-sqle Beekeeper Studio: https://www.beekeeperstudio.io/ SqlDbx: http://www.sqldbx.com/ Outros Bancos de Dados: MySQL: https://www.mysql.com/ PostgreSQL: https://www.postgresql.org/ MariaDB: https://mariadb.org/ MongoDB: https://www.mongodb.com/ Apache Cassandra: https://cassandra.apache.org/ Redis: https://redis.io/download \"Minificar\" a Query: SQL-Minifier: https://www.webtoolkitonline.com/sql-minifier.html Carregar a tabela: Necess\u00e1rio criar um arquivo \".db\" e renomear dentro do arquivo.py Deixar os arquivos \".json\", \".db\" e \".py\" na mesma pasta Arquivos: [Aula8.zip](Aula%208%20-%20Email,%20DBs%20e%20OO%201f458ef924dd473a952375a676f36154/Aula9.zip) Orienta\u00e7\u00e3o \u00e0 Objeto Criar uma classe: class Cachorro : Criar vari\u00e1veis e a\u00e7\u00f5es da Classe ao cham\u00e1-la: def __init__ ( self , nome , idade , raca = 'Vira-Lata' ): self . _nome = nome . title () self . _idade = int ( idade ) self . _raca = raca . title () Criar vari\u00e1veis \u201cprivadas\u201d da Classe: Usar par\u00eanteses; python self._nome = nome.title() Inserir m\u00e9todo de atualiza\u00e7\u00e3o do nome: def atualiza_nome ( self , novo_nome ): self . _nome = novo_nome Inserir m\u00e9todo de atualiza\u00e7\u00e3o da idade: def atualiza_idade ( self , nova_idade ): self . _idade = nova_idade Inserir m\u00e9todo de atualiza\u00e7\u00e3o da ra\u00e7a: def atualiza_raca ( self , nova_raca ): self . _raca = nova_raca Inserir m\u00e9todo que imprime as descri\u00e7\u00f5es do cachorro: def informacoes ( self ): print ( f 'O cachorro da ra\u00e7a { self . _raca } se chama { self . _nome } e possui { self . _idade } anos.' ) Inserir m\u00e9todo que faz o cachorro sentar: def sentar ( self ): print ( f 'O cachorro { self . _nome } est\u00e1 sentado agora!' ) Inserir m\u00e9todo que faz o cachorro rolar: def rolar ( self ): print ( f 'O cachorro { self . _nome } est\u00e1 rolando agora!' ) Inserir m\u00e9todo que faz o cachorro deita: def deitar ( self ): print ( f 'O cachorro { self . _nome } est\u00e1 deitado agora!' ) Importar uma Classe (vale destacar que para isso, voc\u00ea precisa estar no diret\u00f3rio em que foi criado o arquivo da classe): from classe_cachorro import Cachorro Criar um objeto na Classe: obj = Cachorro ( 'Rex' , 3 , 'Shih Tzu' ) Acessar funcionalidades da classe com o objeto criado: obj . informacoes () # output: O cachorro da ra\u00e7a Shih Tzu se chama Rex e possui 3 anos. Atualizar ra\u00e7a do cachorro contido no objeto: obj . atualiza_raca ( 'Terrier' )","title":"Aula 8 - Email, DBs e OO"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#aula-8-email-dbs-e-oo","text":"","title":"Aula 8 - Email, DBs e OO"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#smtplib","text":"Liberar Acesso ao SMTP do Gmail: https://myaccount.google.com/lesssecureapps Tela de ativa\u00e7\u00e3o: ![acesso_menos_seguro.png](../img/acesso_menos_seguro.png) Protocolos SMTP: Gmail: https://support.google.com/a/answer/176600?hl=pt#zippy=%2Cusar-o-servidor-smtp-do-gmail Link alternativo: https://support.google.com/mail/answer/7126229?hl=pt-BR Outlook: https://support.microsoft.com/pt-br/office/configura\u00e7\u00f5es-pop-imap-e-smtp-para-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040 Importar as bibliotecas: import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from email.mime.application import MIMEApplication Instanciar o email: mail = MIMEMultipart () Criar o corpo do e-mail: payload = \"\"\"Ol\u00e1! Tudo bem? Este \u00e9 um e-mail autom\u00e1tico para testar o disparo de e-mail ensinado pelo curso de RPA Python! Atenciosamente, RPA Pythonico \"\"\" Configurar o e-mail que est\u00e1 enviando: mail [ 'From' ] = 'rpapythonico@gmail.com' Configurar o(s) destinat\u00e1rio(s) do e-mail # UM destinat\u00e1rio mail [ 'To' ] = 'rpapythonico@gmail.com' # MAIS DE UM destinat\u00e1rio mail [ 'To' ] = 'rpapythonico@gmail.com,seu_email@provedor.com' Configurar o assunto do e-mail: mail [ 'Subject' ] = 'Email Autom\u00e1tico - SMTPLIB' Formatar o corpo do e-mail em formato de texto: mail . attach ( MIMEText ( payload , 'plain' )) Criar conex\u00e3o SMTP: server = smtplib . SMTP ( 'smtp.gmail.com' , '587' ) server . starttls () Se autenticar no servidor SMTP: server . login ( msg [ 'From' ], 'sua_senha' ) Enviar e-mail: SEM Anexo # UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ], mail . as_string ()) # MAIS DE UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ] . split ( \",\" ), mail . as_string ()) COM Anexo file = open ( 'seu_arquivo.py' , 'rb' ) app = MIMEApplication ( file . read (), 'py' ) app . add_header ( 'Content-Disposition' , 'attachment;filename=seu_arquivo.py' ) mail . attach ( app ) # UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ], mail . as_string ()) # MAIS DE UM destinat\u00e1rio server . sendmail ( mail [ 'From' ], mail [ 'To' ] . split ( \",\" ), mail . as_string ()) Finalizar conex\u00e3o SMTP: server . quit ()","title":"smtplib"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#ferramentas-db","text":"MS SQL: Download SQL Server: https://www.microsoft.com/pt-br/sql-server/sql-server-downloads Selecionar a edi\u00e7\u00e3o \"Desenvolvedor\"/\"Developer\". Link direto: https://go.microsoft.com/fwlink/?linkid=866662 SQL Management Studio: P\u00e1gina de download: https://docs.microsoft.com/pt-br/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15 Link direto: https://aka.ms/ssmsfullsetup Biblioteca pyodbc: Documenta\u00e7\u00e3o pyodbc: https://github.com/mkleehammer/pyodbc/wiki Reposit\u00f3rio pyodbc: https://github.com/mkleehammer/pyodbc/ SQLite: Programas pra usar o SQLite: SQLite Browser: https://sqlitebrowser.org/dl/ SQLite Studio: https://sqlitestudio.pl/ Programa para ler um arquivo \".db\" do SQLite: SQLite Viewer Online: https://inloop.github.io/sqlite-viewer/ Site SQLite: https://www.sqlite.org/index.html Documenta\u00e7\u00e3o sqlite3: https://docs.python.org/3/library/sqlite3.html https://www.sqlitetutorial.net/","title":"Ferramentas DB"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#sqlite3","text":"Importar biblioteca: import sqlite3 Criar conex\u00e3o: con = sqlite3 . connect ( 'example.db' ) Criar cursor: cur = con . cursor () Criar uma tabela: cur . execute ( '''CREATE TABLE \"TB_Cliente\"( \"CPF\" INTEGER NOT NULL UNIQUE, \"Nome_Completo\" TEXT NOT NULL, \"Data_Nascimento\" TEXT NOT NULL, \"Telefone\" TEXT, \"Email\" TEXT, \"CEP\" TEXT NOT NULL, PRIMARY KEY(\"CPF\"));''' ) Aprovar as intera\u00e7\u00f5es com o banco de dados: con . commit () Inserir algum dado: cur . execute ( '''INSERT INTO TB_Cliente VALUES (20955758572, 'Laura Luana Assis', '13/06/1948', '68991361938', 'lauraluanaassis-91@naressi.com.br', '69911355')''' ) con . commit () Inserir v\u00e1rios registros no banco: lista_registros = [( 88190475789 , 'Jos\u00e9 Hugo Manuel Porto' , '11/07/1997' , '41989320821' , 'jjosehugomanuelporto@patriciagrillo.adv.br' , '83309270' ), ( 39962955106 , 'Marina Carolina dos Santos' , '26/09/1995' , '81984235792' , 'marinacarolinadossantos_@lukin4.com.br' , '53350130' ), ( 20955758572 , 'Laura Luana Assis' , '13/06/1948' , '68991361938' , 'lauraluanaassis-91@naressi.com.br' , '69911355' ), ( 76938977550 , 'Yasmin Evelyn Maria Costa' , '20/04/1959' , '91998657654' , 'yasminevelynmariacosta-88@yahoo.com.ar' , '66810020' ), ( 25373027375 , 'Fernando Giovanni Bernardes' , '02/03/1964' , '81989889726' , 'fernandogiovannibernardes-92@soulcomunicacao.com.br' , '51180440' ), ( 85775491947 , 'Clarice Vit\u00f3ria Teixeira' , '24/02/1958' , '82996438794' , 'claricevitoriateixeira-97@india.com' , '57052605' ), ( 4847726278 , 'Kamilly Clara Caldeira' , '21/04/1982' , '27998331799' , 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br' , '29194248' ), ( 90123303354 , 'Carolina Cl\u00e1udia Pietra da Rocha' , '14/04/1952' , '63992520221' , 'carolinaclaudiapietradarocha__carolinaclaudiapietradarocha@riguetti.com.br' , '77017297' ), ( 96558670801 , 'Levi Theo Matheus Ramos' , '04/04/1961' , '22988505045' , 'levitheomatheusramos..levitheomatheusramos@cordeiromaquinas.com.br' , '28024123' ), ( 57218723306 , 'Davi M\u00e1rcio Rafael Nogueira' , '25/07/1997' , '69991521228' , 'davimarciorafaelnogueira..davimarciorafaelnogueira@silnave.com.br' , '76964042' )] cur . executemany ( \"INSERT INTO TB_Cliente VALUES (?, ?, ?, ?, ?, ?)\" , lista_registros ) con . commit () Apagar algum dado: cur . execute ( '''DELETE FROM TB_Cliente WHERE CPF = 88190475789''' ) con . commit () Atualizar algum dado: cur . execute ( '''UPDATE TB_Cliente SET Telefone = NULL, Email = NULL WHERE CPF = 39962955106''' ) con . commit () Ver um dado na tabela: cur . execute ( '''SELECT * FROM TB_Cliente''' ) cur . fetchone () # output: (116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130') Ver todos os dados da tabela: cur . execute ( '''SELECT * FROM TB_Cliente''' ) cur . fetchall () # Realizado slice ([:3) no output para apresentar pequenos exemplos # output: [(116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130'), (4847726278, 'Kamilly Clara Caldeira', '21/04/1982', '27998331799', 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br', '29194248'), (7287125803, 'Eduarda Emily Almada', '20/04/1941', '32985692709', 'eduardaemilyalmada_@peopleside.com.br', '36200142')] Fechar conex\u00e3o do banco de dados: con . close ()","title":"sqlite3"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#pyodbc","text":"Instalar biblioteca: pip install pyodbc Importar biblioteca: import pyodbc Criar conex\u00e3o com o banco de dados: # Com credenciais conn = pyodbc . connect ( 'DRIVER={SQL Server};SERVER=localhost;DATABASE=TB_Cliente;UID=user;PWD=password' ) #Sem credenciais: conn = pyodbc . connect ( 'DRIVER={SQL Server};SERVER=localhost;DATABASE=TB_Cliente' )","title":"pyodbc"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#utilitarios-db","text":"Visualizar bancos de dados: DBeaver: https://dbeaver.io/?r=qal-sqle Beekeeper Studio: https://www.beekeeperstudio.io/ SqlDbx: http://www.sqldbx.com/ Outros Bancos de Dados: MySQL: https://www.mysql.com/ PostgreSQL: https://www.postgresql.org/ MariaDB: https://mariadb.org/ MongoDB: https://www.mongodb.com/ Apache Cassandra: https://cassandra.apache.org/ Redis: https://redis.io/download \"Minificar\" a Query: SQL-Minifier: https://www.webtoolkitonline.com/sql-minifier.html Carregar a tabela: Necess\u00e1rio criar um arquivo \".db\" e renomear dentro do arquivo.py Deixar os arquivos \".json\", \".db\" e \".py\" na mesma pasta Arquivos: [Aula8.zip](Aula%208%20-%20Email,%20DBs%20e%20OO%201f458ef924dd473a952375a676f36154/Aula9.zip)","title":"Utilit\u00e1rios DB"},{"location":"S01/Aula%208%20-%20Email%2C%20DBs%20e%20OO/#orientacao-a-objeto","text":"Criar uma classe: class Cachorro : Criar vari\u00e1veis e a\u00e7\u00f5es da Classe ao cham\u00e1-la: def __init__ ( self , nome , idade , raca = 'Vira-Lata' ): self . _nome = nome . title () self . _idade = int ( idade ) self . _raca = raca . title () Criar vari\u00e1veis \u201cprivadas\u201d da Classe: Usar par\u00eanteses; python self._nome = nome.title() Inserir m\u00e9todo de atualiza\u00e7\u00e3o do nome: def atualiza_nome ( self , novo_nome ): self . _nome = novo_nome Inserir m\u00e9todo de atualiza\u00e7\u00e3o da idade: def atualiza_idade ( self , nova_idade ): self . _idade = nova_idade Inserir m\u00e9todo de atualiza\u00e7\u00e3o da ra\u00e7a: def atualiza_raca ( self , nova_raca ): self . _raca = nova_raca Inserir m\u00e9todo que imprime as descri\u00e7\u00f5es do cachorro: def informacoes ( self ): print ( f 'O cachorro da ra\u00e7a { self . _raca } se chama { self . _nome } e possui { self . _idade } anos.' ) Inserir m\u00e9todo que faz o cachorro sentar: def sentar ( self ): print ( f 'O cachorro { self . _nome } est\u00e1 sentado agora!' ) Inserir m\u00e9todo que faz o cachorro rolar: def rolar ( self ): print ( f 'O cachorro { self . _nome } est\u00e1 rolando agora!' ) Inserir m\u00e9todo que faz o cachorro deita: def deitar ( self ): print ( f 'O cachorro { self . _nome } est\u00e1 deitado agora!' ) Importar uma Classe (vale destacar que para isso, voc\u00ea precisa estar no diret\u00f3rio em que foi criado o arquivo da classe): from classe_cachorro import Cachorro Criar um objeto na Classe: obj = Cachorro ( 'Rex' , 3 , 'Shih Tzu' ) Acessar funcionalidades da classe com o objeto criado: obj . informacoes () # output: O cachorro da ra\u00e7a Shih Tzu se chama Rex e possui 3 anos. Atualizar ra\u00e7a do cachorro contido no objeto: obj . atualiza_raca ( 'Terrier' )","title":"Orienta\u00e7\u00e3o \u00e0 Objeto"},{"location":"S02/Aula%200%20-%20Instala%C3%A7%C3%A3o%20Python/","text":"Instala\u00e7\u00e3o do Python Baixando o execut\u00e1vel no portal python.org Come\u00e7ando a instala\u00e7\u00e3o do Python O campo \"Install launcher for all users\" s\u00f3 deve ficar assinalado se o equipamento estiver em conta administrador, caso contr\u00e1rio, o instalador ir\u00e1 gerar um erro; Para que o Python seja instalado e facilite usar comandos direto em pastas e no CMD/Shell, \u00e9 importante que esse campo esteja assinalado; Ap\u00f3s as devidas marca\u00e7\u00f5es e desmarca\u00e7\u00f5es, basta clicar em \"Install Now\". Aguardando a instala\u00e7\u00e3o concluir Finalizando a instala\u00e7\u00e3o Se estiver em conta administrador, clicar em \"Disable path length limit\" permite com que o Windows ajuste a vari\u00e1vel de ambiente \"MAX_PATH\" para permitir mais que 260 caracteres em caminhos de diret\u00f3rios/arquivos durante o uso no Python; Basta finalizar a instala\u00e7\u00e3o clicando em \"Close\".","title":"Aula 0 - Instala\u00e7\u00e3o Python"},{"location":"S02/Aula%200%20-%20Instala%C3%A7%C3%A3o%20Python/#instalacao-do-python","text":"","title":"Instala\u00e7\u00e3o do Python"},{"location":"S02/Aula%200%20-%20Instala%C3%A7%C3%A3o%20Python/#baixando-o-executavel-no-portal-pythonorg","text":"","title":"Baixando o execut\u00e1vel no portal python.org"},{"location":"S02/Aula%200%20-%20Instala%C3%A7%C3%A3o%20Python/#comecando-a-instalacao-do-python","text":"O campo \"Install launcher for all users\" s\u00f3 deve ficar assinalado se o equipamento estiver em conta administrador, caso contr\u00e1rio, o instalador ir\u00e1 gerar um erro; Para que o Python seja instalado e facilite usar comandos direto em pastas e no CMD/Shell, \u00e9 importante que esse campo esteja assinalado; Ap\u00f3s as devidas marca\u00e7\u00f5es e desmarca\u00e7\u00f5es, basta clicar em \"Install Now\".","title":"Come\u00e7ando a instala\u00e7\u00e3o do Python"},{"location":"S02/Aula%200%20-%20Instala%C3%A7%C3%A3o%20Python/#aguardando-a-instalacao-concluir","text":"","title":"Aguardando a instala\u00e7\u00e3o concluir"},{"location":"S02/Aula%200%20-%20Instala%C3%A7%C3%A3o%20Python/#finalizando-a-instalacao","text":"Se estiver em conta administrador, clicar em \"Disable path length limit\" permite com que o Windows ajuste a vari\u00e1vel de ambiente \"MAX_PATH\" para permitir mais que 260 caracteres em caminhos de diret\u00f3rios/arquivos durante o uso no Python; Basta finalizar a instala\u00e7\u00e3o clicando em \"Close\".","title":"Finalizando a instala\u00e7\u00e3o"},{"location":"S02/Aula%201%20-%20Distribui%C3%A7%C3%B5es/","text":"Distribui\u00e7\u00f5es do Python Explica\u00e7\u00e3o O Python cont\u00e9m algumas distribui\u00e7\u00f5es geradas pela comunidade e todas elas possuem um objetivo em particular. Elas trazem algumas funcionalidades j\u00e1 embarcadas, que na vers\u00e3o oficial precisariam ser instaladas manualmente caso houvesse necessidade. N\u00edvel Iniciante/Intermedi\u00e1rio As distribui\u00e7\u00f5es de n\u00edvel iniciante/intermedi\u00e1rio tem como objetivo trazer o Python na sua ess\u00eancia inicial, com suas funcionalidades b\u00e1sicas. Python Portable Python N\u00edvel Avan\u00e7ado As distribui\u00e7\u00f5es de n\u00edvel avan\u00e7ado, possuem interfaces gr\u00e1ficas e/ou bibliotecas embarcadas que fazem uso de funcionalidades (geralmente) voltadas \u00e0 Ci\u00eancia dos Dados. Anaconda Python(x,y) IPython Refer\u00eancias Bibliogr\u00e1ficas Python Distributions","title":"Aula 1 - Distribui\u00e7\u00f5es"},{"location":"S02/Aula%201%20-%20Distribui%C3%A7%C3%B5es/#distribuicoes-do-python","text":"","title":"Distribui\u00e7\u00f5es do Python"},{"location":"S02/Aula%201%20-%20Distribui%C3%A7%C3%B5es/#explicacao","text":"O Python cont\u00e9m algumas distribui\u00e7\u00f5es geradas pela comunidade e todas elas possuem um objetivo em particular. Elas trazem algumas funcionalidades j\u00e1 embarcadas, que na vers\u00e3o oficial precisariam ser instaladas manualmente caso houvesse necessidade.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%201%20-%20Distribui%C3%A7%C3%B5es/#nivel-inicianteintermediario","text":"As distribui\u00e7\u00f5es de n\u00edvel iniciante/intermedi\u00e1rio tem como objetivo trazer o Python na sua ess\u00eancia inicial, com suas funcionalidades b\u00e1sicas. Python Portable Python","title":"N\u00edvel Iniciante/Intermedi\u00e1rio"},{"location":"S02/Aula%201%20-%20Distribui%C3%A7%C3%B5es/#nivel-avancado","text":"As distribui\u00e7\u00f5es de n\u00edvel avan\u00e7ado, possuem interfaces gr\u00e1ficas e/ou bibliotecas embarcadas que fazem uso de funcionalidades (geralmente) voltadas \u00e0 Ci\u00eancia dos Dados. Anaconda Python(x,y) IPython","title":"N\u00edvel Avan\u00e7ado"},{"location":"S02/Aula%201%20-%20Distribui%C3%A7%C3%B5es/#referencias-bibliograficas","text":"Python Distributions","title":"Refer\u00eancias Bibliogr\u00e1ficas"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/","text":"Tratativas de Erros Tipos de Erros Vari\u00e1vel \"nome\" n\u00e3o declarada: print ( nome ) Soma entre \"string\" e \"integer\" : '2' + 2 Barra invertida como operador aritm\u00e9tico: 10 \\ 0 Divis\u00e3o de um valor por zero: 10 / 0 Explica\u00e7\u00e3o Para que um c\u00f3digo n\u00e3o \"quebre\" e acabe parando uma automa\u00e7\u00e3o ou um script, \u00e9 necess\u00e1rio fazer uma tratativa de erro. Para isso, o Python possui quatro palavras reservadas: try , except , else e finally . try: Bloco que executar\u00e1 o c\u00f3digo principal . except: Bloco que criar\u00e1 um caminho alternativo \u00e0 tentativa realizada anteriormente em caso de falha ; Pode ser especificada ( conforme documenta\u00e7\u00e3o ) ou de forma gen\u00e9rica. else: Bloco que efetuar\u00e1 a continua\u00e7\u00e3o do c\u00f3digo escrito dentro do try em caso de sucesso. finally: Bloco que executar\u00e1 c\u00f3digo independente do SUCESSO ou FALHA Exemplo def divisao ( x , y ): try : result = x / y except ZeroDivisionError : print ( 'Erro de Divis\u00e3o por Zero!' ) except : print ( 'Erro n\u00e3o mapeado! E AGORA???' ) else : print ( f 'O resultado da divis\u00e3o entre { x } e { y } \u00e9 { result } ' ) finally : print ( 'Independente do que acontecer, sempre estarei aqui!' ) Personalizando Um Erro Explica\u00e7\u00e3o O Python possui diversos erros j\u00e1 mapeados com textos prontos, por\u00e9m \u00e9 importante frisar que \u00e9 poss\u00edvel personalizar a mensagem deles. Para isso, a linguagem conta com a palavra reservada raise . Exemplo idade = 17 if idade < 18 : raise SystemError ( 'Acesso proibido!' ) else : print ( 'Acesso permitido!' )","title":"Aula 10 - Tratativas de Erros"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#tratativas-de-erros","text":"","title":"Tratativas de Erros"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#tipos-de-erros","text":"Vari\u00e1vel \"nome\" n\u00e3o declarada: print ( nome ) Soma entre \"string\" e \"integer\" : '2' + 2 Barra invertida como operador aritm\u00e9tico: 10 \\ 0 Divis\u00e3o de um valor por zero: 10 / 0","title":"Tipos de Erros"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#explicacao","text":"Para que um c\u00f3digo n\u00e3o \"quebre\" e acabe parando uma automa\u00e7\u00e3o ou um script, \u00e9 necess\u00e1rio fazer uma tratativa de erro. Para isso, o Python possui quatro palavras reservadas: try , except , else e finally . try: Bloco que executar\u00e1 o c\u00f3digo principal . except: Bloco que criar\u00e1 um caminho alternativo \u00e0 tentativa realizada anteriormente em caso de falha ; Pode ser especificada ( conforme documenta\u00e7\u00e3o ) ou de forma gen\u00e9rica. else: Bloco que efetuar\u00e1 a continua\u00e7\u00e3o do c\u00f3digo escrito dentro do try em caso de sucesso. finally: Bloco que executar\u00e1 c\u00f3digo independente do SUCESSO ou FALHA","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#exemplo","text":"def divisao ( x , y ): try : result = x / y except ZeroDivisionError : print ( 'Erro de Divis\u00e3o por Zero!' ) except : print ( 'Erro n\u00e3o mapeado! E AGORA???' ) else : print ( f 'O resultado da divis\u00e3o entre { x } e { y } \u00e9 { result } ' ) finally : print ( 'Independente do que acontecer, sempre estarei aqui!' )","title":"Exemplo"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#personalizando-um-erro","text":"","title":"Personalizando Um Erro"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#explicacao_1","text":"O Python possui diversos erros j\u00e1 mapeados com textos prontos, por\u00e9m \u00e9 importante frisar que \u00e9 poss\u00edvel personalizar a mensagem deles. Para isso, a linguagem conta com a palavra reservada raise .","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2010%20-%20Tratativas%20de%20Erros/#exemplo_1","text":"idade = 17 if idade < 18 : raise SystemError ( 'Acesso proibido!' ) else : print ( 'Acesso permitido!' )","title":"Exemplo"},{"location":"S02/Aula%2011%20-%20Instala%C3%A7%C3%A3o%20e%20Importa%C3%A7%C3%A3o%20de%20Bibliotecas/","text":"Pacotes Explica\u00e7\u00e3o - Pacotes O Python \u00e9 carregado de funcionalidades que j\u00e1 permitem criar alguns scripts, mas em determinado momento, faz-se necess\u00e1rio obter algumas fun\u00e7\u00f5es extras (muitas vezes criadas pela pr\u00f3pria comunidade). Para isso, ser\u00e1 utilizado o pip . O mesmo \u00e9 um gerenciador de pacotes, que permite instalar, atualizar e remover pacotes. Todas as bibliotecas instal\u00e1veis est\u00e3o dispon\u00edveis no portal PyPI . Obs.\u00b9: O pip j\u00e1 vem embarcado com o Python durante a instala\u00e7\u00e3o no equipamento (exceto para usu\u00e1rios do Sistema Operacional Linux). Obs.\u00b2: Todas as bibliotecas s\u00e3o devidamente baixadas diretamente no diret\u00f3rio em que foi instalado o Python. Exemplos - pip Todos os comandos a seguir dever\u00e3o ser realizados via Terminal/CMD/Bash/Shell. Para instalar uma biblioteca: pip install xlrd Para desinstalar uma biblioteca: pip uninstall xlrd Exportar todos os pacotes instalados: pip freeze > requirements.txt Importar todos os pacotes anteriormente extra\u00eddos: pip install -r requirements.txt Exemplos - import Todos os comandos a seguir dever\u00e3o ser realizados na IDE em que ser\u00e1 escrito o c\u00f3digo. Importar a biblioteca com todas as fun\u00e7\u00f5es: import xlrd Importar a biblioteca com \"apelido\": import pandas as pd Importar uma fun\u00e7\u00e3o espec\u00edfica de dentro da biblioteca: from time import sleep","title":"Aula 11 - Instala\u00e7\u00e3o e Importa\u00e7\u00e3o de Bibliotecas"},{"location":"S02/Aula%2011%20-%20Instala%C3%A7%C3%A3o%20e%20Importa%C3%A7%C3%A3o%20de%20Bibliotecas/#pacotes","text":"","title":"Pacotes"},{"location":"S02/Aula%2011%20-%20Instala%C3%A7%C3%A3o%20e%20Importa%C3%A7%C3%A3o%20de%20Bibliotecas/#explicacao-pacotes","text":"O Python \u00e9 carregado de funcionalidades que j\u00e1 permitem criar alguns scripts, mas em determinado momento, faz-se necess\u00e1rio obter algumas fun\u00e7\u00f5es extras (muitas vezes criadas pela pr\u00f3pria comunidade). Para isso, ser\u00e1 utilizado o pip . O mesmo \u00e9 um gerenciador de pacotes, que permite instalar, atualizar e remover pacotes. Todas as bibliotecas instal\u00e1veis est\u00e3o dispon\u00edveis no portal PyPI . Obs.\u00b9: O pip j\u00e1 vem embarcado com o Python durante a instala\u00e7\u00e3o no equipamento (exceto para usu\u00e1rios do Sistema Operacional Linux). Obs.\u00b2: Todas as bibliotecas s\u00e3o devidamente baixadas diretamente no diret\u00f3rio em que foi instalado o Python.","title":"Explica\u00e7\u00e3o - Pacotes"},{"location":"S02/Aula%2011%20-%20Instala%C3%A7%C3%A3o%20e%20Importa%C3%A7%C3%A3o%20de%20Bibliotecas/#exemplos-pip","text":"Todos os comandos a seguir dever\u00e3o ser realizados via Terminal/CMD/Bash/Shell. Para instalar uma biblioteca: pip install xlrd Para desinstalar uma biblioteca: pip uninstall xlrd Exportar todos os pacotes instalados: pip freeze > requirements.txt Importar todos os pacotes anteriormente extra\u00eddos: pip install -r requirements.txt","title":"Exemplos - pip"},{"location":"S02/Aula%2011%20-%20Instala%C3%A7%C3%A3o%20e%20Importa%C3%A7%C3%A3o%20de%20Bibliotecas/#exemplos-import","text":"Todos os comandos a seguir dever\u00e3o ser realizados na IDE em que ser\u00e1 escrito o c\u00f3digo. Importar a biblioteca com todas as fun\u00e7\u00f5es: import xlrd Importar a biblioteca com \"apelido\": import pandas as pd Importar uma fun\u00e7\u00e3o espec\u00edfica de dentro da biblioteca: from time import sleep","title":"Exemplos - import"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/","text":"Sistema Operacional Explica\u00e7\u00e3o Durante o desenvolvimento, \u00e9 necess\u00e1rio percorrer diret\u00f3rios ou realizar a\u00e7\u00f5es direto no sistema operacional onde a execu\u00e7\u00e3o est\u00e1 sendo feita. Com o Python \u00e9 poss\u00edvel ter total acesso ao SO, seja ele Windows, MacOS ou Linux. Biblioteca - OS A biblioteca OS \u00e9 a responsavel por trabalhar com o sistema operacional dentro do Python. Exemplos Importa a Biblioteca import os Aponta a execu\u00e7\u00e3o do Python para uma pasta em especifico os . chdir ( r 'C:\\Users\\user\\Documents\\Code\\Python' ) Localiza a pasta de execu\u00e7\u00e3o do Python os . getcwd () # output: 'C:\\Users\\user\\Documents\\Code\\Python' Lista os arquivos presentes na pasta os . listdir ( r 'C:\\Users\\user\\Documents\\Code\\Python' ) # output: ['arquivo_um.txt', 'arquivo_dois.txt', arquivos_tres.txt] Renomeia um arquivo os . rename ( 'arquivo_teste.txt' , 'arquivo_modificado.txt' ) Remove um arquivo os . remove ( 'arquivo_modificado.txt' ) Biblioteca - glob A biblioteca glob \u00e9 usada para retornar todos os arquivos de um diretorio que foram combinados por um determinado padr\u00e3o. Exemplos Instalando a Biblioteca pip install glob Importanto a Biblioteca import glob Buscando arquivos em um diret\u00f3rio atrav\u00e9s da extens\u00e3o glob . glob ( r 'C:\\Users\\user\\Documents\\Code\\Python\\*.txt' ) # output: ['C:\\Users\\user\\Documents\\Code\\Python\\arquivo_um.txt', 'C:\\Users\\user\\Documents\\Code\\Python\\arquivo_dois.txt', C:\\Users\\user\\Documents\\Code\\Python\\arquivos_tres.txt] Biblioteca - Shutil Biblioteca voltada \u00e0 manipula\u00e7\u00e3o de arquivos e pastas. Exemplos Importando a Biblioteca import shutil Movimenta arquivos entre diret\u00f3rios shutil . move ( r 'arquivo_modificado.txt' , r '.\\pasta_move\\arquivo_modificado.txt' ) Copia arquivo de um diret\u00f3rio para outro shutil . copy ( r 'arquivo_modificado.txt' , r '.\\pasta_move\\arquivo_modificado.txt' )","title":"Aula 12 - Sistema Operacional"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#sistema-operacional","text":"","title":"Sistema Operacional"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#explicacao","text":"Durante o desenvolvimento, \u00e9 necess\u00e1rio percorrer diret\u00f3rios ou realizar a\u00e7\u00f5es direto no sistema operacional onde a execu\u00e7\u00e3o est\u00e1 sendo feita. Com o Python \u00e9 poss\u00edvel ter total acesso ao SO, seja ele Windows, MacOS ou Linux.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#biblioteca-os","text":"A biblioteca OS \u00e9 a responsavel por trabalhar com o sistema operacional dentro do Python.","title":"Biblioteca - OS"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#exemplos","text":"Importa a Biblioteca import os Aponta a execu\u00e7\u00e3o do Python para uma pasta em especifico os . chdir ( r 'C:\\Users\\user\\Documents\\Code\\Python' ) Localiza a pasta de execu\u00e7\u00e3o do Python os . getcwd () # output: 'C:\\Users\\user\\Documents\\Code\\Python' Lista os arquivos presentes na pasta os . listdir ( r 'C:\\Users\\user\\Documents\\Code\\Python' ) # output: ['arquivo_um.txt', 'arquivo_dois.txt', arquivos_tres.txt] Renomeia um arquivo os . rename ( 'arquivo_teste.txt' , 'arquivo_modificado.txt' ) Remove um arquivo os . remove ( 'arquivo_modificado.txt' )","title":"Exemplos"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#biblioteca-glob","text":"A biblioteca glob \u00e9 usada para retornar todos os arquivos de um diretorio que foram combinados por um determinado padr\u00e3o.","title":"Biblioteca - glob"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#exemplos_1","text":"Instalando a Biblioteca pip install glob Importanto a Biblioteca import glob Buscando arquivos em um diret\u00f3rio atrav\u00e9s da extens\u00e3o glob . glob ( r 'C:\\Users\\user\\Documents\\Code\\Python\\*.txt' ) # output: ['C:\\Users\\user\\Documents\\Code\\Python\\arquivo_um.txt', 'C:\\Users\\user\\Documents\\Code\\Python\\arquivo_dois.txt', C:\\Users\\user\\Documents\\Code\\Python\\arquivos_tres.txt]","title":"Exemplos"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#biblioteca-shutil","text":"Biblioteca voltada \u00e0 manipula\u00e7\u00e3o de arquivos e pastas.","title":"Biblioteca - Shutil"},{"location":"S02/Aula%2012%20-%20Sistema%20Operacional/#exemplos_2","text":"Importando a Biblioteca import shutil Movimenta arquivos entre diret\u00f3rios shutil . move ( r 'arquivo_modificado.txt' , r '.\\pasta_move\\arquivo_modificado.txt' ) Copia arquivo de um diret\u00f3rio para outro shutil . copy ( r 'arquivo_modificado.txt' , r '.\\pasta_move\\arquivo_modificado.txt' )","title":"Exemplos"},{"location":"S02/Aula%2013%20-%20Constants/","text":"Constants Explica\u00e7\u00e3o Constantes s\u00e3o variaveis que percorrem todo o codigo tendo o mesmo valor. Para isso, basta criar um arquivo, digitar os valores desejados e em seguida realizar a importa\u00e7\u00e3o dessas informa\u00e7\u00f5es dentro do(s) c\u00f3digo(s) desejado(s). Nomenclatura A regra para essas vari\u00e1veis \u00e9 de SCREAMING_SNAKE_CASE (todas as letras mai\u00fasculas). Ex:. LOGIN_USER = \"username\" LOGIN_PASS = \"password\" Exemplo - Cria\u00e7\u00e3o do arquivo Gera um arquivo com extens\u00e3o \".py\"; Ex.: constants.py Instancia as vari\u00e1veis utilizando letras mai\u00fasculas e atribui os devidos valores. Ex.: LOGIN_USER = \"RPA_PYTHONICO\" LOGIN_PASS = \"SENHA@123\" Exemplo - Importa\u00e7\u00e3o do arquivo Ap\u00f3s criado o arquivo, basta importar o mesmo dentro de qualquer c\u00f3digo em python; import sys # Comando responsavel por adiconar um caminho dentro do codigo. # Assim o python consegue identificar o arquivo e importar o mesmo. sys . path . append ( r 'CAMINHO ONDE ESTA LOCALIZADA NOSSA CONSTANTS' ) import constants as const Com as vari\u00e1veis importadas, basta us\u00e1-las. print ( const . LOGIN_USER ) # output: \"RPA_PYTHONICO\" print ( const . LOGIN_PASS ) # output: \"SENHA@123\"","title":"Aula 13 - Constants"},{"location":"S02/Aula%2013%20-%20Constants/#constants","text":"","title":"Constants"},{"location":"S02/Aula%2013%20-%20Constants/#explicacao","text":"Constantes s\u00e3o variaveis que percorrem todo o codigo tendo o mesmo valor. Para isso, basta criar um arquivo, digitar os valores desejados e em seguida realizar a importa\u00e7\u00e3o dessas informa\u00e7\u00f5es dentro do(s) c\u00f3digo(s) desejado(s).","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2013%20-%20Constants/#nomenclatura","text":"A regra para essas vari\u00e1veis \u00e9 de SCREAMING_SNAKE_CASE (todas as letras mai\u00fasculas). Ex:. LOGIN_USER = \"username\" LOGIN_PASS = \"password\"","title":"Nomenclatura"},{"location":"S02/Aula%2013%20-%20Constants/#exemplo-criacao-do-arquivo","text":"Gera um arquivo com extens\u00e3o \".py\"; Ex.: constants.py Instancia as vari\u00e1veis utilizando letras mai\u00fasculas e atribui os devidos valores. Ex.: LOGIN_USER = \"RPA_PYTHONICO\" LOGIN_PASS = \"SENHA@123\"","title":"Exemplo - Cria\u00e7\u00e3o do arquivo"},{"location":"S02/Aula%2013%20-%20Constants/#exemplo-importacao-do-arquivo","text":"Ap\u00f3s criado o arquivo, basta importar o mesmo dentro de qualquer c\u00f3digo em python; import sys # Comando responsavel por adiconar um caminho dentro do codigo. # Assim o python consegue identificar o arquivo e importar o mesmo. sys . path . append ( r 'CAMINHO ONDE ESTA LOCALIZADA NOSSA CONSTANTS' ) import constants as const Com as vari\u00e1veis importadas, basta us\u00e1-las. print ( const . LOGIN_USER ) # output: \"RPA_PYTHONICO\" print ( const . LOGIN_PASS ) # output: \"SENHA@123\"","title":"Exemplo - Importa\u00e7\u00e3o do arquivo"},{"location":"S02/Aula%2014%20-%20Interagindo%20com%20Arquivos/","text":"Interagindo com Arquivos Explica\u00e7\u00e3o Outra funcionalidade para manipula\u00e7\u00e3o de arquivos \u00e9 o comando Open. Essa fun\u00e7\u00e3o \u00e9 nativa de dentro do python, ou seja, n\u00e3o h\u00e1 necessidade de importa\u00e7\u00e3o. Basicamente sua fun\u00e7\u00e3o \u00e9 abrir (praticamente qualquer) arquivo e conseguir trabalhar com os mesmos. Funcionalidades Abre o arquivo - sintaxe b\u00e1sica: open ( \"nome_do_arquivo.ext\" , \"modo de execu\u00e7\u00e3o\" ) Modos de execu\u00e7\u00e3o: Leitura (.txt, .json, .csv, etc...): arquivo = open ( \"exemplo.txt\" , \"r\" ) conteudo = arquivo . read () Escrita (.txt): arquivo = open ( \"exemplo.txt\" , \"w\" ) arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' ) Acrescentar (.txt): arquivo = open ( \"exemplo.txt\" , \"a\" ) arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' ) Leitura de arquivo em formato bytes (imagens, pdfs, etc...): arquivo = open ( \"python-logo.png\" , \"rb\" ) conteudo = arquivo . read () # b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x01\"\\x00\\x00\\x00R\\x08\\x06\\x00...' Escrita de arquivo em formato bytes (imagens, pdfs, etc...): arquivo = open ( \"captcha.png\" , \"wb\" ) arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' ) Fecha arquivo arquivo . close () Leitura/Escrita do arquivo usando Gerenciador de Contexto with open ( r 'log_2022_04_23.txt' , 'w' ) as arquivo : arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' )","title":"Aula 14 - Interagindo com Arquivos"},{"location":"S02/Aula%2014%20-%20Interagindo%20com%20Arquivos/#interagindo-com-arquivos","text":"","title":"Interagindo com Arquivos"},{"location":"S02/Aula%2014%20-%20Interagindo%20com%20Arquivos/#explicacao","text":"Outra funcionalidade para manipula\u00e7\u00e3o de arquivos \u00e9 o comando Open. Essa fun\u00e7\u00e3o \u00e9 nativa de dentro do python, ou seja, n\u00e3o h\u00e1 necessidade de importa\u00e7\u00e3o. Basicamente sua fun\u00e7\u00e3o \u00e9 abrir (praticamente qualquer) arquivo e conseguir trabalhar com os mesmos.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2014%20-%20Interagindo%20com%20Arquivos/#funcionalidades","text":"Abre o arquivo - sintaxe b\u00e1sica: open ( \"nome_do_arquivo.ext\" , \"modo de execu\u00e7\u00e3o\" ) Modos de execu\u00e7\u00e3o: Leitura (.txt, .json, .csv, etc...): arquivo = open ( \"exemplo.txt\" , \"r\" ) conteudo = arquivo . read () Escrita (.txt): arquivo = open ( \"exemplo.txt\" , \"w\" ) arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' ) Acrescentar (.txt): arquivo = open ( \"exemplo.txt\" , \"a\" ) arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' ) Leitura de arquivo em formato bytes (imagens, pdfs, etc...): arquivo = open ( \"python-logo.png\" , \"rb\" ) conteudo = arquivo . read () # b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x01\"\\x00\\x00\\x00R\\x08\\x06\\x00...' Escrita de arquivo em formato bytes (imagens, pdfs, etc...): arquivo = open ( \"captcha.png\" , \"wb\" ) arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' ) Fecha arquivo arquivo . close () Leitura/Escrita do arquivo usando Gerenciador de Contexto with open ( r 'log_2022_04_23.txt' , 'w' ) as arquivo : arquivo . write ( '2022_04_23_10:00 - Usuario conectado com sucesso \\n ' )","title":"Funcionalidades"},{"location":"S02/Aula%2015%20-%20Openpyxl/","text":"Openpyxl Explica\u00e7\u00e3o A biblioteca Openpyxl \u00e9 uma das v\u00e1rias bibliotecas dispon\u00edveis para trabalhar com Excel dentro do Python e esta, por sua vez, permite realizar a leitura de arquivos tanto no formato \".xlsx\" quanto \".xls\". Comandos Instala\u00e7\u00e3o da Biblioteca pip install openpyxl Importa\u00e7\u00e3o da Biblioteca import openpyxl Leitura do arquivo Excel wb = openpyxl . load_workbook ( 'banca_jornal.xlsx' ) Apresenta\u00e7\u00e3o das abas dispon\u00edveis para acesso wb . sheetnames # output: ['Planilha1'] Sele\u00e7\u00e3o da aba para consulta sheet = wb [ 'Planilha1' ] Sele\u00e7\u00e3o de uma c\u00e9lula espec\u00edfica sheet [ 'A1' ] . value # output: Chiclete sheet [ 'B1' ] . value # output: Barra de Chocolate Apresenta\u00e7\u00e3o da quantidade de linhas escritas sheet . max_row # output: 6 Intera\u00e7\u00e3o com todas as linhas de uma coluna for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) . value print ( nome ) # output: # Chiclete # Barra de Chocolate # Agua Mineral # Jornal # Salgadinho Intera\u00e7\u00e3o com todas as linhas de todas as colunas for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) . value unidade = sheet . cell ( linha , 2 ) . value valor = sheet . cell ( linha , 3 ) . value print ( f \"O produto { nome } teve { unidade } unidade(s) vendida(s) no valor unit\u00e1rio de R$ { valor } \" ) # output: # O produto Chiclete teve 45 unidade(s) vendida(s) no valor unit\u00e1rio de R$1 # O produto Barra de Chocolate teve 23 unidade(s) vendida(s) no valor unit\u00e1rio de R$4 # O produto Agua mineral teve 66 unidade(s) vendida(s) no valor unit\u00e1rio de R$2 # O produto Jornal teve 4 unidade(s) vendida(s) no valor unit\u00e1rio de R$0.5 # O produto Salgadinho teve 16 unidade(s) vendida(s) no valor unit\u00e1rio de R$2.5 Fecha o arquivo Excel wb . close ()","title":"Aula 15 - Openpyxl"},{"location":"S02/Aula%2015%20-%20Openpyxl/#openpyxl","text":"","title":"Openpyxl"},{"location":"S02/Aula%2015%20-%20Openpyxl/#explicacao","text":"A biblioteca Openpyxl \u00e9 uma das v\u00e1rias bibliotecas dispon\u00edveis para trabalhar com Excel dentro do Python e esta, por sua vez, permite realizar a leitura de arquivos tanto no formato \".xlsx\" quanto \".xls\".","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2015%20-%20Openpyxl/#comandos","text":"Instala\u00e7\u00e3o da Biblioteca pip install openpyxl Importa\u00e7\u00e3o da Biblioteca import openpyxl Leitura do arquivo Excel wb = openpyxl . load_workbook ( 'banca_jornal.xlsx' ) Apresenta\u00e7\u00e3o das abas dispon\u00edveis para acesso wb . sheetnames # output: ['Planilha1'] Sele\u00e7\u00e3o da aba para consulta sheet = wb [ 'Planilha1' ] Sele\u00e7\u00e3o de uma c\u00e9lula espec\u00edfica sheet [ 'A1' ] . value # output: Chiclete sheet [ 'B1' ] . value # output: Barra de Chocolate Apresenta\u00e7\u00e3o da quantidade de linhas escritas sheet . max_row # output: 6 Intera\u00e7\u00e3o com todas as linhas de uma coluna for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) . value print ( nome ) # output: # Chiclete # Barra de Chocolate # Agua Mineral # Jornal # Salgadinho Intera\u00e7\u00e3o com todas as linhas de todas as colunas for linha in range ( 2 , sheet . max_row + 1 ): nome = sheet . cell ( linha , 1 ) . value unidade = sheet . cell ( linha , 2 ) . value valor = sheet . cell ( linha , 3 ) . value print ( f \"O produto { nome } teve { unidade } unidade(s) vendida(s) no valor unit\u00e1rio de R$ { valor } \" ) # output: # O produto Chiclete teve 45 unidade(s) vendida(s) no valor unit\u00e1rio de R$1 # O produto Barra de Chocolate teve 23 unidade(s) vendida(s) no valor unit\u00e1rio de R$4 # O produto Agua mineral teve 66 unidade(s) vendida(s) no valor unit\u00e1rio de R$2 # O produto Jornal teve 4 unidade(s) vendida(s) no valor unit\u00e1rio de R$0.5 # O produto Salgadinho teve 16 unidade(s) vendida(s) no valor unit\u00e1rio de R$2.5 Fecha o arquivo Excel wb . close ()","title":"Comandos"},{"location":"S02/Aula%2016%20-%20Xlsxwriter/","text":"Xlsxwriter Explica\u00e7\u00e3o O Python tamb\u00e9m permite criar excel do zero, que \u00e9 o caso da \"lib\" xlsxwriter, que \u00e9 geralmente utilizada para a cria\u00e7\u00e3o de relat\u00f3rios. Conforme o nome da biblioteca diz, ela apenas serve para escrever excel, n\u00e3o sendo poss\u00edvel realizar a leitura. Isto \u00e9, ela ir\u00e1 sobrescrever informa\u00e7\u00f5es se j\u00e1 tiver algum dado no arquivo. Comandos Instala\u00e7\u00e3o da biblioteca pip install XlsxWriter Importa\u00e7\u00e3o da biblioteca from xlsxwriter import Workbook Cria\u00e7\u00e3o e abertura do arquivo Excel wb = Workbook ( 'livros.xlsx' ) Cria\u00e7\u00e3o de aba no Excel planilha = wb . add_worksheet ( 'Livros' ) Cria\u00e7\u00e3o do cabe\u00e7alho com letras em negrito bold = wb . add_format ({ 'bold' : 1 }) planilha . write ( 'A1' , 'Nome' , bold ) planilha . write ( 'B1' , 'Autor' , bold ) planilha . write ( 'C1' , 'Data Lan\u00e7amento' , bold ) planilha . write ( 'D1' , 'Pais de Origem' , bold ) planilha . write ( 'E1' , 'Genero' , bold ) Cria\u00e7\u00e3o de lista contendo tuplas com os dados a serem cadastrados livros = [( 'Harry Potter e a Pedra Filosofal ' , 'J. K. Rowling' , '26/07/1997' , 'Inglaterra' , 'Aventura/Fantasia' ), ( 'Jogos Vorazes' , 'Suzanne Collins' , '14/09/2008' , 'Estados Unidos' , 'Aventura' ), ( 'Percy Jackson o Ladrao de Raios' , 'Rick Riordan' , '28/07/2005' , 'Estados Unidos' , 'Mitologia grega' ), ( 'O Nevoeiro' , 'Stephen King' , '01/01/1980' , 'Estados Unidos' , 'Terror Psicologico' ), ( 'Contos de Grimm' , 'Jacob Grimm / Wilhelm Grimm' , '20/12/1812' , 'Alemanha' , 'Contos de fadas' )] Escrita dos dados no arquivo Excel row = 1 col = 0 for livro in livros : planilha . write_string ( row , col , livro [ 0 ]) planilha . write_string ( row , col + 1 , livro [ 1 ]) planilha . write_string ( row , col + 2 , livro [ 2 ]) planilha . write_string ( row , col + 3 , livro [ 3 ]) planilha . write_string ( row , col + 4 , livro [ 4 ]) row += 1 Salvando e fechando o arquivo Excel wb . close ()","title":"Aula 16 - Xlsxwriter"},{"location":"S02/Aula%2016%20-%20Xlsxwriter/#xlsxwriter","text":"","title":"Xlsxwriter"},{"location":"S02/Aula%2016%20-%20Xlsxwriter/#explicacao","text":"O Python tamb\u00e9m permite criar excel do zero, que \u00e9 o caso da \"lib\" xlsxwriter, que \u00e9 geralmente utilizada para a cria\u00e7\u00e3o de relat\u00f3rios. Conforme o nome da biblioteca diz, ela apenas serve para escrever excel, n\u00e3o sendo poss\u00edvel realizar a leitura. Isto \u00e9, ela ir\u00e1 sobrescrever informa\u00e7\u00f5es se j\u00e1 tiver algum dado no arquivo.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2016%20-%20Xlsxwriter/#comandos","text":"Instala\u00e7\u00e3o da biblioteca pip install XlsxWriter Importa\u00e7\u00e3o da biblioteca from xlsxwriter import Workbook Cria\u00e7\u00e3o e abertura do arquivo Excel wb = Workbook ( 'livros.xlsx' ) Cria\u00e7\u00e3o de aba no Excel planilha = wb . add_worksheet ( 'Livros' ) Cria\u00e7\u00e3o do cabe\u00e7alho com letras em negrito bold = wb . add_format ({ 'bold' : 1 }) planilha . write ( 'A1' , 'Nome' , bold ) planilha . write ( 'B1' , 'Autor' , bold ) planilha . write ( 'C1' , 'Data Lan\u00e7amento' , bold ) planilha . write ( 'D1' , 'Pais de Origem' , bold ) planilha . write ( 'E1' , 'Genero' , bold ) Cria\u00e7\u00e3o de lista contendo tuplas com os dados a serem cadastrados livros = [( 'Harry Potter e a Pedra Filosofal ' , 'J. K. Rowling' , '26/07/1997' , 'Inglaterra' , 'Aventura/Fantasia' ), ( 'Jogos Vorazes' , 'Suzanne Collins' , '14/09/2008' , 'Estados Unidos' , 'Aventura' ), ( 'Percy Jackson o Ladrao de Raios' , 'Rick Riordan' , '28/07/2005' , 'Estados Unidos' , 'Mitologia grega' ), ( 'O Nevoeiro' , 'Stephen King' , '01/01/1980' , 'Estados Unidos' , 'Terror Psicologico' ), ( 'Contos de Grimm' , 'Jacob Grimm / Wilhelm Grimm' , '20/12/1812' , 'Alemanha' , 'Contos de fadas' )] Escrita dos dados no arquivo Excel row = 1 col = 0 for livro in livros : planilha . write_string ( row , col , livro [ 0 ]) planilha . write_string ( row , col + 1 , livro [ 1 ]) planilha . write_string ( row , col + 2 , livro [ 2 ]) planilha . write_string ( row , col + 3 , livro [ 3 ]) planilha . write_string ( row , col + 4 , livro [ 4 ]) row += 1 Salvando e fechando o arquivo Excel wb . close ()","title":"Comandos"},{"location":"S02/Aula%2017%20-%20Pandas/","text":"Pandas Explica\u00e7\u00e3o Pandas \u00e9 uma biblioteca do Python que permite extrair dados de diversos arquivos, como Excel, Json, HTML, SQL, etc... A mesma possui funcionalidades voltadas para an\u00e1lises de dados e ferramentas de manipula\u00e7\u00e3o de tabelas. Gloss\u00e1rio DataFrame Estrutura para dados que \u00e9 composta de duas dimens\u00f5es, estas sendo linhas e colunas. Assemelha-se \u00e0 uma tabela de Excel. Series Estrutura de dados de uma dimens\u00e3o, sendo basicamente composta dos valores de uma linha ou coluna que representa apenas uma fatia do DataFrame. Comandos Instalando a biblioteca pip install pandas Importando a biblioteca import pandas as pd Lendo um arquivo Excel df = pd . read_excel ( \"tabela_clientes.xlsx\" ) Resumo das dimens\u00f5es do DataFrame df . shape Ver nome das colunas df . columns Ver os primeiros resultados Como padr\u00e3o a quantidades de linhas \u00e0 ser trazido s\u00e3o cinco, por\u00e9m esse valor pode ser alterado se preenchido os par\u00eanteses de acordo com o desejado. df . head () # ou df . head ( 20 ) Ver os \u00faltimos resultados df . tail () Selecionar uma coluna espec\u00edfica - pelo nome O segundo m\u00e9todo apresentado no exemplo somente \u00e9 permitido de usar em nomes de colunas sem espa\u00e7o entre palavras. df [ \"Nome_Completo\" ] # ou df . Nome_Completo Selecionar o primeiro valor de uma coluna espec\u00edfica df [ \"Nome_Completo\" ] . values [ 0 ] Selecionar uma linha atrav\u00e9s do index df . iloc [ 0 ] Selecionar uma linha e uma coluna atrav\u00e9s do index df . iloc [ 0 , 0 ] Criando um DataFrame data = { \"Nome\" : [ \"Harry\" , \"Hermione\" , \"Rony\" , \"Luna\" , \"Neville\" ], \"Herbologia\" : [ 8 , 5 , 6 , 9 , 7 ], \"Alquimia\" : [ 7 , 9 , 5 , 4 , 7 ], \"Adivinhacao\" : [ 7 , 4 , 7 , 6 , 8 ] } df_hp = pd . DataFrame ( data ) Estat\u00edsticas descritivas das colunas - media, desvio padr\u00e3o, m\u00ednimo, m\u00e1ximo, etc ... df . describe () Extraindo o DataFrame em um arquivo Excel df_hp . to_excel ( \"Boletins_Alunos.xlsx\" , index = False )","title":"Aula 17 - Pandas"},{"location":"S02/Aula%2017%20-%20Pandas/#pandas","text":"","title":"Pandas"},{"location":"S02/Aula%2017%20-%20Pandas/#explicacao","text":"Pandas \u00e9 uma biblioteca do Python que permite extrair dados de diversos arquivos, como Excel, Json, HTML, SQL, etc... A mesma possui funcionalidades voltadas para an\u00e1lises de dados e ferramentas de manipula\u00e7\u00e3o de tabelas.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2017%20-%20Pandas/#glossario","text":"","title":"Gloss\u00e1rio"},{"location":"S02/Aula%2017%20-%20Pandas/#dataframe","text":"Estrutura para dados que \u00e9 composta de duas dimens\u00f5es, estas sendo linhas e colunas. Assemelha-se \u00e0 uma tabela de Excel.","title":"DataFrame"},{"location":"S02/Aula%2017%20-%20Pandas/#series","text":"Estrutura de dados de uma dimens\u00e3o, sendo basicamente composta dos valores de uma linha ou coluna que representa apenas uma fatia do DataFrame.","title":"Series"},{"location":"S02/Aula%2017%20-%20Pandas/#comandos","text":"Instalando a biblioteca pip install pandas Importando a biblioteca import pandas as pd Lendo um arquivo Excel df = pd . read_excel ( \"tabela_clientes.xlsx\" ) Resumo das dimens\u00f5es do DataFrame df . shape Ver nome das colunas df . columns Ver os primeiros resultados Como padr\u00e3o a quantidades de linhas \u00e0 ser trazido s\u00e3o cinco, por\u00e9m esse valor pode ser alterado se preenchido os par\u00eanteses de acordo com o desejado. df . head () # ou df . head ( 20 ) Ver os \u00faltimos resultados df . tail () Selecionar uma coluna espec\u00edfica - pelo nome O segundo m\u00e9todo apresentado no exemplo somente \u00e9 permitido de usar em nomes de colunas sem espa\u00e7o entre palavras. df [ \"Nome_Completo\" ] # ou df . Nome_Completo Selecionar o primeiro valor de uma coluna espec\u00edfica df [ \"Nome_Completo\" ] . values [ 0 ] Selecionar uma linha atrav\u00e9s do index df . iloc [ 0 ] Selecionar uma linha e uma coluna atrav\u00e9s do index df . iloc [ 0 , 0 ] Criando um DataFrame data = { \"Nome\" : [ \"Harry\" , \"Hermione\" , \"Rony\" , \"Luna\" , \"Neville\" ], \"Herbologia\" : [ 8 , 5 , 6 , 9 , 7 ], \"Alquimia\" : [ 7 , 9 , 5 , 4 , 7 ], \"Adivinhacao\" : [ 7 , 4 , 7 , 6 , 8 ] } df_hp = pd . DataFrame ( data ) Estat\u00edsticas descritivas das colunas - media, desvio padr\u00e3o, m\u00ednimo, m\u00e1ximo, etc ... df . describe () Extraindo o DataFrame em um arquivo Excel df_hp . to_excel ( \"Boletins_Alunos.xlsx\" , index = False )","title":"Comandos"},{"location":"S02/Aula%2018%20-%20CSV/","text":"CSV Explica\u00e7\u00e3o Assim como os formatos xlsx e xls, tamb\u00e9m \u00e9 poss\u00edvel ler arquivos gerados por programas ou sites que possuem os valores separadas por delimitadores (.csv). Para isso, basta utilizar a biblioteca CSV que j\u00e1 vem embarcada do Python. Comandos Utilizando a biblioteca CSV, \u00e9 poss\u00edvel ler e escrever arquivos no formato \".csv\". Importa\u00e7\u00e3o import csv Abertura do arquivo arqv_csv = open ( 'tabela_clientes.csv' , 'r' ) Leitura do arquivo - LISTA : lista_clientes = csv . reader ( arqv_csv , delimiter = ',' ) \"delimiter\" \u00e9 o caractere que divide os valores Leitura do arquivo \u2013 DICION\u00c1RIO : lista_clientes = csv . DictReader ( arqv_csv , delimiter = ',' ) \"delimiter\" \u00e9 o caractere que divide os valores Escrita do arquivo - LISTA : lista_pessoas = [[ 'Ana' , 'Itaja\u00ed' , 'SC' , '27' , 'Veterin\u00e1ria' ], [ 'Rubens' , 'S\u00e3o Paulo' , 'SP' , '43' , 'Mec\u00e2nico' ], [ 'Fabiana' , 'Pinhais' , 'PR' , '70' , 'Cozinheira' ]] escritor = csv . writer ( arqv_csv , delimiter = ',' ) escritor . writerows ( lista_pessoas ) Precisa ter o modo de abertura como \"a\" ou \"w\" \"delimiter\" \u00e9 o caractere que divide os valores Escrita do arquivo - DICION\u00c1RIO : dicionario_pessoas = [{ 'Nome' : 'Ana' , 'Cidade' : 'Itaja\u00ed' , 'Estado' : 'SC' , 'Idade' : '27' , 'Profiss\u00e3o' : 'Veterin\u00e1ria' }, { 'Nome' : 'Rubens' , 'Cidade' : 'S\u00e3o Paulo' , 'Estado' : 'SP' , 'Idade' : '43' , 'Profiss\u00e3o' : 'Mec\u00e2nico' }, { 'Nome' : 'Fabiana' , 'Cidade' : 'Pinhais' , 'Estado' : 'PR' , 'Idade' : '70' , 'Profiss\u00e3o' : 'Cozinheira' }] campos = [ 'Nome' , 'Cidade' , 'Estado' , 'Idade' , 'Profiss\u00e3o' ] escritor = csv . DictWriter ( arqv_csv , delimiter = ',' , fieldnames = campos ) escritor . writerows ( dicionario_pessoas ) Precisa ter o modo de abertura como \"a\" ou \"w\" \"delimiter\" \u00e9 o caractere que divide os valores Fecha o arquivo arqv_csv . close ()","title":"Aula 18 - CSV"},{"location":"S02/Aula%2018%20-%20CSV/#csv","text":"","title":"CSV"},{"location":"S02/Aula%2018%20-%20CSV/#explicacao","text":"Assim como os formatos xlsx e xls, tamb\u00e9m \u00e9 poss\u00edvel ler arquivos gerados por programas ou sites que possuem os valores separadas por delimitadores (.csv). Para isso, basta utilizar a biblioteca CSV que j\u00e1 vem embarcada do Python.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2018%20-%20CSV/#comandos","text":"Utilizando a biblioteca CSV, \u00e9 poss\u00edvel ler e escrever arquivos no formato \".csv\". Importa\u00e7\u00e3o import csv Abertura do arquivo arqv_csv = open ( 'tabela_clientes.csv' , 'r' ) Leitura do arquivo - LISTA : lista_clientes = csv . reader ( arqv_csv , delimiter = ',' ) \"delimiter\" \u00e9 o caractere que divide os valores Leitura do arquivo \u2013 DICION\u00c1RIO : lista_clientes = csv . DictReader ( arqv_csv , delimiter = ',' ) \"delimiter\" \u00e9 o caractere que divide os valores Escrita do arquivo - LISTA : lista_pessoas = [[ 'Ana' , 'Itaja\u00ed' , 'SC' , '27' , 'Veterin\u00e1ria' ], [ 'Rubens' , 'S\u00e3o Paulo' , 'SP' , '43' , 'Mec\u00e2nico' ], [ 'Fabiana' , 'Pinhais' , 'PR' , '70' , 'Cozinheira' ]] escritor = csv . writer ( arqv_csv , delimiter = ',' ) escritor . writerows ( lista_pessoas ) Precisa ter o modo de abertura como \"a\" ou \"w\" \"delimiter\" \u00e9 o caractere que divide os valores Escrita do arquivo - DICION\u00c1RIO : dicionario_pessoas = [{ 'Nome' : 'Ana' , 'Cidade' : 'Itaja\u00ed' , 'Estado' : 'SC' , 'Idade' : '27' , 'Profiss\u00e3o' : 'Veterin\u00e1ria' }, { 'Nome' : 'Rubens' , 'Cidade' : 'S\u00e3o Paulo' , 'Estado' : 'SP' , 'Idade' : '43' , 'Profiss\u00e3o' : 'Mec\u00e2nico' }, { 'Nome' : 'Fabiana' , 'Cidade' : 'Pinhais' , 'Estado' : 'PR' , 'Idade' : '70' , 'Profiss\u00e3o' : 'Cozinheira' }] campos = [ 'Nome' , 'Cidade' , 'Estado' , 'Idade' , 'Profiss\u00e3o' ] escritor = csv . DictWriter ( arqv_csv , delimiter = ',' , fieldnames = campos ) escritor . writerows ( dicionario_pessoas ) Precisa ter o modo de abertura como \"a\" ou \"w\" \"delimiter\" \u00e9 o caractere que divide os valores Fecha o arquivo arqv_csv . close ()","title":"Comandos"},{"location":"S02/Aula%2019%20-%20Pdfs/","text":"PDFs Explica\u00e7\u00e3o Existem v\u00e1rias bibliotecas de leitura de PDF e aqui v\u00e3o ser apresentadas algumas. Vale destacar que PDFs n\u00e3o possuem um padr\u00e3o assim como o Excel, ou seja, a leitura pode ser um pouco mais complexa de ser feita. Biblioteca PDFminer Instala\u00e7\u00e3o da biblioteca pip install pdfminer.six Importa\u00e7\u00e3o da biblioteca from pdfminer.high_level import extract_text Abertura e extra\u00e7\u00e3o do texto texto = extract_text ( 'boleto.pdf' ) print ( texto ) # output: # Boleto de Pagamento # Referente \u00e0: Produto Exemplo 1 # Emitido por: Seu nome ou o de sua empresa - CNPJ 22.517.527/0001-20 # E-mail: contato@seuemail.com # ... Biblioteca pdfplumber Instala\u00e7\u00e3o da biblioteca pip install pdfplumber Importa\u00e7\u00e3o da biblioteca import pdfplumber Abertura do arquivo pdf = pdfplumber . open ( 'boleto.pdf' ) Sele\u00e7\u00e3o da p\u00e1gina do documento \u00e0 ser lida page = pdf . pages [ 0 ] Extra\u00e7\u00e3o do texto texto = page . extract_text () print ( texto ) # output: # Boleto de Pagamento # Referente \u00e0: Produto Exemplo 1 # Emitido por: Seu nome ou o de sua empresa - CNPJ 22.517.527/0001-20 # E-mail: contato@seuemail.com # ... Biblioteca PyMuPDF Instala\u00e7\u00e3o da biblioteca pip install PyMuPDF Importa\u00e7\u00e3o da biblioteca import fitz Abertura do arquivo pdf = fitz . open ( 'boleto.pdf' ) Sele\u00e7\u00e3o da p\u00e1gina do documento \u00e0 ser lida page = pdf . load_page ( 0 ) Extra\u00e7\u00e3o do texto texto = page . get_text () print ( texto ) # output: # Boleto de Pagamento # Referente \u00e0: Produto Exemplo 1 # Emitido por: Seu nome ou o de sua empresa - CNPJ 22.517.527/0001-20 # E-mail: contato@seuemail.com # ...","title":"Aula 19 - Pdfs"},{"location":"S02/Aula%2019%20-%20Pdfs/#pdfs","text":"","title":"PDFs"},{"location":"S02/Aula%2019%20-%20Pdfs/#explicacao","text":"Existem v\u00e1rias bibliotecas de leitura de PDF e aqui v\u00e3o ser apresentadas algumas. Vale destacar que PDFs n\u00e3o possuem um padr\u00e3o assim como o Excel, ou seja, a leitura pode ser um pouco mais complexa de ser feita.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2019%20-%20Pdfs/#biblioteca-pdfminer","text":"Instala\u00e7\u00e3o da biblioteca pip install pdfminer.six Importa\u00e7\u00e3o da biblioteca from pdfminer.high_level import extract_text Abertura e extra\u00e7\u00e3o do texto texto = extract_text ( 'boleto.pdf' ) print ( texto ) # output: # Boleto de Pagamento # Referente \u00e0: Produto Exemplo 1 # Emitido por: Seu nome ou o de sua empresa - CNPJ 22.517.527/0001-20 # E-mail: contato@seuemail.com # ...","title":"Biblioteca PDFminer"},{"location":"S02/Aula%2019%20-%20Pdfs/#biblioteca-pdfplumber","text":"Instala\u00e7\u00e3o da biblioteca pip install pdfplumber Importa\u00e7\u00e3o da biblioteca import pdfplumber Abertura do arquivo pdf = pdfplumber . open ( 'boleto.pdf' ) Sele\u00e7\u00e3o da p\u00e1gina do documento \u00e0 ser lida page = pdf . pages [ 0 ] Extra\u00e7\u00e3o do texto texto = page . extract_text () print ( texto ) # output: # Boleto de Pagamento # Referente \u00e0: Produto Exemplo 1 # Emitido por: Seu nome ou o de sua empresa - CNPJ 22.517.527/0001-20 # E-mail: contato@seuemail.com # ...","title":"Biblioteca pdfplumber"},{"location":"S02/Aula%2019%20-%20Pdfs/#biblioteca-pymupdf","text":"Instala\u00e7\u00e3o da biblioteca pip install PyMuPDF Importa\u00e7\u00e3o da biblioteca import fitz Abertura do arquivo pdf = fitz . open ( 'boleto.pdf' ) Sele\u00e7\u00e3o da p\u00e1gina do documento \u00e0 ser lida page = pdf . load_page ( 0 ) Extra\u00e7\u00e3o do texto texto = page . get_text () print ( texto ) # output: # Boleto de Pagamento # Referente \u00e0: Produto Exemplo 1 # Emitido por: Seu nome ou o de sua empresa - CNPJ 22.517.527/0001-20 # E-mail: contato@seuemail.com # ...","title":"Biblioteca PyMuPDF"},{"location":"S02/Aula%202%20-%20IDEs/","text":"IDEs O que \u00e9 uma IDE? Segundo a empresa Red Hat , IDE vem do ingl\u00eas \"Integrated Development Environment\" que traduzido ao portugu\u00eas seria \"Ambiente de Desenvolvimeento Integrado\", isto \u00e9, um programa que permite o desenvolvedor criar aplica\u00e7\u00f5es de forma eficaz e com apoio de uma interface gr\u00e1fica do usu\u00e1rio (GUI). A mesma geralmente possui funcionalidades como edi\u00e7\u00e3o, compila\u00e7\u00e3o e debug (modo de teste) de c\u00f3digos. Quais as IDEs usadas para Python? N\u00edvel Iniciante Instal\u00e1veis IDLE Ferramenta embarcada com o Python; Interface minimalista; Inicia com um \"Shell\" do Python. Thonny Interface gr\u00e1fica simples para quem est\u00e1 iniciando. Wing 101 Editor com funcionalidades reduzidas para iniciantes; Debug minimalista. Online Google Colab Basta ter uma conta na Google; M\u00e1quina virtual hospedada nos servidores da Google. Online-Python Pode conter an\u00fancios. N\u00edvel Intermedi\u00e1rio Instal\u00e1veis Jupyter Notebook Similar ao Google Colab, mas alocado na pr\u00f3pria m\u00e1quina. VSCode Aplica\u00e7\u00e3o leve; Integra\u00e7\u00e3o com outras ferramentas da Microsoft; Permite programar em v\u00e1rias linguagens; Diversas extens\u00f5es para ampliar funcionalidades. Sublime Text Aplica\u00e7\u00e3o leve e n\u00e3o precisa ser instalada. Atom Integra\u00e7\u00e3o direta com o Github. Online vscode.dev Igual ao VSCode, por\u00e9m online. github.dev Igual ao VSCode, por\u00e9m online e atrelado aos reposit\u00f3rios do Github. replit Editor online que permite trabalhar cooperativo com outras pessoas. N\u00edvel Avan\u00e7ado Instal\u00e1veis PyCharm Plataforma desenvolvida unicamente para Python; Segue as boas pr\u00e1ticas \"Pythonica\" (PEP8); F\u00e1cil gerenciamento de projetos em Python. Ferramenta mais pesada que as demais IDEs. Spyder Possui console IPython; Cont\u00e9m um explorador de vari\u00e1veis; Interface para apresenta\u00e7\u00e3o de gr\u00e1ficos. PyDev Aplica\u00e7\u00e3o com similaridade ao Eclipse (Java). Refer\u00eancias bibliogr\u00e1ficas IDEs para Python Integrated Development Environments Python IDE","title":"Aula 2 - IDEs"},{"location":"S02/Aula%202%20-%20IDEs/#ides","text":"","title":"IDEs"},{"location":"S02/Aula%202%20-%20IDEs/#o-que-e-uma-ide","text":"Segundo a empresa Red Hat , IDE vem do ingl\u00eas \"Integrated Development Environment\" que traduzido ao portugu\u00eas seria \"Ambiente de Desenvolvimeento Integrado\", isto \u00e9, um programa que permite o desenvolvedor criar aplica\u00e7\u00f5es de forma eficaz e com apoio de uma interface gr\u00e1fica do usu\u00e1rio (GUI). A mesma geralmente possui funcionalidades como edi\u00e7\u00e3o, compila\u00e7\u00e3o e debug (modo de teste) de c\u00f3digos.","title":"O que \u00e9 uma IDE?"},{"location":"S02/Aula%202%20-%20IDEs/#quais-as-ides-usadas-para-python","text":"","title":"Quais as IDEs usadas para Python?"},{"location":"S02/Aula%202%20-%20IDEs/#nivel-iniciante","text":"","title":"N\u00edvel Iniciante"},{"location":"S02/Aula%202%20-%20IDEs/#instalaveis","text":"IDLE Ferramenta embarcada com o Python; Interface minimalista; Inicia com um \"Shell\" do Python. Thonny Interface gr\u00e1fica simples para quem est\u00e1 iniciando. Wing 101 Editor com funcionalidades reduzidas para iniciantes; Debug minimalista.","title":"Instal\u00e1veis"},{"location":"S02/Aula%202%20-%20IDEs/#online","text":"Google Colab Basta ter uma conta na Google; M\u00e1quina virtual hospedada nos servidores da Google. Online-Python Pode conter an\u00fancios.","title":"Online"},{"location":"S02/Aula%202%20-%20IDEs/#nivel-intermediario","text":"","title":"N\u00edvel Intermedi\u00e1rio"},{"location":"S02/Aula%202%20-%20IDEs/#instalaveis_1","text":"Jupyter Notebook Similar ao Google Colab, mas alocado na pr\u00f3pria m\u00e1quina. VSCode Aplica\u00e7\u00e3o leve; Integra\u00e7\u00e3o com outras ferramentas da Microsoft; Permite programar em v\u00e1rias linguagens; Diversas extens\u00f5es para ampliar funcionalidades. Sublime Text Aplica\u00e7\u00e3o leve e n\u00e3o precisa ser instalada. Atom Integra\u00e7\u00e3o direta com o Github.","title":"Instal\u00e1veis"},{"location":"S02/Aula%202%20-%20IDEs/#online_1","text":"vscode.dev Igual ao VSCode, por\u00e9m online. github.dev Igual ao VSCode, por\u00e9m online e atrelado aos reposit\u00f3rios do Github. replit Editor online que permite trabalhar cooperativo com outras pessoas.","title":"Online"},{"location":"S02/Aula%202%20-%20IDEs/#nivel-avancado","text":"","title":"N\u00edvel Avan\u00e7ado"},{"location":"S02/Aula%202%20-%20IDEs/#instalaveis_2","text":"PyCharm Plataforma desenvolvida unicamente para Python; Segue as boas pr\u00e1ticas \"Pythonica\" (PEP8); F\u00e1cil gerenciamento de projetos em Python. Ferramenta mais pesada que as demais IDEs. Spyder Possui console IPython; Cont\u00e9m um explorador de vari\u00e1veis; Interface para apresenta\u00e7\u00e3o de gr\u00e1ficos. PyDev Aplica\u00e7\u00e3o com similaridade ao Eclipse (Java).","title":"Instal\u00e1veis"},{"location":"S02/Aula%202%20-%20IDEs/#referencias-bibliograficas","text":"IDEs para Python Integrated Development Environments Python IDE","title":"Refer\u00eancias bibliogr\u00e1ficas"},{"location":"S02/Aula%2020%20-%20Email/","text":"Email Explica\u00e7\u00e3o Ap\u00f3s o codigo realizar algumas a\u00e7\u00f5es, \u00e9 importante sempre no final que ele envie os arquivos ou logs por email. Dentro do Python \u00e9 poss\u00edvel se comunicar com servidores das provedoras de email (Gmail, Outlook e etc) utilizando o protocolo SMTP. SMTP \u00c9 o protocolo padr\u00e3o de envio de emails atr\u00e1vez da internet entre dois dispositivos. SMTP Gmail Libera\u00e7\u00e3o do email para suportar a conex\u00e3o via SMTP: https://myaccount.google.com/lesssecureapps Endere\u00e7os e portas de acesso: https://support.google.com/a/answer/176600?hl=pt#zippy=%2Cusar-o-servidor-smtp-do-gmail SMTP Outlook Endere\u00e7os e portas de acesso: https://support.microsoft.com/pt-br/office/configura\u00e7\u00f5es-pop-imap-e-smtp-para-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040 Comandos Instala\u00e7\u00e3o da biblioteca pip install smtplib Importa\u00e7\u00e3o das bibliotecas from email.message import EmailMessage import smtplib import os Gera\u00e7\u00e3o do objeto de e-mail msg = EmailMessage () Gera\u00e7\u00e3o do corpo do e-mail com texto payload = \"\"\"Ol\u00e1! Tudo bem? Este \u00e9 um e-mail autom\u00e1tico para testar o disparo de e-mail ensinado pelo curso de RPA Python! Atenciosamente, RPA Pythonico \"\"\" msg . set_content ( payload ) Atribui\u00e7\u00e3o de dados para disparo do e-mail (De, Para e Assunto) msg [ 'From' ] = email msg [ 'To' ] = 'seu_email@provedor.com' msg [ 'Subject' ] = 'Email Automatico - SMTPLIB' Cria\u00e7\u00e3o da conex\u00e3o SMTP smtp = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) smtp . starttls () smtp . login ( 'seu_email@provedor.com' , 'sua_senha' ) Inser\u00e7\u00e3o de anexo no e-mail with open ( 'foto_email.png' , 'rb' ) as file : file_data = file . read () msg . add_attachment ( file_data , maintype = 'image' , subtype = 'png' ) Disparo do e-mail via SMTP smtp . send_message ( msg ) Finaliza\u00e7\u00e3o da conex\u00e3o SMTP smtp . quit ()","title":"Aula 20 - Email"},{"location":"S02/Aula%2020%20-%20Email/#email","text":"","title":"Email"},{"location":"S02/Aula%2020%20-%20Email/#explicacao","text":"Ap\u00f3s o codigo realizar algumas a\u00e7\u00f5es, \u00e9 importante sempre no final que ele envie os arquivos ou logs por email. Dentro do Python \u00e9 poss\u00edvel se comunicar com servidores das provedoras de email (Gmail, Outlook e etc) utilizando o protocolo SMTP.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2020%20-%20Email/#smtp","text":"\u00c9 o protocolo padr\u00e3o de envio de emails atr\u00e1vez da internet entre dois dispositivos. SMTP Gmail Libera\u00e7\u00e3o do email para suportar a conex\u00e3o via SMTP: https://myaccount.google.com/lesssecureapps Endere\u00e7os e portas de acesso: https://support.google.com/a/answer/176600?hl=pt#zippy=%2Cusar-o-servidor-smtp-do-gmail SMTP Outlook Endere\u00e7os e portas de acesso: https://support.microsoft.com/pt-br/office/configura\u00e7\u00f5es-pop-imap-e-smtp-para-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040","title":"SMTP"},{"location":"S02/Aula%2020%20-%20Email/#comandos","text":"Instala\u00e7\u00e3o da biblioteca pip install smtplib Importa\u00e7\u00e3o das bibliotecas from email.message import EmailMessage import smtplib import os Gera\u00e7\u00e3o do objeto de e-mail msg = EmailMessage () Gera\u00e7\u00e3o do corpo do e-mail com texto payload = \"\"\"Ol\u00e1! Tudo bem? Este \u00e9 um e-mail autom\u00e1tico para testar o disparo de e-mail ensinado pelo curso de RPA Python! Atenciosamente, RPA Pythonico \"\"\" msg . set_content ( payload ) Atribui\u00e7\u00e3o de dados para disparo do e-mail (De, Para e Assunto) msg [ 'From' ] = email msg [ 'To' ] = 'seu_email@provedor.com' msg [ 'Subject' ] = 'Email Automatico - SMTPLIB' Cria\u00e7\u00e3o da conex\u00e3o SMTP smtp = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) smtp . starttls () smtp . login ( 'seu_email@provedor.com' , 'sua_senha' ) Inser\u00e7\u00e3o de anexo no e-mail with open ( 'foto_email.png' , 'rb' ) as file : file_data = file . read () msg . add_attachment ( file_data , maintype = 'image' , subtype = 'png' ) Disparo do e-mail via SMTP smtp . send_message ( msg ) Finaliza\u00e7\u00e3o da conex\u00e3o SMTP smtp . quit ()","title":"Comandos"},{"location":"S02/Aula%2021%20-%20RegEx/","text":"RegEx Explica\u00e7\u00e3o RegEx correspondem a descri\u00e7\u00f5es para um padr\u00e3o de texto. Ou seja, s\u00e3o caracteres especiais que indicam determinados tipos de letras/n\u00fameros. Exemplo Importando a biblioteca import re Separando padr\u00f5es em grupos Para que os padr\u00f5es sejam \"encapsulados\" em grupos menores, o s\u00edmbolo utilizado s\u00e3o os parenteses. Atrav\u00e9s deles, ser\u00e1 poss\u00edvel acessar a combina\u00e7\u00e3o desejada por um index, conforme exemplo abaixo: valida_tel = re . compile ( r \"(\\d {2} )\\s(\\d{4,5})\\-(\\d {4} )\" ) coleta = valida_tel . search ( \"Meu n\u00famero \u00e9 41 99123-4567\" ) coleta . group () # output: '41 99123-4567' coleta . group ( 1 ) # output: '41' coleta . group ( 2 ) # output: '99123' coleta . group ( 3 ) # output: '4567' Buscando por uma palavra inteira ou parcialmente O s\u00edmbolo de pipe \"|\" \u00e9 utilizado em algumas linguagens de programa\u00e7\u00e3o para apresentar a express\u00e3o \"ou\". Exemplo 1 regex_ou = re . compile ( r \"Wilber|Thomas\" ) coleta = regex_ou . search ( \"Ola, meu nome e Wilber\" ) coleta . group () # output: 'Wilber' coleta = regex_ou . search ( \"Ola, meu nome e Thomas\" ) coleta . group () # output: 'Thomas' Exemplo 2 regex_ou = re . compile ( \"Wil(ber|mar)\" ) coleta = regex_ou . search ( \"Ola, meu nome e Wilber\" ) coleta . group () # output: 'Wilber' coleta = regex_ou . search ( \"Ola, meu nome e Wilmar\" ) coleta . group () # output: 'Wilmar' Buscando por repeti\u00e7\u00f5es indefinidas (0 ou 1 at\u00e9 o infinito) Os s\u00edmbolos \"?\", \"+\" e \"*\" representam quantidades, isto \u00e9, podendo ou n\u00e3o se repetir e uma quantidade X de vezes. Exemplo 1 regex_bat = re . compile ( r \"Bat(wo)?man\" ) coleta = regex_bat . search ( \"As aventuras de Batman\" ) coleta . group () # output: 'Batman' coleta = regex_bat . search ( \"As aventuras de Batwoman\" ) coleta . group () # output: 'Batwoman' Exemplo 2 regex_coringa = re . compile ( r \"(HA)*\" ) coleta = regex_coringa . search ( \"HAHAHAHAHA! Esta foi uma excelente piada!\" ) coleta . group () # output: 'HAHAHAHAHA' coleta = regex_coringa . search ( \"HAHA! Esta foi uma excelente piada!\" ) coleta . group () # output: 'HAHA' Comeco e fim de frase Para buscar um padr\u00e3o que esteja no in\u00edcio da frase, o s\u00edmbolo \u00e9 \"^\" e o final da frase possui o s\u00edmbolo \"$\". Exemplo do come\u00e7o regex_inicio = re . compile ( r \"^Sabia\" ) coleta = regex_inicio . search ( \"Sabia que o significado da vida, do universo e tudo mais \u00e9 42?\" ) coleta . group () # output: 'Sabia' Exemplo do final regex_fim = re . compile ( r \"\\d {2} $\" ) coleta = regex_fim . search ( \"O significado da vida, do universo e tudo mais e 42\" ) coleta . group () # output: '42' Utilizando caractere coringa O ponto (.) \u00e9 considerado um caractere coringa, cujo pode substituir qualquer coisa, como espa\u00e7os, letras, caracteres especiais, etc ... Exemplo 1 regex_coringa = re . compile ( \".at\" ) coleta = regex_coringa . findall ( \"The cat with the hat hit a bat\" ) print ( coleta ) # output: ['cat', 'hat', 'bat'] Exemplo 2 regex_tudo = re . compile ( r \"Primeiro nome: (.*) Segundo Nome: (.*)\" ) coleta = regex_tudo . search ( \"Primeiro nome: Harry Segundo Nome: Potter\" ) coleta . group () # output: 'Primeiro nome: Harry Segundo Nome: Potter' coleta . group ( 1 ) # output: 'Harry' coleta . group ( 2 ) # output: 'Potter' Substitui\u00e7\u00e3o atrav\u00e9s de padr\u00f5es O padr\u00e3o \"\\d\" representa todo e qualquer n\u00famero/d\u00edgito presente na string. frase = 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' regex_sub = re . compile ( r \"\\d\" ) coleta = regex_sub . sub ( \"*\" , frase ) print ( coleta ) # output: 'Meu n\u00famero residencial \u00e9 (**) *****-**** e meu n\u00famero de celular \u00e9 (**) ****-****' Separacao e jun\u00e7\u00e3o atrav\u00e9s de padr\u00f5es e substitui\u00e7\u00e3o O padr\u00e3o \"\\s\" representa todo e qualquer espa\u00e7o presente na string. frase = 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' regex_sep = re . compile ( r \"\\s\" ) coleta = regex_sep . split ( frase ) print ( coleta ) # output: ['Meu', 'n\u00famero', 'residencial', '\u00e9', '(41)', '99123-4567', 'e', 'meu', 'n\u00famero', 'de', 'celular', '\u00e9', '(41)', '3123-4567'] coleta = \" \" . join ( coleta ) print ( coleta ) # output: 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' Buscando por CPFs Padr\u00e3o pronto de RegEx para extra\u00e7\u00f5es de CPFs nos variados formatos \u00e0 estarem presentes. frase = \"O seu CPF \u00e9 470.485.110-95 e o meu \u00e9 11745629009\" regex_cpf = re . compile ( r \"\\d {3} \\.?\\d {3} \\.?\\d {3} \\-?\\d {2} \" ) coleta = regex_cpf . findall ( frase ) print ( coleta ) # output: ['470.485.110-95', '11745629009'] Buscando por telefones Padr\u00e3o pronto de RegEx para extra\u00e7\u00f5es de n\u00fameros nos variados formatos \u00e0 estarem presentes. regex_tel = re . compile ( r \"\\(?\\d {2} \\)?\\s?\\d{4,5}\\-?\\d {4} \" ) frase = \"O seu telefone fixo \u00e9 (41) 3123-4567, j\u00e1 o celular \u00e9 41 99123-4567 e o meu seria 4131234567.\" coleta = regex_tel . findall ( frase ) print ( coleta ) # output: ['(41) 3123-4567', '41 99123-4567', '4131234567']","title":"Aula 21 - RegEx"},{"location":"S02/Aula%2021%20-%20RegEx/#regex","text":"","title":"RegEx"},{"location":"S02/Aula%2021%20-%20RegEx/#explicacao","text":"RegEx correspondem a descri\u00e7\u00f5es para um padr\u00e3o de texto. Ou seja, s\u00e3o caracteres especiais que indicam determinados tipos de letras/n\u00fameros.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo","text":"","title":"Exemplo"},{"location":"S02/Aula%2021%20-%20RegEx/#importando-a-biblioteca","text":"import re","title":"Importando a biblioteca"},{"location":"S02/Aula%2021%20-%20RegEx/#separando-padroes-em-grupos","text":"Para que os padr\u00f5es sejam \"encapsulados\" em grupos menores, o s\u00edmbolo utilizado s\u00e3o os parenteses. Atrav\u00e9s deles, ser\u00e1 poss\u00edvel acessar a combina\u00e7\u00e3o desejada por um index, conforme exemplo abaixo: valida_tel = re . compile ( r \"(\\d {2} )\\s(\\d{4,5})\\-(\\d {4} )\" ) coleta = valida_tel . search ( \"Meu n\u00famero \u00e9 41 99123-4567\" ) coleta . group () # output: '41 99123-4567' coleta . group ( 1 ) # output: '41' coleta . group ( 2 ) # output: '99123' coleta . group ( 3 ) # output: '4567'","title":"Separando padr\u00f5es em grupos"},{"location":"S02/Aula%2021%20-%20RegEx/#buscando-por-uma-palavra-inteira-ou-parcialmente","text":"O s\u00edmbolo de pipe \"|\" \u00e9 utilizado em algumas linguagens de programa\u00e7\u00e3o para apresentar a express\u00e3o \"ou\".","title":"Buscando por uma palavra inteira ou parcialmente"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-1","text":"regex_ou = re . compile ( r \"Wilber|Thomas\" ) coleta = regex_ou . search ( \"Ola, meu nome e Wilber\" ) coleta . group () # output: 'Wilber' coleta = regex_ou . search ( \"Ola, meu nome e Thomas\" ) coleta . group () # output: 'Thomas'","title":"Exemplo 1"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-2","text":"regex_ou = re . compile ( \"Wil(ber|mar)\" ) coleta = regex_ou . search ( \"Ola, meu nome e Wilber\" ) coleta . group () # output: 'Wilber' coleta = regex_ou . search ( \"Ola, meu nome e Wilmar\" ) coleta . group () # output: 'Wilmar'","title":"Exemplo 2"},{"location":"S02/Aula%2021%20-%20RegEx/#buscando-por-repeticoes-indefinidas-0-ou-1-ate-o-infinito","text":"Os s\u00edmbolos \"?\", \"+\" e \"*\" representam quantidades, isto \u00e9, podendo ou n\u00e3o se repetir e uma quantidade X de vezes.","title":"Buscando por repeti\u00e7\u00f5es indefinidas (0 ou 1 at\u00e9 o infinito)"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-1_1","text":"regex_bat = re . compile ( r \"Bat(wo)?man\" ) coleta = regex_bat . search ( \"As aventuras de Batman\" ) coleta . group () # output: 'Batman' coleta = regex_bat . search ( \"As aventuras de Batwoman\" ) coleta . group () # output: 'Batwoman'","title":"Exemplo 1"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-2_1","text":"regex_coringa = re . compile ( r \"(HA)*\" ) coleta = regex_coringa . search ( \"HAHAHAHAHA! Esta foi uma excelente piada!\" ) coleta . group () # output: 'HAHAHAHAHA' coleta = regex_coringa . search ( \"HAHA! Esta foi uma excelente piada!\" ) coleta . group () # output: 'HAHA'","title":"Exemplo 2"},{"location":"S02/Aula%2021%20-%20RegEx/#comeco-e-fim-de-frase","text":"Para buscar um padr\u00e3o que esteja no in\u00edcio da frase, o s\u00edmbolo \u00e9 \"^\" e o final da frase possui o s\u00edmbolo \"$\".","title":"Comeco e fim de frase"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-do-comeco","text":"regex_inicio = re . compile ( r \"^Sabia\" ) coleta = regex_inicio . search ( \"Sabia que o significado da vida, do universo e tudo mais \u00e9 42?\" ) coleta . group () # output: 'Sabia'","title":"Exemplo do come\u00e7o"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-do-final","text":"regex_fim = re . compile ( r \"\\d {2} $\" ) coleta = regex_fim . search ( \"O significado da vida, do universo e tudo mais e 42\" ) coleta . group () # output: '42'","title":"Exemplo do final"},{"location":"S02/Aula%2021%20-%20RegEx/#utilizando-caractere-coringa","text":"O ponto (.) \u00e9 considerado um caractere coringa, cujo pode substituir qualquer coisa, como espa\u00e7os, letras, caracteres especiais, etc ...","title":"Utilizando caractere coringa"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-1_2","text":"regex_coringa = re . compile ( \".at\" ) coleta = regex_coringa . findall ( \"The cat with the hat hit a bat\" ) print ( coleta ) # output: ['cat', 'hat', 'bat']","title":"Exemplo 1"},{"location":"S02/Aula%2021%20-%20RegEx/#exemplo-2_2","text":"regex_tudo = re . compile ( r \"Primeiro nome: (.*) Segundo Nome: (.*)\" ) coleta = regex_tudo . search ( \"Primeiro nome: Harry Segundo Nome: Potter\" ) coleta . group () # output: 'Primeiro nome: Harry Segundo Nome: Potter' coleta . group ( 1 ) # output: 'Harry' coleta . group ( 2 ) # output: 'Potter'","title":"Exemplo 2"},{"location":"S02/Aula%2021%20-%20RegEx/#substituicao-atraves-de-padroes","text":"O padr\u00e3o \"\\d\" representa todo e qualquer n\u00famero/d\u00edgito presente na string. frase = 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' regex_sub = re . compile ( r \"\\d\" ) coleta = regex_sub . sub ( \"*\" , frase ) print ( coleta ) # output: 'Meu n\u00famero residencial \u00e9 (**) *****-**** e meu n\u00famero de celular \u00e9 (**) ****-****'","title":"Substitui\u00e7\u00e3o atrav\u00e9s de padr\u00f5es"},{"location":"S02/Aula%2021%20-%20RegEx/#separacao-e-juncao-atraves-de-padroes-e-substituicao","text":"O padr\u00e3o \"\\s\" representa todo e qualquer espa\u00e7o presente na string. frase = 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567' regex_sep = re . compile ( r \"\\s\" ) coleta = regex_sep . split ( frase ) print ( coleta ) # output: ['Meu', 'n\u00famero', 'residencial', '\u00e9', '(41)', '99123-4567', 'e', 'meu', 'n\u00famero', 'de', 'celular', '\u00e9', '(41)', '3123-4567'] coleta = \" \" . join ( coleta ) print ( coleta ) # output: 'Meu n\u00famero residencial \u00e9 (41) 99123-4567 e meu n\u00famero de celular \u00e9 (41) 3123-4567'","title":"Separacao e jun\u00e7\u00e3o atrav\u00e9s de padr\u00f5es e substitui\u00e7\u00e3o"},{"location":"S02/Aula%2021%20-%20RegEx/#buscando-por-cpfs","text":"Padr\u00e3o pronto de RegEx para extra\u00e7\u00f5es de CPFs nos variados formatos \u00e0 estarem presentes. frase = \"O seu CPF \u00e9 470.485.110-95 e o meu \u00e9 11745629009\" regex_cpf = re . compile ( r \"\\d {3} \\.?\\d {3} \\.?\\d {3} \\-?\\d {2} \" ) coleta = regex_cpf . findall ( frase ) print ( coleta ) # output: ['470.485.110-95', '11745629009']","title":"Buscando por CPFs"},{"location":"S02/Aula%2021%20-%20RegEx/#buscando-por-telefones","text":"Padr\u00e3o pronto de RegEx para extra\u00e7\u00f5es de n\u00fameros nos variados formatos \u00e0 estarem presentes. regex_tel = re . compile ( r \"\\(?\\d {2} \\)?\\s?\\d{4,5}\\-?\\d {4} \" ) frase = \"O seu telefone fixo \u00e9 (41) 3123-4567, j\u00e1 o celular \u00e9 41 99123-4567 e o meu seria 4131234567.\" coleta = regex_tel . findall ( frase ) print ( coleta ) # output: ['(41) 3123-4567', '41 99123-4567', '4131234567']","title":"Buscando por telefones"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/","text":"Selenium - Vis\u00e3o Geral O que \u00e9? Selenium \u00e9 um pacote open source de ferramentas que permitem automatizar intera\u00e7\u00f5es web, podendo ser utilizado para fazer crawlers/scrapers ou testes automatizados. Explica\u00e7\u00e3o baseada na documenta\u00e7\u00e3o . Como o Selenium se integra ao navegador? Essa integra\u00e7\u00e3o \u00e9 feita atrav\u00e9s de um execut\u00e1vel que \u00e9 chamada de webdriver , a mesma permite as devidas intera\u00e7\u00f5es entre c\u00f3digo e browser. Hoje, esses drivers existem para todos (ou quase todos) os navegadores mais utilizados, conforme tabela abaixo: Navegador SO Suportados Mantido por Baixar Problemas Encontrados Chromium/Chrome Windows/macOS/Linux Google Link Problemas Firefox Windows/macOS/Linux Mozilla Link Problemas Edge Windows/macOS Microsoft Link Problemas Internet Explorer Windows Selenium Project Link Problemas Opera Windows/macOS/Linux Opera Software Link Problemas Safari macOS High Sierra and newer Apple Embutido Problemas Informa\u00e7\u00f5es extra\u00eddas e traduzidas da documenta\u00e7\u00e3o oficial do Selenium. Obs.: O driver do Opera n\u00e3o suporta a sintaxe w3c, ent\u00e3o \u00e9 recomendado seguir com o uso do chromedriver para trabalhar com o navegador Opera. E assim como todo sistema sofre atualiza\u00e7\u00e3o, com os navegadores n\u00e3o \u00e9 diferente. O Python nos traz algumas bibliotecas que podem mitigar o risco de um navegador atualizar e o nosso webdriver ficar retr\u00f3grado. As mais utilizadas s\u00e3o: webdriver-manager pyderman Mas afinal, como \u00e9 feito a intera\u00e7\u00e3o com a p\u00e1gina web? A internet \u00e9 composta de requisi\u00e7\u00f5es e linguagens de formata\u00e7\u00e3o e estiliza\u00e7\u00e3o. Com isso, para interagir com uma p\u00e1gina, ser\u00e1 necess\u00e1rio entender o que \u00e9 o DOM de uma p\u00e1gina. A p\u00e1gina web possui tags com seus respectivos atributos (HTML) que permitem adicionar funcionalidades e/ou estilos (CSS). Al\u00e9m disso, as p\u00e1ginas cont\u00e9m linguagens scriptadas que permitem monitorar a\u00e7\u00f5es e realizar determinadas atividades quando alguma intera\u00e7\u00e3o for realizada, este \u00e9 o caso da linguagem JavaScript. Atrav\u00e9s dele, \u00e9 permitido efetuar \u201cinje\u00e7\u00f5es\u201d de scripts. Para entender melhor, o Selenium ir\u00e1 trabalhar com: id; Atributo identificador de alguma tag. Geralmente s\u00e3o \u00fanicos e imut\u00e1veis . name; Atributo que nomifica uma tag. Geralmente s\u00e3o \u00fanicos e podem sofrer altera\u00e7\u00e3o . class_name; Atributo que permite classificar um grupo de tags com a mesma regra de estiliza\u00e7\u00e3o. Ou seja, pode ter um ou mais . tag_name; Tag HTML do elemento \u00e0 ser inspecionado. partial_link_text; Parte do texto contido entre a tag de abertura e fechamento. Geralmente aparece em tags de link (\\<a>). link_text; Texto contido entre a tag de abertura e fechamento. Geralmente aparece em tags de link (\\<a>). css_selector; Padr\u00e3o de elementos/termos baseados em tags e atributos junto ao CSS. xpath. Padr\u00e3o de elementos/termos baseados em tags e atributos. Criando CSS Selector Sintaxe: tag[atributo=\"valor\"] Guia: https://www.w3schools.com/cssref/css_selectors.asp Cheat Sheet: https://devhints.io/css Extra: https://www.freecodecamp.org/news/css-selectors-cheat-sheet/ Criando Xpath Imagem retirada do site guru99 . Conte\u00fados extras Guia de cria\u00e7\u00e3o de Xpath: https://www.guru99.com/xpath-selenium.html Extra: https://devhints.io/xpath Exemplos CSS Selector Coleta atrav\u00e9s do ID #SIvCob ou div#SIvCob Coleta atrav\u00e9s da CLASS NAME .gb_Jd ou div.gb_Jd Pesquisa com Sintaxe Completa input[class=\"gLFyf gsfi\"] Pesquisa Utilizando uma Tag Filha div[class=\"RNNXgb\"] input Pesquisa Atrav\u00e9s da Parcela de um Texto Entre Tags input[value*=\"Pesquisa\"] Xpath Pesquisa com Sintaxe Completa //*[@id=\"SIvCob\"] Pesquisa Utilizando Tags Filhas //div[@class=\"RNNXgb\"]/div/div[2]/input Pesquisa Atrav\u00e9s do Texto Entre Tags //div[text()=\"Disponibilizado pelo Google em: \"] Pesquisa Atrav\u00e9s da Parcela de um Texto Entre Tags //div[contains(text(), 'Disponibilizado')]","title":"Vis\u00e3o Geral"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#selenium-visao-geral","text":"","title":"Selenium - Vis\u00e3o Geral"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#o-que-e","text":"Selenium \u00e9 um pacote open source de ferramentas que permitem automatizar intera\u00e7\u00f5es web, podendo ser utilizado para fazer crawlers/scrapers ou testes automatizados. Explica\u00e7\u00e3o baseada na documenta\u00e7\u00e3o .","title":"O que \u00e9?"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#como-o-selenium-se-integra-ao-navegador","text":"Essa integra\u00e7\u00e3o \u00e9 feita atrav\u00e9s de um execut\u00e1vel que \u00e9 chamada de webdriver , a mesma permite as devidas intera\u00e7\u00f5es entre c\u00f3digo e browser. Hoje, esses drivers existem para todos (ou quase todos) os navegadores mais utilizados, conforme tabela abaixo: Navegador SO Suportados Mantido por Baixar Problemas Encontrados Chromium/Chrome Windows/macOS/Linux Google Link Problemas Firefox Windows/macOS/Linux Mozilla Link Problemas Edge Windows/macOS Microsoft Link Problemas Internet Explorer Windows Selenium Project Link Problemas Opera Windows/macOS/Linux Opera Software Link Problemas Safari macOS High Sierra and newer Apple Embutido Problemas Informa\u00e7\u00f5es extra\u00eddas e traduzidas da documenta\u00e7\u00e3o oficial do Selenium. Obs.: O driver do Opera n\u00e3o suporta a sintaxe w3c, ent\u00e3o \u00e9 recomendado seguir com o uso do chromedriver para trabalhar com o navegador Opera. E assim como todo sistema sofre atualiza\u00e7\u00e3o, com os navegadores n\u00e3o \u00e9 diferente. O Python nos traz algumas bibliotecas que podem mitigar o risco de um navegador atualizar e o nosso webdriver ficar retr\u00f3grado. As mais utilizadas s\u00e3o: webdriver-manager pyderman","title":"Como o Selenium se integra ao navegador?"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#mas-afinal-como-e-feito-a-interacao-com-a-pagina-web","text":"A internet \u00e9 composta de requisi\u00e7\u00f5es e linguagens de formata\u00e7\u00e3o e estiliza\u00e7\u00e3o. Com isso, para interagir com uma p\u00e1gina, ser\u00e1 necess\u00e1rio entender o que \u00e9 o DOM de uma p\u00e1gina. A p\u00e1gina web possui tags com seus respectivos atributos (HTML) que permitem adicionar funcionalidades e/ou estilos (CSS). Al\u00e9m disso, as p\u00e1ginas cont\u00e9m linguagens scriptadas que permitem monitorar a\u00e7\u00f5es e realizar determinadas atividades quando alguma intera\u00e7\u00e3o for realizada, este \u00e9 o caso da linguagem JavaScript. Atrav\u00e9s dele, \u00e9 permitido efetuar \u201cinje\u00e7\u00f5es\u201d de scripts. Para entender melhor, o Selenium ir\u00e1 trabalhar com: id; Atributo identificador de alguma tag. Geralmente s\u00e3o \u00fanicos e imut\u00e1veis . name; Atributo que nomifica uma tag. Geralmente s\u00e3o \u00fanicos e podem sofrer altera\u00e7\u00e3o . class_name; Atributo que permite classificar um grupo de tags com a mesma regra de estiliza\u00e7\u00e3o. Ou seja, pode ter um ou mais . tag_name; Tag HTML do elemento \u00e0 ser inspecionado. partial_link_text; Parte do texto contido entre a tag de abertura e fechamento. Geralmente aparece em tags de link (\\<a>). link_text; Texto contido entre a tag de abertura e fechamento. Geralmente aparece em tags de link (\\<a>). css_selector; Padr\u00e3o de elementos/termos baseados em tags e atributos junto ao CSS. xpath. Padr\u00e3o de elementos/termos baseados em tags e atributos.","title":"Mas afinal, como \u00e9 feito a intera\u00e7\u00e3o com a p\u00e1gina web?"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#criando-css-selector","text":"Sintaxe: tag[atributo=\"valor\"] Guia: https://www.w3schools.com/cssref/css_selectors.asp Cheat Sheet: https://devhints.io/css Extra: https://www.freecodecamp.org/news/css-selectors-cheat-sheet/","title":"Criando CSS Selector"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#criando-xpath","text":"Imagem retirada do site guru99 .","title":"Criando Xpath"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#conteudos-extras","text":"Guia de cria\u00e7\u00e3o de Xpath: https://www.guru99.com/xpath-selenium.html Extra: https://devhints.io/xpath","title":"Conte\u00fados extras"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#exemplos","text":"","title":"Exemplos"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#css-selector","text":"Coleta atrav\u00e9s do ID #SIvCob ou div#SIvCob Coleta atrav\u00e9s da CLASS NAME .gb_Jd ou div.gb_Jd Pesquisa com Sintaxe Completa input[class=\"gLFyf gsfi\"] Pesquisa Utilizando uma Tag Filha div[class=\"RNNXgb\"] input Pesquisa Atrav\u00e9s da Parcela de um Texto Entre Tags input[value*=\"Pesquisa\"]","title":"CSS Selector"},{"location":"S02/Aula%2022.0%20-%20Selenium%20-%20Vis%C3%A3o%20Geral/#xpath","text":"Pesquisa com Sintaxe Completa //*[@id=\"SIvCob\"] Pesquisa Utilizando Tags Filhas //div[@class=\"RNNXgb\"]/div/div[2]/input Pesquisa Atrav\u00e9s do Texto Entre Tags //div[text()=\"Disponibilizado pelo Google em: \"] Pesquisa Atrav\u00e9s da Parcela de um Texto Entre Tags //div[contains(text(), 'Disponibilizado')]","title":"Xpath"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/","text":"Selenium - Navegador Instala\u00e7\u00e3o da biblioteca Para instalar a lib, ser\u00e1 usado o gerenciador de pacotes pip com o seguinte comando: pip install selenium Importar a biblioteca Para importar o m\u00ednimo do Selenium, o comando ser\u00e1: from selenium import webdriver Abrir o Webdriver Na nova vers\u00e3o do Selenium, o \"executable_path\" deixou de existir e precisa do Service para que o mesmo consiga abrir o navegador. Para abr\u00ed-lo no novo formato, dever\u00e1 ser feito o seguinte c\u00f3digo: from selenium.webdriver.chrome.service import Service s_dir = Service ( 'chromedriver.exe' ) driver = webdriver . Chrome ( service = s_dir ) J\u00e1 a importa\u00e7\u00e3o no formato antigo \u00e9 realizado da seguinte maneira: driver = webdriver . Chrome ( 'chromedriver.exe' ) Acessar um site Com o \"webdriver\" salvo dentro da vari\u00e1vel \"driver\", a mesma carrega muitas funcionalidades do navegador instanciado. O comando primordial \u00e9 para acessar um site: driver . get ( 'https://www.amazon.com.br/' ) Maximizar a janela do navegador O navegador tamb\u00e9m possui a capacidade de ser minimizado ou maximizado e no Selenium os comandos s\u00e3o: driver . minimize_window () # ou driver . maximize_window () Colocar um tempo para carregamento - IMPL\u00cdCITO O carregamento impl\u00edcito se aplica para todo e qualquer elemento na p\u00e1gina. Ent\u00e3o depois de instanciado uma vez, sempre que buscar alguma coisa na p\u00e1gina, ele ter\u00e1 esse tempo m\u00e1ximo de espera para localizar o objeto. A sintaxe dele \u00e9: driver . implicitly_wait ( 30 ) Colocar um tempo para carregamento - EXPL\u00cdCITO Em casos onde apenas um elemento nos interessa, pode ser utilizado um carregamento expl\u00edcito, isto \u00e9, no c\u00f3digo ser\u00e1 apontado exatamente qual o objeto que se deseja aguardar um tempo m\u00e1ximo at\u00e9 que ele apare\u00e7a. Esse m\u00e9todo n\u00e3o se aplica \u00e0 p\u00e1gina como um todo. A sintaxe dele \u00e9: from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC WebDriverWait ( driver , 30 ) . until ( EC . presence_of_element_located (( By . ID , 'twotabsearchtextbox' ))) Fechar aba do navegador O navegador tamb\u00e9m permite abrir v\u00e1rias abas e caso seja necess\u00e1rio fechar uma delas, o comando a seguir encerrar\u00e1 aquela que est\u00e1 em uso: driver . close () Fechar navegador e seu webdriver Para que a inst\u00e2ncia do navegador seja encerrada totalmente, o comando a seguir precisa estar ao final do script: driver . quit ()","title":"Navegador"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#selenium-navegador","text":"","title":"Selenium - Navegador"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#instalacao-da-biblioteca","text":"Para instalar a lib, ser\u00e1 usado o gerenciador de pacotes pip com o seguinte comando: pip install selenium","title":"Instala\u00e7\u00e3o da biblioteca"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#importar-a-biblioteca","text":"Para importar o m\u00ednimo do Selenium, o comando ser\u00e1: from selenium import webdriver","title":"Importar a biblioteca"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#abrir-o-webdriver","text":"Na nova vers\u00e3o do Selenium, o \"executable_path\" deixou de existir e precisa do Service para que o mesmo consiga abrir o navegador. Para abr\u00ed-lo no novo formato, dever\u00e1 ser feito o seguinte c\u00f3digo: from selenium.webdriver.chrome.service import Service s_dir = Service ( 'chromedriver.exe' ) driver = webdriver . Chrome ( service = s_dir ) J\u00e1 a importa\u00e7\u00e3o no formato antigo \u00e9 realizado da seguinte maneira: driver = webdriver . Chrome ( 'chromedriver.exe' )","title":"Abrir o Webdriver"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#acessar-um-site","text":"Com o \"webdriver\" salvo dentro da vari\u00e1vel \"driver\", a mesma carrega muitas funcionalidades do navegador instanciado. O comando primordial \u00e9 para acessar um site: driver . get ( 'https://www.amazon.com.br/' )","title":"Acessar um site"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#maximizar-a-janela-do-navegador","text":"O navegador tamb\u00e9m possui a capacidade de ser minimizado ou maximizado e no Selenium os comandos s\u00e3o: driver . minimize_window () # ou driver . maximize_window ()","title":"Maximizar a janela do navegador"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#colocar-um-tempo-para-carregamento-implicito","text":"O carregamento impl\u00edcito se aplica para todo e qualquer elemento na p\u00e1gina. Ent\u00e3o depois de instanciado uma vez, sempre que buscar alguma coisa na p\u00e1gina, ele ter\u00e1 esse tempo m\u00e1ximo de espera para localizar o objeto. A sintaxe dele \u00e9: driver . implicitly_wait ( 30 )","title":"Colocar um tempo para carregamento - IMPL\u00cdCITO"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#colocar-um-tempo-para-carregamento-explicito","text":"Em casos onde apenas um elemento nos interessa, pode ser utilizado um carregamento expl\u00edcito, isto \u00e9, no c\u00f3digo ser\u00e1 apontado exatamente qual o objeto que se deseja aguardar um tempo m\u00e1ximo at\u00e9 que ele apare\u00e7a. Esse m\u00e9todo n\u00e3o se aplica \u00e0 p\u00e1gina como um todo. A sintaxe dele \u00e9: from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC WebDriverWait ( driver , 30 ) . until ( EC . presence_of_element_located (( By . ID , 'twotabsearchtextbox' )))","title":"Colocar um tempo para carregamento - EXPL\u00cdCITO"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#fechar-aba-do-navegador","text":"O navegador tamb\u00e9m permite abrir v\u00e1rias abas e caso seja necess\u00e1rio fechar uma delas, o comando a seguir encerrar\u00e1 aquela que est\u00e1 em uso: driver . close ()","title":"Fechar aba do navegador"},{"location":"S02/Aula%2022.1%20-%20Selenium%20-%20Navegador/#fechar-navegador-e-seu-webdriver","text":"Para que a inst\u00e2ncia do navegador seja encerrada totalmente, o comando a seguir precisa estar ao final do script: driver . quit ()","title":"Fechar navegador e seu webdriver"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/","text":"Selenium - Intera\u00e7\u00f5es Importando a funcionalidade dos localizadores suportados Para que seja poss\u00edvel usar seletores de busca, o Selenium precisa da seguinte importa\u00e7\u00e3o: from selenium.webdriver.common.by import By Apagando e escrevendo em um campo Durante a navega\u00e7\u00e3o em um site, existem formul\u00e1rios ou campos de busca que precisam ser preenchidos. Com isso, o primeiro passo para evitar problemas, \u00e9 apagar o campo utilizando o seguinte comando: driver . find_element ( By . ID , 'twotabsearchtextbox' ) . clear () Ap\u00f3s o campo estar limpo e pronto para receber o texto, a escrita ser\u00e1 realizada com o c\u00f3digo: driver . find_element ( By . ID , 'twotabsearchtextbox' ) . send_keys ( 'Python' ) Movimentar a tela para um elemento (scroll) Alguns elementos acabam n\u00e3o carregando at\u00e9 que a tela seja movimenta para pr\u00f3ximo do mesmo. Para fazer isso, basta utilizar o c\u00f3digo a seguir: driver . find_element ( By . CLASS_NAME , 'navFooterBackToTopText' ) . location_once_scrolled_into_view Clicar em um elemento Para acessar objetos na p\u00e1gina, se faz necess\u00e1rio dar cliques e isso \u00e9 permitido usando o comando: driver . find_element ( By . ID , 'nav-search-submit-button' ) . click () Extrair textos Quando uma tag possui texto entre a abertura e o fechamento, o mesmo poder\u00e1 ser coletado atrav\u00e9s da seguinte funcionalidade: driver . find_element ( By . ID , 'glow-ingress-line2' ) . text Caso n\u00e3o exista texto entre as tags, o mesmo poder\u00e1 estar em algum atributo dela. Logo, para coletar direto de um atributo HTML, basta usar a seguinte fun\u00e7\u00e3o: driver . find_element ( By . ID , 'nav-logo-sprites' ) . get_attribute ( 'aria-label' ) Printscreens Para tirar um print de algum elemento espec\u00edfico do HTML, existe o seguinte c\u00f3digo: driver . find_element ( By . ID , 'navbar' ) . screenshot ( 'menu.png' ) Caso deseje tirar um print da p\u00e1gina inteira conforme est\u00e1 sendo visto no navegador, basta utilizar a fun\u00e7\u00e3o a seguir: driver . save_screenshot ( \"screenshot.png\" ) Dropdowns Dentro do HTML, existe o conceito de dropdown, cujo bot\u00e3o permite ao usu\u00e1rio abrir uma lista de op\u00e7\u00f5es e escolher uma delas. Para que isso fique bem assertivo no Selenium, a fun\u00e7\u00e3o \"Select\" dever\u00e1 ser importada e instanciada durante a execu\u00e7\u00e3o. O uso dela pode ser visto melhor no c\u00f3digo abaixo: from selenium.webdriver.support.ui import Select dropdown = Select ( driver . find_element ( By . ID , 'searchDropdownBox' )) #Selecionar pelo texto presente dropdown . select_by_visible_text ( 'Computadores e Inform\u00e1tica' ) #Selecionar pelo atributo value do HTML dropdown . select_by_value ( 'search-alias=computers' ) #Selecionar pelo n\u00famero dele na lista dropdown . select_by_index ( 11 ) Alertas Algumas p\u00e1ginas web podem conter alertas emitidos via JavaScript. Essas s\u00e3o telinhas que n\u00e3o possuem especificamente uma TAG em HTML, mas o Selenium ainda consegue ident\u00edfic\u00e1-las para poder interagir: Captura a caixa de di\u00e1logo: ```python alerta = driver.switch_to.alert ``` Aceita a caixa de di\u00e1logo: ```python alerta.accept(); ``` Recusa a caixa de di\u00e1logo: ```python alerta = driver.dismiss() ``` Escreve no campo da caixa de di\u00e1logo: ```python alerta.send_keys('seu texto') ```","title":"Intera\u00e7\u00f5es"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#selenium-interacoes","text":"","title":"Selenium - Intera\u00e7\u00f5es"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#importando-a-funcionalidade-dos-localizadores-suportados","text":"Para que seja poss\u00edvel usar seletores de busca, o Selenium precisa da seguinte importa\u00e7\u00e3o: from selenium.webdriver.common.by import By","title":"Importando a funcionalidade dos localizadores suportados"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#apagando-e-escrevendo-em-um-campo","text":"Durante a navega\u00e7\u00e3o em um site, existem formul\u00e1rios ou campos de busca que precisam ser preenchidos. Com isso, o primeiro passo para evitar problemas, \u00e9 apagar o campo utilizando o seguinte comando: driver . find_element ( By . ID , 'twotabsearchtextbox' ) . clear () Ap\u00f3s o campo estar limpo e pronto para receber o texto, a escrita ser\u00e1 realizada com o c\u00f3digo: driver . find_element ( By . ID , 'twotabsearchtextbox' ) . send_keys ( 'Python' )","title":"Apagando e escrevendo em um campo"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#movimentar-a-tela-para-um-elemento-scroll","text":"Alguns elementos acabam n\u00e3o carregando at\u00e9 que a tela seja movimenta para pr\u00f3ximo do mesmo. Para fazer isso, basta utilizar o c\u00f3digo a seguir: driver . find_element ( By . CLASS_NAME , 'navFooterBackToTopText' ) . location_once_scrolled_into_view","title":"Movimentar a tela para um elemento (scroll)"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#clicar-em-um-elemento","text":"Para acessar objetos na p\u00e1gina, se faz necess\u00e1rio dar cliques e isso \u00e9 permitido usando o comando: driver . find_element ( By . ID , 'nav-search-submit-button' ) . click ()","title":"Clicar em um elemento"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#extrair-textos","text":"Quando uma tag possui texto entre a abertura e o fechamento, o mesmo poder\u00e1 ser coletado atrav\u00e9s da seguinte funcionalidade: driver . find_element ( By . ID , 'glow-ingress-line2' ) . text Caso n\u00e3o exista texto entre as tags, o mesmo poder\u00e1 estar em algum atributo dela. Logo, para coletar direto de um atributo HTML, basta usar a seguinte fun\u00e7\u00e3o: driver . find_element ( By . ID , 'nav-logo-sprites' ) . get_attribute ( 'aria-label' )","title":"Extrair textos"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#printscreens","text":"Para tirar um print de algum elemento espec\u00edfico do HTML, existe o seguinte c\u00f3digo: driver . find_element ( By . ID , 'navbar' ) . screenshot ( 'menu.png' ) Caso deseje tirar um print da p\u00e1gina inteira conforme est\u00e1 sendo visto no navegador, basta utilizar a fun\u00e7\u00e3o a seguir: driver . save_screenshot ( \"screenshot.png\" )","title":"Printscreens"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#dropdowns","text":"Dentro do HTML, existe o conceito de dropdown, cujo bot\u00e3o permite ao usu\u00e1rio abrir uma lista de op\u00e7\u00f5es e escolher uma delas. Para que isso fique bem assertivo no Selenium, a fun\u00e7\u00e3o \"Select\" dever\u00e1 ser importada e instanciada durante a execu\u00e7\u00e3o. O uso dela pode ser visto melhor no c\u00f3digo abaixo: from selenium.webdriver.support.ui import Select dropdown = Select ( driver . find_element ( By . ID , 'searchDropdownBox' )) #Selecionar pelo texto presente dropdown . select_by_visible_text ( 'Computadores e Inform\u00e1tica' ) #Selecionar pelo atributo value do HTML dropdown . select_by_value ( 'search-alias=computers' ) #Selecionar pelo n\u00famero dele na lista dropdown . select_by_index ( 11 )","title":"Dropdowns"},{"location":"S02/Aula%2022.2%20-%20Selenium%20-%20Intera%C3%A7%C3%B5es/#alertas","text":"Algumas p\u00e1ginas web podem conter alertas emitidos via JavaScript. Essas s\u00e3o telinhas que n\u00e3o possuem especificamente uma TAG em HTML, mas o Selenium ainda consegue ident\u00edfic\u00e1-las para poder interagir: Captura a caixa de di\u00e1logo: ```python alerta = driver.switch_to.alert ``` Aceita a caixa de di\u00e1logo: ```python alerta.accept(); ``` Recusa a caixa de di\u00e1logo: ```python alerta = driver.dismiss() ``` Escreve no campo da caixa de di\u00e1logo: ```python alerta.send_keys('seu texto') ```","title":"Alertas"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/","text":"BeautifulSoup O que \u00e9? BeautifulSoup \u00e9 uma ferramente que permite extrair dados de arquivos HTML e XML. Como ela ir\u00e1 funcionar? Para us\u00e1-la, ser\u00e1 necess\u00e1rio \"baixar\" a p\u00e1gina web (o c\u00f3digo dela) e ai sim, ela poder\u00e1 ser acessada atrav\u00e9s da BeautifulSoup para efetuar as devidas extra\u00e7\u00f5es. A biblioteca \u00e9 excelente para extra\u00e7\u00f5es r\u00e1pidas de dados, visto que n\u00e3o precisa abrir navegador e interagir com o mesmo para conseguir coletar informa\u00e7\u00f5es. Baixando a p\u00e1gina HTML Biblioteca Embarcada - urllib Importar biblioteca para \"baixar\" o HTML da p\u00e1gina: from urllib.request import urlopen Efetuar requisi\u00e7\u00e3o da p\u00e1gina HTML: html = urlopen ( 'https://quotes.toscrape.com/' ) Resolvendo problema de certificado SSL (se houver): import ssl ssl . _create_default_https_context = ssl . _create_unverified_context Outras formas de resolver o erro de certificado SSL: https://exerror.com/urlopen-error-ssl-certificate_verify_failed-certificate-verify-failed/ Biblioteca Externa - requests Instala\u00e7\u00e3o da \"lib\" usando o gerenciador de pacotes \"pip\": pip install requests Importa\u00e7\u00e3o da \u201clib\u201d: import requests Download da p\u00e1gina HTML: html = requests . get ( 'https://quotes.toscrape.com/' ) Efetuando \"parse\" no HTML Instala\u00e7\u00e3o do \u201cparser\u201d do HTML utilizando o gerenciador de pacotes \"pip\" pip install beautifulsoup4 Importa\u00e7\u00e3o do \u201cparser\u201d de HTML from bs4 import BeautifulSoup Formatar o c\u00f3digo de HTML para \u201cparsear\u201d # Formato para quem usou urllib soup = BeautifulSoup ( html . read (), 'html.parser' ) # Formato para quem usou requests soup = BeautifulSoup ( html . text , 'html.parser' ) Acessar uma TAG diretamente soup . h1 # output: # <h1> # <a href=\"/\" style=\"text-decoration: none\">Quotes to Scrape</a> # </h1> Acessar o PRIMEIRO elemento atrav\u00e9s dos seus atributos b\u00e1sicos (ID ou CLASS) soup . find ( class_ = 'text' ) # output: # <span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span> Buscar algum elemento atrav\u00e9s do seu texto (entre TAGs) soup . find ( text = \"deep-thoughts\" ) # output: 'deep-thoughts' Buscar mais de um elemento na p\u00e1gina soup . find_all ( class_ = 'text' ) # ou soup . find_all ( 'span' , { 'class' : 'text' }) # output: [<span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span>, <span class=\"text\" itemprop=\"text\">\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d</span>, ... ] Ver atributos da TAG de HTML div = soup . find ( 'div' , { 'class' : 'quote' }) div . attrs # output: {'class': ['quote'], 'itemscope': '', 'itemtype': 'http://schema.org/CreativeWork'} Pegar atributos da TAG de HTML soup . find ( 'div' , { 'class' : 'quote' }) . get ( 'itemtype' ) # output: 'http://schema.org/CreativeWork'","title":"Aula 23 - BeautifulSoup"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#beautifulsoup","text":"","title":"BeautifulSoup"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#o-que-e","text":"BeautifulSoup \u00e9 uma ferramente que permite extrair dados de arquivos HTML e XML.","title":"O que \u00e9?"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#como-ela-ira-funcionar","text":"Para us\u00e1-la, ser\u00e1 necess\u00e1rio \"baixar\" a p\u00e1gina web (o c\u00f3digo dela) e ai sim, ela poder\u00e1 ser acessada atrav\u00e9s da BeautifulSoup para efetuar as devidas extra\u00e7\u00f5es. A biblioteca \u00e9 excelente para extra\u00e7\u00f5es r\u00e1pidas de dados, visto que n\u00e3o precisa abrir navegador e interagir com o mesmo para conseguir coletar informa\u00e7\u00f5es.","title":"Como ela ir\u00e1 funcionar?"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#baixando-a-pagina-html","text":"","title":"Baixando a p\u00e1gina HTML"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#biblioteca-embarcada-urllib","text":"Importar biblioteca para \"baixar\" o HTML da p\u00e1gina: from urllib.request import urlopen Efetuar requisi\u00e7\u00e3o da p\u00e1gina HTML: html = urlopen ( 'https://quotes.toscrape.com/' ) Resolvendo problema de certificado SSL (se houver): import ssl ssl . _create_default_https_context = ssl . _create_unverified_context Outras formas de resolver o erro de certificado SSL: https://exerror.com/urlopen-error-ssl-certificate_verify_failed-certificate-verify-failed/","title":"Biblioteca Embarcada - urllib"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#biblioteca-externa-requests","text":"Instala\u00e7\u00e3o da \"lib\" usando o gerenciador de pacotes \"pip\": pip install requests Importa\u00e7\u00e3o da \u201clib\u201d: import requests Download da p\u00e1gina HTML: html = requests . get ( 'https://quotes.toscrape.com/' )","title":"Biblioteca Externa - requests"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#efetuando-parse-no-html","text":"","title":"Efetuando \"parse\" no HTML"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#instalacao-do-parser-do-html-utilizando-o-gerenciador-de-pacotes-pip","text":"pip install beautifulsoup4","title":"Instala\u00e7\u00e3o do \u201cparser\u201d do HTML utilizando o gerenciador de pacotes \"pip\""},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#importacao-do-parser-de-html","text":"from bs4 import BeautifulSoup","title":"Importa\u00e7\u00e3o do \u201cparser\u201d de HTML"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#formatar-o-codigo-de-html-para-parsear","text":"# Formato para quem usou urllib soup = BeautifulSoup ( html . read (), 'html.parser' ) # Formato para quem usou requests soup = BeautifulSoup ( html . text , 'html.parser' )","title":"Formatar o c\u00f3digo de HTML para \u201cparsear\u201d"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#acessar-uma-tag-diretamente","text":"soup . h1 # output: # <h1> # <a href=\"/\" style=\"text-decoration: none\">Quotes to Scrape</a> # </h1>","title":"Acessar uma TAG diretamente"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#acessar-o-primeiro-elemento-atraves-dos-seus-atributos-basicos-id-ou-class","text":"soup . find ( class_ = 'text' ) # output: # <span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span>","title":"Acessar o PRIMEIRO elemento atrav\u00e9s dos seus atributos b\u00e1sicos (ID  ou CLASS)"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#buscar-algum-elemento-atraves-do-seu-texto-entre-tags","text":"soup . find ( text = \"deep-thoughts\" ) # output: 'deep-thoughts'","title":"Buscar algum elemento atrav\u00e9s do seu texto (entre TAGs)"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#buscar-mais-de-um-elemento-na-pagina","text":"soup . find_all ( class_ = 'text' ) # ou soup . find_all ( 'span' , { 'class' : 'text' }) # output: [<span class=\"text\" itemprop=\"text\">\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d</span>, <span class=\"text\" itemprop=\"text\">\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d</span>, ... ]","title":"Buscar mais de um elemento na p\u00e1gina"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#ver-atributos-da-tag-de-html","text":"div = soup . find ( 'div' , { 'class' : 'quote' }) div . attrs # output: {'class': ['quote'], 'itemscope': '', 'itemtype': 'http://schema.org/CreativeWork'}","title":"Ver atributos da TAG de HTML"},{"location":"S02/Aula%2023%20-%20BeautifulSoup/#pegar-atributos-da-tag-de-html","text":"soup . find ( 'div' , { 'class' : 'quote' }) . get ( 'itemtype' ) # output: 'http://schema.org/CreativeWork'","title":"Pegar atributos da TAG de HTML"},{"location":"S02/Aula%2024%20-%20APIs/","text":"APIs O que \u00e9 uma API? Uma forma bem pr\u00e1tica para poder entender isso, \u00e9 imaginar um restaurante. Nele existe o cliente, o gar\u00e7om e o cozinheiro. O cliente chega, senta e chama o gar\u00e7om; O gar\u00e7om vem at\u00e9 a mesa, anota o pedido e leva ao chefe de cozinha; O chefe de cozinha prepara o prato (processa o pedido); O gar\u00e7om coleta o prato pronto e leva para o cliente que pediu; O cliente final consome o prato preparado. A API seria basicamente isso, um servi\u00e7o que leva um dado, processa e devolve o resultado. As p\u00e1ginas webs s\u00e3o exemplos de servi\u00e7os, onde o navegador envia o pedido e o servidor devolve o c\u00f3digo da p\u00e1gina para que seja renderizado como imagem ao usu\u00e1rio. Quais os tipos de APIs? As APIs possuem duas modalides, estas sendo REST ou SOAP. A tecnologia REST \u00e9 mais recente e est\u00e1 sendo mais utilizada pelo mercado, j\u00e1 a SOAP foi muito utilizada por programas mais antigos (legados). Como podemos testar uma API? Programas REST Postman Insomnia SOAP SoapUI C\u00f3digo requests Instalando a \"lib\" requests pip install requests http Importando a \"lib\" http.client from http.client import HTTPSConnection urllib Importando a \"lib\" urllib.request from urllib.request import urlopen GET Explica\u00e7\u00e3o As APIs do tipo GET s\u00e3o de modelagem simples, isso \u00e9, a requisi\u00e7\u00e3o \u00e9 feita somente tendo uma URL e nela podem ser passado par\u00e2metros extras para serem efetuados filtros e ajustes no retorno devolvido por ela. Obs. : Devido a mesma ter uma facilidade na chamada, o tipo GET pode se tornar perigoso se for necess\u00e1rio passar credenciais ou dados sigilosos. Exemplo Importando a \"lib\" requests import requests Efetuando requisi\u00e7\u00e3o url = \"http://universities.hipolabs.com/search?country=brazil\" response = requests . get ( url ) Transformando o retorno em dicion\u00e1rio r_json = response . json () Interagindo com o retorno print ( r_json [ 15 ][ 'name' ]) # output: 'Universidade Regional de Blumenau' APIs Para Praticar ViaCEP JssonPlaceholder Banco Central Agify University Domains POST Explica\u00e7\u00e3o O tipo POST permite a passagem de dados/par\u00e2metros atrav\u00e9s de um \"corpo\" que fica \"mascarado\" durante o envio e o retorno. Logo, ela tem uma base mais complexa para ser utilizada, podendo at\u00e9 mesmo ter autentica\u00e7\u00f5es baseadas em Token. Obs.: Os \"corpos\" geralmente s\u00e3o no formato JSON. Exemplo Importando a \"lib\" requests e JSON import requests import json Gerando \"corpo\" da API payload = json . dumps ({ \"name\" : \"Harry Potter\" , \"job\" : \"Desenvolvedor RPA\" }) Gerando os cabe\u00e7alhos da API headers = { 'Content-Type' : 'application/json' } Efetuando requisi\u00e7\u00e3o url = \"https://reqres.in/api/users\" response = requests . post ( url , headers = headers , data = payload ) Transformando o retorno em dicion\u00e1rio r_json = response . json () Interagindo com o retorno print ( r_json . get ( 'createdAt' )) # output: '2022-05-23T19:53:22.594Z'","title":"Aula 24 - APIs"},{"location":"S02/Aula%2024%20-%20APIs/#apis","text":"","title":"APIs"},{"location":"S02/Aula%2024%20-%20APIs/#o-que-e-uma-api","text":"Uma forma bem pr\u00e1tica para poder entender isso, \u00e9 imaginar um restaurante. Nele existe o cliente, o gar\u00e7om e o cozinheiro. O cliente chega, senta e chama o gar\u00e7om; O gar\u00e7om vem at\u00e9 a mesa, anota o pedido e leva ao chefe de cozinha; O chefe de cozinha prepara o prato (processa o pedido); O gar\u00e7om coleta o prato pronto e leva para o cliente que pediu; O cliente final consome o prato preparado. A API seria basicamente isso, um servi\u00e7o que leva um dado, processa e devolve o resultado. As p\u00e1ginas webs s\u00e3o exemplos de servi\u00e7os, onde o navegador envia o pedido e o servidor devolve o c\u00f3digo da p\u00e1gina para que seja renderizado como imagem ao usu\u00e1rio.","title":"O que \u00e9 uma API?"},{"location":"S02/Aula%2024%20-%20APIs/#quais-os-tipos-de-apis","text":"As APIs possuem duas modalides, estas sendo REST ou SOAP. A tecnologia REST \u00e9 mais recente e est\u00e1 sendo mais utilizada pelo mercado, j\u00e1 a SOAP foi muito utilizada por programas mais antigos (legados).","title":"Quais os tipos de APIs?"},{"location":"S02/Aula%2024%20-%20APIs/#como-podemos-testar-uma-api","text":"","title":"Como podemos testar uma API?"},{"location":"S02/Aula%2024%20-%20APIs/#programas","text":"","title":"Programas"},{"location":"S02/Aula%2024%20-%20APIs/#rest","text":"Postman Insomnia","title":"REST"},{"location":"S02/Aula%2024%20-%20APIs/#soap","text":"SoapUI","title":"SOAP"},{"location":"S02/Aula%2024%20-%20APIs/#codigo","text":"","title":"C\u00f3digo"},{"location":"S02/Aula%2024%20-%20APIs/#requests","text":"Instalando a \"lib\" requests pip install requests","title":"requests"},{"location":"S02/Aula%2024%20-%20APIs/#http","text":"Importando a \"lib\" http.client from http.client import HTTPSConnection","title":"http"},{"location":"S02/Aula%2024%20-%20APIs/#urllib","text":"Importando a \"lib\" urllib.request from urllib.request import urlopen","title":"urllib"},{"location":"S02/Aula%2024%20-%20APIs/#get","text":"","title":"GET"},{"location":"S02/Aula%2024%20-%20APIs/#explicacao","text":"As APIs do tipo GET s\u00e3o de modelagem simples, isso \u00e9, a requisi\u00e7\u00e3o \u00e9 feita somente tendo uma URL e nela podem ser passado par\u00e2metros extras para serem efetuados filtros e ajustes no retorno devolvido por ela. Obs. : Devido a mesma ter uma facilidade na chamada, o tipo GET pode se tornar perigoso se for necess\u00e1rio passar credenciais ou dados sigilosos.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2024%20-%20APIs/#exemplo","text":"Importando a \"lib\" requests import requests Efetuando requisi\u00e7\u00e3o url = \"http://universities.hipolabs.com/search?country=brazil\" response = requests . get ( url ) Transformando o retorno em dicion\u00e1rio r_json = response . json () Interagindo com o retorno print ( r_json [ 15 ][ 'name' ]) # output: 'Universidade Regional de Blumenau'","title":"Exemplo"},{"location":"S02/Aula%2024%20-%20APIs/#apis-para-praticar","text":"ViaCEP JssonPlaceholder Banco Central Agify University Domains","title":"APIs Para Praticar"},{"location":"S02/Aula%2024%20-%20APIs/#post","text":"","title":"POST"},{"location":"S02/Aula%2024%20-%20APIs/#explicacao_1","text":"O tipo POST permite a passagem de dados/par\u00e2metros atrav\u00e9s de um \"corpo\" que fica \"mascarado\" durante o envio e o retorno. Logo, ela tem uma base mais complexa para ser utilizada, podendo at\u00e9 mesmo ter autentica\u00e7\u00f5es baseadas em Token. Obs.: Os \"corpos\" geralmente s\u00e3o no formato JSON.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%2024%20-%20APIs/#exemplo_1","text":"Importando a \"lib\" requests e JSON import requests import json Gerando \"corpo\" da API payload = json . dumps ({ \"name\" : \"Harry Potter\" , \"job\" : \"Desenvolvedor RPA\" }) Gerando os cabe\u00e7alhos da API headers = { 'Content-Type' : 'application/json' } Efetuando requisi\u00e7\u00e3o url = \"https://reqres.in/api/users\" response = requests . post ( url , headers = headers , data = payload ) Transformando o retorno em dicion\u00e1rio r_json = response . json () Interagindo com o retorno print ( r_json . get ( 'createdAt' )) # output: '2022-05-23T19:53:22.594Z'","title":"Exemplo"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/","text":"Bancos de Dados - Geral O que \u00e9 um DB? Explica\u00e7\u00e3o - Simplificada S\u00e3o programas que permitem armazenar informa\u00e7\u00f5es, credenciar respons\u00e1veis para leitura e/ou registros e o mesmo pode ter uma rotina de backup para manter c\u00f3pias de seguran\u00e7a. Explica\u00e7\u00e3o - T\u00e9cnica Um banco de dados \u00e9 uma cole\u00e7\u00e3o organizada de informa\u00e7\u00f5es - ou dados - estruturadas, normalmente armazenadas eletronicamente em um sistema de computador. Via Oracle Quais os DBs? SQLite SQL Server MariaDB MongoDB PostgreSQL MySQL Relacional x N\u00e3o Relacional Bancos de dados relacionais s\u00e3o estruturados em formatos de tabelas (similar ao Excel), basicamente contendo um cabe\u00e7alho (que representam colunas) e seus respectivo dados (que s\u00e3o as linhas). Tendo como foco as rela\u00e7\u00f5es entre tabelas atrav\u00e9s de chaves prim\u00e1rias e estrangeiras. Banco de dados N\u00c3O relacionais s\u00e3o estruturados em chave-valor, isto \u00e9, n\u00e3o existe um conceito de tabela, mas sim de registros em formato de dicion\u00e1rios. Isso permite que n\u00e3o haja relacionamentos \"travados\" entre registros. O que \u00e9 uma Query? Queries s\u00e3o scripts na linguagem SQL que permitem executar inser\u00e7\u00f5es, exclus\u00f5es, atualiza\u00e7\u00f5es e buscas na base de dados. Programas para mexer em Bancos de Dados DBeaver Beekeeper Studio SqlDbx SQL Server Management Studio","title":"Vis\u00e3o Geral"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#bancos-de-dados-geral","text":"","title":"Bancos de Dados - Geral"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#o-que-e-um-db","text":"","title":"O que \u00e9 um DB?"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#explicacao-simplificada","text":"S\u00e3o programas que permitem armazenar informa\u00e7\u00f5es, credenciar respons\u00e1veis para leitura e/ou registros e o mesmo pode ter uma rotina de backup para manter c\u00f3pias de seguran\u00e7a.","title":"Explica\u00e7\u00e3o - Simplificada"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#explicacao-tecnica","text":"Um banco de dados \u00e9 uma cole\u00e7\u00e3o organizada de informa\u00e7\u00f5es - ou dados - estruturadas, normalmente armazenadas eletronicamente em um sistema de computador. Via Oracle","title":"Explica\u00e7\u00e3o - T\u00e9cnica"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#quais-os-dbs","text":"SQLite SQL Server MariaDB MongoDB PostgreSQL MySQL","title":"Quais os DBs?"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#relacional-x-nao-relacional","text":"Bancos de dados relacionais s\u00e3o estruturados em formatos de tabelas (similar ao Excel), basicamente contendo um cabe\u00e7alho (que representam colunas) e seus respectivo dados (que s\u00e3o as linhas). Tendo como foco as rela\u00e7\u00f5es entre tabelas atrav\u00e9s de chaves prim\u00e1rias e estrangeiras. Banco de dados N\u00c3O relacionais s\u00e3o estruturados em chave-valor, isto \u00e9, n\u00e3o existe um conceito de tabela, mas sim de registros em formato de dicion\u00e1rios. Isso permite que n\u00e3o haja relacionamentos \"travados\" entre registros.","title":"Relacional x N\u00e3o Relacional"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#o-que-e-uma-query","text":"Queries s\u00e3o scripts na linguagem SQL que permitem executar inser\u00e7\u00f5es, exclus\u00f5es, atualiza\u00e7\u00f5es e buscas na base de dados.","title":"O que \u00e9 uma Query?"},{"location":"S02/Aula%2025.0%20-%20DBs%20-%20Geral/#programas-para-mexer-em-bancos-de-dados","text":"DBeaver Beekeeper Studio SqlDbx SQL Server Management Studio","title":"Programas para mexer em Bancos de Dados"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/","text":"Bases de Dados - Queries Query para cria\u00e7\u00e3o de tabela CREATE TABLE TB_NomeDesejado Query para inserir registro(s) INSERT INTO TB_NomeTabela ( coluna1 , coluna2 , coluna3 ) VALUES ( valor1 , valor2 , valor3 ) Query para deletar registro(s) DELETE FROM TB_NomeTabela WHERE coluna = valor Query para atualizar registro(s) UPDATE TB_NomeTabela SET coluna = valorY WHERE coluna = valorX Query para efetuar consulta(s) SELECT * FROM TB_NomeTabela -- Onde * representa todas as colunas","title":"Queries"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/#bases-de-dados-queries","text":"","title":"Bases de Dados - Queries"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/#query-para-criacao-de-tabela","text":"CREATE TABLE TB_NomeDesejado","title":"Query para cria\u00e7\u00e3o de tabela"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/#query-para-inserir-registros","text":"INSERT INTO TB_NomeTabela ( coluna1 , coluna2 , coluna3 ) VALUES ( valor1 , valor2 , valor3 )","title":"Query para inserir registro(s)"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/#query-para-deletar-registros","text":"DELETE FROM TB_NomeTabela WHERE coluna = valor","title":"Query para deletar registro(s)"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/#query-para-atualizar-registros","text":"UPDATE TB_NomeTabela SET coluna = valorY WHERE coluna = valorX","title":"Query para atualizar registro(s)"},{"location":"S02/Aula%2025.1%20-%20DBs%20-%20Queries/#query-para-efetuar-consultas","text":"SELECT * FROM TB_NomeTabela -- Onde * representa todas as colunas","title":"Query para efetuar consulta(s)"},{"location":"S02/Aula%2025.2%20-%20DBs%20-%20Python/","text":"Bases de Dados - Python sqlite Todo o conceito aplicado aqui foi utilizando o banco de dados sqlite, mas vale destacar que todas as demais bases relacionais possuem similaridade com o script executado atrav\u00e9s da biblioteca sqlite3. Exemplo Importar a biblioteca import sqlite3 Abrir conex\u00e3o com um banco de dados con = sqlite3 . connect ( 'example.db' ) Fechado conex\u00e3o com um banco de dados con . close () Abrir cursor em um banco de dados O cursor em um banco de dados \u00e9 o que permite a interatividade entre a linguagem de programa\u00e7\u00e3o e banco de dados. Permitindo assim, consultas, inser\u00e7\u00f5es, exclus\u00f5es e atualiza\u00e7\u00f5es nos registros. cur = con . cursor () Fechar cursor em um banco de dados cur . close () Criando uma tabela no banco de dados cur . execute ( 'CREATE TABLE \"TB_Cliente\"( \"CPF\" INTEGER NOT NULL UNIQUE, \"Nome_Completo\" TEXT NOT NULL, \"Data_Nascimento\" TEXT NOT NULL, \"Telefone\" TEXT, \"Email\" TEXT, \"CEP\" TEXT NOT NULL, PRIMARY KEY(\"CPF\"));' ) Inserindo um registro no banco de dados cur . execute ( \"INSERT INTO TB_Cliente VALUES (20955758572, 'Laura Luana Assis', '13/06/1948', '68991361938', 'lauraluanaassis-91@naressi.com.br', '69911355')\" )) con . commit () Inserindo v\u00e1rios registros no banco de dados lista_registros = [( 88190475789 , 'Jos\u00e9 Hugo Manuel Porto' , '11/07/1997' , '41989320821' , 'jjosehugomanuelporto@patriciagrillo.adv.br' , '83309270' ), ( 39962955106 , 'Marina Carolina dos Santos' , '26/09/1995' , '81984235792' , 'marinacarolinadossantos_@lukin4.com.br' , '53350130' ), ( 20955758572 , 'Laura Luana Assis' , '13/06/1948' , '68991361938' , 'lauraluanaassis-91@naressi.com.br' , '69911355' ), ( 76938977550 , 'Yasmin Evelyn Maria Costa' , '20/04/1959' , '91998657654' , 'yasminevelynmariacosta-88@yahoo.com.ar' , '66810020' ), ( 25373027375 , 'Fernando Giovanni Bernardes' , '02/03/1964' , '81989889726' , 'fernandogiovannibernardes-92@soulcomunicacao.com.br' , '51180440' ), ( 85775491947 , 'Clarice Vit\u00f3ria Teixeira' , '24/02/1958' , '82996438794' , 'claricevitoriateixeira-97@india.com' , '57052605' ), ( 4847726278 , 'Kamilly Clara Caldeira' , '21/04/1982' , '27998331799' , 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br' , '29194248' ), ( 90123303354 , 'Carolina Cl\u00e1udia Pietra da Rocha' , '14/04/1952' , '63992520221' , 'carolinaclaudiapietradarocha__carolinaclaudiapietradarocha@riguetti.com.br' , '77017297' ), ( 96558670801 , 'Levi Theo Matheus Ramos' , '04/04/1961' , '22988505045' , 'levitheomatheusramos..levitheomatheusramos@cordeiromaquinas.com.br' , '28024123' ), ( 57218723306 , 'Davi M\u00e1rcio Rafael Nogueira' , '25/07/1997' , '69991521228' , 'davimarciorafaelnogueira..davimarciorafaelnogueira@silnave.com.br' , '76964042' )] cur . executemany ( \"INSERT INTO TB_Cliente VALUES (?, ?, ?, ?, ?, ?)\" , lista_registros ) con . commit () Apagar registro no banco de dados cur . execute ( \"DELETE FROM TB_Cliente WHERE CPF = (?)\" ,( 88190475789 ,)) con . commit () Atualizar registro no banco de dados cur . execute ( \"UPDATE TB_Cliente SET Telefone = NULL, Email = NULL WHERE CPF = (?)\" , ( 39962955106 ,)) con . commit () Efetuar consulta no banco de dados cur . execute ( \"SELECT * FROM TB_Cliente\" ) # Para receber UM registro localizado cur . fetchone () # output: (116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130') # Para receber TODOS os registros localizados cur . fetchall () # output: [(116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130'), (4847726278, 'Kamilly Clara Caldeira', '21/04/1982', '27998331799', 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br', '29194248'), (7287125803, 'Eduarda Emily Almada', '20/04/1941', '32985692709', 'eduardaemilyalmada_@peopleside.com.br', '36200142')]","title":"Python"},{"location":"S02/Aula%2025.2%20-%20DBs%20-%20Python/#bases-de-dados-python","text":"","title":"Bases de Dados - Python"},{"location":"S02/Aula%2025.2%20-%20DBs%20-%20Python/#sqlite","text":"Todo o conceito aplicado aqui foi utilizando o banco de dados sqlite, mas vale destacar que todas as demais bases relacionais possuem similaridade com o script executado atrav\u00e9s da biblioteca sqlite3.","title":"sqlite"},{"location":"S02/Aula%2025.2%20-%20DBs%20-%20Python/#exemplo","text":"Importar a biblioteca import sqlite3 Abrir conex\u00e3o com um banco de dados con = sqlite3 . connect ( 'example.db' ) Fechado conex\u00e3o com um banco de dados con . close () Abrir cursor em um banco de dados O cursor em um banco de dados \u00e9 o que permite a interatividade entre a linguagem de programa\u00e7\u00e3o e banco de dados. Permitindo assim, consultas, inser\u00e7\u00f5es, exclus\u00f5es e atualiza\u00e7\u00f5es nos registros. cur = con . cursor () Fechar cursor em um banco de dados cur . close () Criando uma tabela no banco de dados cur . execute ( 'CREATE TABLE \"TB_Cliente\"( \"CPF\" INTEGER NOT NULL UNIQUE, \"Nome_Completo\" TEXT NOT NULL, \"Data_Nascimento\" TEXT NOT NULL, \"Telefone\" TEXT, \"Email\" TEXT, \"CEP\" TEXT NOT NULL, PRIMARY KEY(\"CPF\"));' ) Inserindo um registro no banco de dados cur . execute ( \"INSERT INTO TB_Cliente VALUES (20955758572, 'Laura Luana Assis', '13/06/1948', '68991361938', 'lauraluanaassis-91@naressi.com.br', '69911355')\" )) con . commit () Inserindo v\u00e1rios registros no banco de dados lista_registros = [( 88190475789 , 'Jos\u00e9 Hugo Manuel Porto' , '11/07/1997' , '41989320821' , 'jjosehugomanuelporto@patriciagrillo.adv.br' , '83309270' ), ( 39962955106 , 'Marina Carolina dos Santos' , '26/09/1995' , '81984235792' , 'marinacarolinadossantos_@lukin4.com.br' , '53350130' ), ( 20955758572 , 'Laura Luana Assis' , '13/06/1948' , '68991361938' , 'lauraluanaassis-91@naressi.com.br' , '69911355' ), ( 76938977550 , 'Yasmin Evelyn Maria Costa' , '20/04/1959' , '91998657654' , 'yasminevelynmariacosta-88@yahoo.com.ar' , '66810020' ), ( 25373027375 , 'Fernando Giovanni Bernardes' , '02/03/1964' , '81989889726' , 'fernandogiovannibernardes-92@soulcomunicacao.com.br' , '51180440' ), ( 85775491947 , 'Clarice Vit\u00f3ria Teixeira' , '24/02/1958' , '82996438794' , 'claricevitoriateixeira-97@india.com' , '57052605' ), ( 4847726278 , 'Kamilly Clara Caldeira' , '21/04/1982' , '27998331799' , 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br' , '29194248' ), ( 90123303354 , 'Carolina Cl\u00e1udia Pietra da Rocha' , '14/04/1952' , '63992520221' , 'carolinaclaudiapietradarocha__carolinaclaudiapietradarocha@riguetti.com.br' , '77017297' ), ( 96558670801 , 'Levi Theo Matheus Ramos' , '04/04/1961' , '22988505045' , 'levitheomatheusramos..levitheomatheusramos@cordeiromaquinas.com.br' , '28024123' ), ( 57218723306 , 'Davi M\u00e1rcio Rafael Nogueira' , '25/07/1997' , '69991521228' , 'davimarciorafaelnogueira..davimarciorafaelnogueira@silnave.com.br' , '76964042' )] cur . executemany ( \"INSERT INTO TB_Cliente VALUES (?, ?, ?, ?, ?, ?)\" , lista_registros ) con . commit () Apagar registro no banco de dados cur . execute ( \"DELETE FROM TB_Cliente WHERE CPF = (?)\" ,( 88190475789 ,)) con . commit () Atualizar registro no banco de dados cur . execute ( \"UPDATE TB_Cliente SET Telefone = NULL, Email = NULL WHERE CPF = (?)\" , ( 39962955106 ,)) con . commit () Efetuar consulta no banco de dados cur . execute ( \"SELECT * FROM TB_Cliente\" ) # Para receber UM registro localizado cur . fetchone () # output: (116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130') # Para receber TODOS os registros localizados cur . fetchall () # output: [(116415509, 'Analu Julia da Paz', '05/04/1974', '79982386771', 'aanalujuliadapaz@alwan.com.br', '49026130'), (4847726278, 'Kamilly Clara Caldeira', '21/04/1982', '27998331799', 'kamillyclaracaldeira__kamillyclaracaldeira@caferibeiro.com.br', '29194248'), (7287125803, 'Eduarda Emily Almada', '20/04/1941', '32985692709', 'eduardaemilyalmada_@peopleside.com.br', '36200142')]","title":"Exemplo"},{"location":"S02/Aula%2026%20-%20Orienta%C3%A7%C3%A3o%20a%20Objetos/","text":"Orienta\u00e7\u00e3o a Objetos O que \u00e9? Considerada um paradigma da programa\u00e7\u00e3o, a mesma vem com intuito de inovar o conceito de programa\u00e7\u00e3o estruturada que \u00e9 basicamente o que foi feito at\u00e9 agora no curso. Ou seja, foi trabalhado com o conceito de execu\u00e7\u00e3o sequencial, onde o c\u00f3digo \u00e9 escrito e executado de cima pra baixo (top-down). A Orienta\u00e7\u00e3o a Objetos prop\u00f5e trabalhar com entidades/objetos. Isto \u00e9, um sistema pode ser particionado no conceito base das caracter\u00edsticas\\atributos dele (def __init__()) e suas funcionalidades internas (defs). Essa abordagem visa: Aprimorar o controle de acesso \u00e0s vari\u00e1veis; Permitir o reuso de fun\u00e7\u00f5es; Permitir f\u00e1cil manuten\u00e7\u00e3o/legibilidade. Exemplo Criando um arquivo Para poder come\u00e7ar uma codifica\u00e7\u00e3o Orientada a Objetos, \u00e9 necess\u00e1rio criar um arquivo com a extens\u00e3o \".py\" contendo o nome do que vir\u00e1 \u00e0 ser o objeto. Ex.: carro.py Instanciando uma classe: A classe \u00e9 a que receber\u00e1 todos os atributos e funcionalidades \u00e0 serem realizados dentro daquele escopo espec\u00edfico no projeto. O nome da classe \u00e9 basedo no que ela far\u00e1 e ser\u00e1 escrita em PascalCase (as palavras compostas ou frases dever\u00e3o ser sem espa\u00e7os e cada palavra dever\u00e1 come\u00e7ar com a letra mai\u00fascula). class Carro : Criar os atributos da classe: Nessa etapa ser\u00e3o recebidos os atributos do objeto e \u00e9 aqui que podem ser postos fun\u00e7\u00f5es espec\u00edficas que devem ser realizadas sempre que a classe criada for chamada e tiver seus par\u00e2metros informados. def __init__ ( self , fabricante , modelo , ano = 2022 ): self . fabricante = fabricante . title () self . modelo = modelo . title () self . ano = int ( ano ) self . odometro = 0 Criar m\u00e9todos na classe: Todas as funcionalidades da classe ser\u00e3o postas aqui. Nesse caso se trata de um carro e o mesmo ter\u00e1 como foco as funcionalidades referente a sua quilometragem rodada. def nome_descritivo ( self ): print ( f \"O carro \u00e9 do ano { self . ano } , foi fabricado pelo(a) { self . fabricante } e seu modelo \u00e9 { self . modelo } .\" ) def apresenta_odometro ( self ): print ( f \"O carro possui { self . odometro } quil\u00f4metros rodados.\" ) def atualiza_odometro ( self , kms ): if kms >= self . odometro : self . odometro = kms else : print ( \"N\u00e3o \u00e9 poss\u00edvel diminuir a quilometragem rodada.\" ) def incrementa_odometro ( self , kms ): self . odometro += kms Importando uma classe criada: Para importar uma classe corretamente, \u00e9 necess\u00e1rio estar executando o script de Python no mesmo diret\u00f3rio em que ela se encontra. Isso pode ser realizado ao abrir a pasta em um ambiente de trabalho na IDE ou usando o comando \"os.chdir()\" para dizer em qual diret\u00f3rio est\u00e1 a classe. from carro import Carro Criando um objeto da classe: obj = Carro ( \"Ford\" , \"Ka\" , 2021 ) Acessando uma fun\u00e7\u00e3o da classe: obj . apresenta_odometro () # output: O carro possui 0 quil\u00f4metros rodados. Atualizando um valor da classe: obj . atualiza_odometro ( 1500 ) # output: O carro possui 0 quil\u00f4metros rodados. Acessando algum atributo da classe: obj . ano # output: 2021","title":"Aula 26 - Orienta\u00e7\u00e3o a Objetos"},{"location":"S02/Aula%2026%20-%20Orienta%C3%A7%C3%A3o%20a%20Objetos/#orientacao-a-objetos","text":"","title":"Orienta\u00e7\u00e3o a Objetos"},{"location":"S02/Aula%2026%20-%20Orienta%C3%A7%C3%A3o%20a%20Objetos/#o-que-e","text":"Considerada um paradigma da programa\u00e7\u00e3o, a mesma vem com intuito de inovar o conceito de programa\u00e7\u00e3o estruturada que \u00e9 basicamente o que foi feito at\u00e9 agora no curso. Ou seja, foi trabalhado com o conceito de execu\u00e7\u00e3o sequencial, onde o c\u00f3digo \u00e9 escrito e executado de cima pra baixo (top-down). A Orienta\u00e7\u00e3o a Objetos prop\u00f5e trabalhar com entidades/objetos. Isto \u00e9, um sistema pode ser particionado no conceito base das caracter\u00edsticas\\atributos dele (def __init__()) e suas funcionalidades internas (defs). Essa abordagem visa: Aprimorar o controle de acesso \u00e0s vari\u00e1veis; Permitir o reuso de fun\u00e7\u00f5es; Permitir f\u00e1cil manuten\u00e7\u00e3o/legibilidade.","title":"O que \u00e9?"},{"location":"S02/Aula%2026%20-%20Orienta%C3%A7%C3%A3o%20a%20Objetos/#exemplo","text":"Criando um arquivo Para poder come\u00e7ar uma codifica\u00e7\u00e3o Orientada a Objetos, \u00e9 necess\u00e1rio criar um arquivo com a extens\u00e3o \".py\" contendo o nome do que vir\u00e1 \u00e0 ser o objeto. Ex.: carro.py Instanciando uma classe: A classe \u00e9 a que receber\u00e1 todos os atributos e funcionalidades \u00e0 serem realizados dentro daquele escopo espec\u00edfico no projeto. O nome da classe \u00e9 basedo no que ela far\u00e1 e ser\u00e1 escrita em PascalCase (as palavras compostas ou frases dever\u00e3o ser sem espa\u00e7os e cada palavra dever\u00e1 come\u00e7ar com a letra mai\u00fascula). class Carro : Criar os atributos da classe: Nessa etapa ser\u00e3o recebidos os atributos do objeto e \u00e9 aqui que podem ser postos fun\u00e7\u00f5es espec\u00edficas que devem ser realizadas sempre que a classe criada for chamada e tiver seus par\u00e2metros informados. def __init__ ( self , fabricante , modelo , ano = 2022 ): self . fabricante = fabricante . title () self . modelo = modelo . title () self . ano = int ( ano ) self . odometro = 0 Criar m\u00e9todos na classe: Todas as funcionalidades da classe ser\u00e3o postas aqui. Nesse caso se trata de um carro e o mesmo ter\u00e1 como foco as funcionalidades referente a sua quilometragem rodada. def nome_descritivo ( self ): print ( f \"O carro \u00e9 do ano { self . ano } , foi fabricado pelo(a) { self . fabricante } e seu modelo \u00e9 { self . modelo } .\" ) def apresenta_odometro ( self ): print ( f \"O carro possui { self . odometro } quil\u00f4metros rodados.\" ) def atualiza_odometro ( self , kms ): if kms >= self . odometro : self . odometro = kms else : print ( \"N\u00e3o \u00e9 poss\u00edvel diminuir a quilometragem rodada.\" ) def incrementa_odometro ( self , kms ): self . odometro += kms Importando uma classe criada: Para importar uma classe corretamente, \u00e9 necess\u00e1rio estar executando o script de Python no mesmo diret\u00f3rio em que ela se encontra. Isso pode ser realizado ao abrir a pasta em um ambiente de trabalho na IDE ou usando o comando \"os.chdir()\" para dizer em qual diret\u00f3rio est\u00e1 a classe. from carro import Carro Criando um objeto da classe: obj = Carro ( \"Ford\" , \"Ka\" , 2021 ) Acessando uma fun\u00e7\u00e3o da classe: obj . apresenta_odometro () # output: O carro possui 0 quil\u00f4metros rodados. Atualizando um valor da classe: obj . atualiza_odometro ( 1500 ) # output: O carro possui 0 quil\u00f4metros rodados. Acessando algum atributo da classe: obj . ano # output: 2021","title":"Exemplo"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/","text":"Vari\u00e1veis O que \u00e9 uma vari\u00e1vel (e para que serve)? Explica\u00e7\u00e3o Simplificada \u00c9 uma palavra (simples ou composta) utilizada para armazenar algum valor que poder\u00e1 ser utilizado posteriormente pelo c\u00f3digo. Se assemelha ao conceito de carteira, onde s\u00e3o armazenados cart\u00f5es/c\u00e9dulas de dinheiro para ser usufruido quando necess\u00e1rio. T\u00e9cnica Na programa\u00e7\u00e3o, uma vari\u00e1vel \u00e9 um objeto (uma posi\u00e7\u00e3o, frequentemente localizada na mem\u00f3ria) capaz de reter e representar um valor ou express\u00e3o. Enquanto as vari\u00e1veis s\u00f3 \"existem\" em tempo de execu\u00e7\u00e3o, elas s\u00e3o associadas a \"nomes\", chamados identificadores, durante o tempo de desenvolvimento. Via: Wikipedia Qual a forma certa de escrita de uma vari\u00e1vel? Explica\u00e7\u00e3o No Python \u00e9 utilizado o formato snake_case para os casos onde possui uma nomenclatura composta (com mais de um palavra) e sempre ser\u00e1 com letras min\u00fasculas . Esse formato \u00e9 chamado de \"Pythonico\" . Obs.: Vale frisar que em \u00e2mbito corporativo, \u00e9 sempre indicado usar termos em ingl\u00eas para que o c\u00f3digo fique de forma globalizada. Exemplo nome = \"Jo\u00e3o\" # ou idade = 18 # ou nome_do_arquivo = \"boleto.pdf\" # ou numero_do_contrato = 123456789 Quais os tipos de vari\u00e1veis? int (eger): S\u00e3o valores inteiros. Ex.: 1, 1, 2, 3, 5, 8, ... str (ing): S\u00e3o palavras/textos. Ex.: Lorem Ipsum float : S\u00e3o valores \"quebrados\", isto \u00e9, com casas decimais. Ex.: 3.14159265359 bool (ean): S\u00e3o valida\u00e7\u00f5es para perguntas fechadas, podendo ser \"Verdadeiro\" ou \"Falso\". Ex.: True, False. Como converter? String para Integer: Vale destacar que isso s\u00f3 \u00e9 permitido atrav\u00e9s de n\u00fameros no formato string para integer. Ex.: idade = int(\"12\") Integer para String: Ex.: cm = str(25) Integer para Boolean Vale destacar que essa convers\u00e3o s\u00f3 ir\u00e1 funcionar efetivamente com os n\u00fameros 0 e 1 . 0: N\u00e3o 1: Sim Obs.: Caso deseje usar n\u00fameros maiores que 1, o resultado sempre ser\u00e1 \"True\" . Ex.: variavel = bool(1) # ou variavel = bool(0) Integer para Float Ex.: volume = float ( 25 ) Float para Integer Ex.: pi = int ( 3.14 ) Float para String Ex.: peso = str ( 78.6 ) String para Float Ex.: altura = \"1.82\" altura = float ( altura ) # ou altura = \"1,82\" altura = altura . replace ( ',' , '.' ) altura = float ( altura ) String para Boolean Essa convers\u00e3o sempre ir\u00e1 validar se existe algum valor \u00e0 ser convertido, logo, sempre ser\u00e1 \"True\" se n\u00e3o estiver vazio. Ex.: ```python teste = bool(\"valor\") # ou teste = bool() ```","title":"Vis\u00e3o Geral"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#variaveis","text":"","title":"Vari\u00e1veis"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#o-que-e-uma-variavel-e-para-que-serve","text":"","title":"O que \u00e9 uma vari\u00e1vel (e para que serve)?"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#explicacao","text":"","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#simplificada","text":"\u00c9 uma palavra (simples ou composta) utilizada para armazenar algum valor que poder\u00e1 ser utilizado posteriormente pelo c\u00f3digo. Se assemelha ao conceito de carteira, onde s\u00e3o armazenados cart\u00f5es/c\u00e9dulas de dinheiro para ser usufruido quando necess\u00e1rio.","title":"Simplificada"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#tecnica","text":"Na programa\u00e7\u00e3o, uma vari\u00e1vel \u00e9 um objeto (uma posi\u00e7\u00e3o, frequentemente localizada na mem\u00f3ria) capaz de reter e representar um valor ou express\u00e3o. Enquanto as vari\u00e1veis s\u00f3 \"existem\" em tempo de execu\u00e7\u00e3o, elas s\u00e3o associadas a \"nomes\", chamados identificadores, durante o tempo de desenvolvimento. Via: Wikipedia","title":"T\u00e9cnica"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#qual-a-forma-certa-de-escrita-de-uma-variavel","text":"","title":"Qual a forma certa de escrita de uma vari\u00e1vel?"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#explicacao_1","text":"No Python \u00e9 utilizado o formato snake_case para os casos onde possui uma nomenclatura composta (com mais de um palavra) e sempre ser\u00e1 com letras min\u00fasculas . Esse formato \u00e9 chamado de \"Pythonico\" . Obs.: Vale frisar que em \u00e2mbito corporativo, \u00e9 sempre indicado usar termos em ingl\u00eas para que o c\u00f3digo fique de forma globalizada.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#exemplo","text":"nome = \"Jo\u00e3o\" # ou idade = 18 # ou nome_do_arquivo = \"boleto.pdf\" # ou numero_do_contrato = 123456789","title":"Exemplo"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#quais-os-tipos-de-variaveis","text":"int (eger): S\u00e3o valores inteiros. Ex.: 1, 1, 2, 3, 5, 8, ... str (ing): S\u00e3o palavras/textos. Ex.: Lorem Ipsum float : S\u00e3o valores \"quebrados\", isto \u00e9, com casas decimais. Ex.: 3.14159265359 bool (ean): S\u00e3o valida\u00e7\u00f5es para perguntas fechadas, podendo ser \"Verdadeiro\" ou \"Falso\". Ex.: True, False.","title":"Quais os tipos de vari\u00e1veis?"},{"location":"S02/Aula%203%20-%20Vari%C3%A1veis/#como-converter","text":"String para Integer: Vale destacar que isso s\u00f3 \u00e9 permitido atrav\u00e9s de n\u00fameros no formato string para integer. Ex.: idade = int(\"12\") Integer para String: Ex.: cm = str(25) Integer para Boolean Vale destacar que essa convers\u00e3o s\u00f3 ir\u00e1 funcionar efetivamente com os n\u00fameros 0 e 1 . 0: N\u00e3o 1: Sim Obs.: Caso deseje usar n\u00fameros maiores que 1, o resultado sempre ser\u00e1 \"True\" . Ex.: variavel = bool(1) # ou variavel = bool(0) Integer para Float Ex.: volume = float ( 25 ) Float para Integer Ex.: pi = int ( 3.14 ) Float para String Ex.: peso = str ( 78.6 ) String para Float Ex.: altura = \"1.82\" altura = float ( altura ) # ou altura = \"1,82\" altura = altura . replace ( ',' , '.' ) altura = float ( altura ) String para Boolean Essa convers\u00e3o sempre ir\u00e1 validar se existe algum valor \u00e0 ser convertido, logo, sempre ser\u00e1 \"True\" se n\u00e3o estiver vazio. Ex.: ```python teste = bool(\"valor\") # ou teste = bool() ```","title":"Como converter?"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/","text":"Manipula\u00e7\u00e3o de Strings Strings Vazias Tem como objetivo esvaziar uma vari\u00e1vel criada anteriormente ou servir como valida\u00e7\u00e3o para caso n\u00e3o seja localizado nenhuma correspond\u00eancia durante uma coleta de dados em strings . variavel_vazia = \"\" # ou variavel_vazia = None Cortando uma String Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Cortar o texto selecionando do come\u00e7o ao caractere \"X\": paragrafo [: 50 ] # output: 'Lorem Ipsum is simply dummy text of the printing a' Cortar o texto selecionando do caractere \"X\" at\u00e9 o final: paragrafo [ 30 :] # output: 'xt of the printing and typesetting industry.' Cortar o texto selecionando do caractere \"X\" at\u00e9 o \"Y\": paragrafo [ 30 : 50 ] # output: 'xt of the printing a' Localizar uma letra ou palavra Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Buscar a letra ou palavra desejada: paragrafo . find ( 't' ) # output: 28 paragrafo . find ( 'printing' ) # output: 40 Checar se uma palavra existe ou n\u00e3o existe Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Buscar a letra ou palavra desejada: \"Lorem Ipsum\" in paragrafo # output: True \"Python\" not in paragrafo # output: True Deixar um texto com letras mai\u00fasculas ou min\u00fasculas Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Deixando letras mai\u00fasculas : paragrafo . upper () # output: 'LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY.' Deixando letras min\u00fasculas : paragrafo . lower () # output: 'lorem ipsum is simply dummy text of the printing and typesetting industry.' Deixando o texto em formato de par\u00e1grafo ou t\u00edtulo Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Deixando em formato de t\u00edtulo: paragrafo . title () # output: 'Lorem Ipsum Is Simply Dummy Text Of The Printing And Typesetting Industry.' Deixando em formato de par\u00e1grafo: paragrafo . capitalize () # output: 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' Checagem de palavra no come\u00e7o ou no final Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Validar uma palavra no come\u00e7o: paragrafo . startswith ( \"Lorem\" ) # output: True paragrafo . startswith ( \"Python\" ) # output: False Validar uma palavra no come\u00e7o: paragrafo . endswith ( \".\" ) # output: True paragrafo . endswith ( \"ipsum\" ) # output: False Texto para lista e vice e versa Separar uma string em list atrav\u00e9s de um delimitador: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" paragrafo . split ( \" \" ) # output: ['Lorem', 'Ipsum', 'is', 'simply', 'dummy', 'text', 'of', 'the', 'printing', 'and', 'typesetting', 'industry.'] Juntar uma list em string atrav\u00e9s de um delimitador: paragrafo = [ 'Lorem' , 'Ipsum' , 'is' , 'simply' , 'dummy' , 'text' , 'of' , 'the' , 'printing' , 'and' , 'typesetting' , 'industry.' ] \";\" . join ( paragrafo ) # output: 'Lorem;Ipsum;is;simply;dummy;text;of;the;printing;and;typesetting;industry.' Preenchimento com zeros Gerar uma vari\u00e1vel com o texto: cpf_sem_mascara = \"123456789\" Completar com zeros at\u00e9 chegar no limite de caracteres Esse limite \u00e9 inserido durante a chamada da fun\u00e7\u00e3o. cpf_sem_mascara . zfill ( 11 ) # output: '00123456789' Limpas espa\u00e7os indevidos no come\u00e7o e no final de uma palavra/texto Gerar uma vari\u00e1vel com o texto: texto = \" O Real \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil. \" Limpar espa\u00e7os extras no come\u00e7o e no final: texto . strip () # output: 'O Real (ISO 4217: BRL, abreviado como R$[4]) \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil.' Trocar ou eliminar alguma palavra ou frase Gerar uma vari\u00e1vel com o texto: texto = \"O Real \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil.\" Substituir o(s) valor(es) desejado(s): texto . replace ( 'Real' , 'D\u00d3LAR N\u00c3O' ) # output: 'O D\u00d3LAR N\u00c3O \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil.'","title":"Manipula\u00e7\u00e3o de Strings"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#manipulacao-de-strings","text":"","title":"Manipula\u00e7\u00e3o de Strings"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#strings-vazias","text":"Tem como objetivo esvaziar uma vari\u00e1vel criada anteriormente ou servir como valida\u00e7\u00e3o para caso n\u00e3o seja localizado nenhuma correspond\u00eancia durante uma coleta de dados em strings . variavel_vazia = \"\" # ou variavel_vazia = None","title":"Strings Vazias"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#cortando-uma-string","text":"Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Cortar o texto selecionando do come\u00e7o ao caractere \"X\": paragrafo [: 50 ] # output: 'Lorem Ipsum is simply dummy text of the printing a' Cortar o texto selecionando do caractere \"X\" at\u00e9 o final: paragrafo [ 30 :] # output: 'xt of the printing and typesetting industry.' Cortar o texto selecionando do caractere \"X\" at\u00e9 o \"Y\": paragrafo [ 30 : 50 ] # output: 'xt of the printing a'","title":"Cortando uma String"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#localizar-uma-letra-ou-palavra","text":"Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Buscar a letra ou palavra desejada: paragrafo . find ( 't' ) # output: 28 paragrafo . find ( 'printing' ) # output: 40","title":"Localizar uma letra ou palavra"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#checar-se-uma-palavra-existe-ou-nao-existe","text":"Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Buscar a letra ou palavra desejada: \"Lorem Ipsum\" in paragrafo # output: True \"Python\" not in paragrafo # output: True","title":"Checar se uma palavra existe ou n\u00e3o existe"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#deixar-um-texto-com-letras-maiusculas-ou-minusculas","text":"Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Deixando letras mai\u00fasculas : paragrafo . upper () # output: 'LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY.' Deixando letras min\u00fasculas : paragrafo . lower () # output: 'lorem ipsum is simply dummy text of the printing and typesetting industry.'","title":"Deixar um texto com letras mai\u00fasculas ou min\u00fasculas"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#deixando-o-texto-em-formato-de-paragrafo-ou-titulo","text":"Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Deixando em formato de t\u00edtulo: paragrafo . title () # output: 'Lorem Ipsum Is Simply Dummy Text Of The Printing And Typesetting Industry.' Deixando em formato de par\u00e1grafo: paragrafo . capitalize () # output: 'Lorem ipsum is simply dummy text of the printing and typesetting industry.'","title":"Deixando o texto em formato de par\u00e1grafo ou t\u00edtulo"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#checagem-de-palavra-no-comeco-ou-no-final","text":"Gerar uma vari\u00e1vel com o texto: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" Validar uma palavra no come\u00e7o: paragrafo . startswith ( \"Lorem\" ) # output: True paragrafo . startswith ( \"Python\" ) # output: False Validar uma palavra no come\u00e7o: paragrafo . endswith ( \".\" ) # output: True paragrafo . endswith ( \"ipsum\" ) # output: False","title":"Checagem de palavra no come\u00e7o ou no final"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#texto-para-lista-e-vice-e-versa","text":"Separar uma string em list atrav\u00e9s de um delimitador: paragrafo = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" paragrafo . split ( \" \" ) # output: ['Lorem', 'Ipsum', 'is', 'simply', 'dummy', 'text', 'of', 'the', 'printing', 'and', 'typesetting', 'industry.'] Juntar uma list em string atrav\u00e9s de um delimitador: paragrafo = [ 'Lorem' , 'Ipsum' , 'is' , 'simply' , 'dummy' , 'text' , 'of' , 'the' , 'printing' , 'and' , 'typesetting' , 'industry.' ] \";\" . join ( paragrafo ) # output: 'Lorem;Ipsum;is;simply;dummy;text;of;the;printing;and;typesetting;industry.'","title":"Texto para lista e vice e versa"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#preenchimento-com-zeros","text":"Gerar uma vari\u00e1vel com o texto: cpf_sem_mascara = \"123456789\" Completar com zeros at\u00e9 chegar no limite de caracteres Esse limite \u00e9 inserido durante a chamada da fun\u00e7\u00e3o. cpf_sem_mascara . zfill ( 11 ) # output: '00123456789'","title":"Preenchimento com zeros"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#limpas-espacos-indevidos-no-comeco-e-no-final-de-uma-palavratexto","text":"Gerar uma vari\u00e1vel com o texto: texto = \" O Real \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil. \" Limpar espa\u00e7os extras no come\u00e7o e no final: texto . strip () # output: 'O Real (ISO 4217: BRL, abreviado como R$[4]) \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil.'","title":"Limpas espa\u00e7os indevidos no come\u00e7o e no final de uma palavra/texto"},{"location":"S02/Aula%203.1%20-%20Manipula%C3%A7%C3%A3o%20de%20Strings/#trocar-ou-eliminar-alguma-palavra-ou-frase","text":"Gerar uma vari\u00e1vel com o texto: texto = \"O Real \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil.\" Substituir o(s) valor(es) desejado(s): texto . replace ( 'Real' , 'D\u00d3LAR N\u00c3O' ) # output: 'O D\u00d3LAR N\u00c3O \u00e9 a moeda corrente oficial da Rep\u00fablica Federativa do Brasil.'","title":"Trocar ou eliminar alguma palavra ou frase"},{"location":"S02/Aula%204%20-%20Variaveis%20Compostas/","text":"O que \u00e9 uma vari\u00e1vel composta (e para que serve)? Explica\u00e7\u00e3o - Simplificada Assim como \u00e9 poss\u00edvel armazenar um valor dentro da vari\u00e1vel, o Python tamb\u00e9m permite armazenar v\u00e1rios valores dentro de uma \u00fanica vari\u00e1vel. Ex.: Uma lista de compras pode conter um ou mais produtos, ou seja, a vari\u00e1vel consegue comportar N valores para serem acessados posteriormente. Quais os tipos de vari\u00e1veis compostas? tuple : Armazena N valores e s\u00e3o imut\u00e1veis . \u00c9 representada por par\u00eanteses . Ex.: frutas = ( 'Lim\u00e3o' , 'Ma\u00e7a' , 'Melancia' , 'Banana' ) list : Armazena N valores e s\u00e3o mut\u00e1veis . \u00c9 representada por colchetes . Ex.: nomes = [ 'Thomas' , 'Matheus' , 'Felipe' , 'Fernanda' ] set : Armazena N valores, s\u00e3o imut\u00e1veis e n\u00e3o permite duplicatas . \u00c9 representada por chaves . Ex.: numeros = { 1 , 2 , 3 , 4 , 5 } dict : Armazena N valores, tendo como princ\u00edpio uma chave e um valor , podendo tamb\u00e9m ter uma chave para v\u00e1rios valores (lista). \u00c9 mut\u00e1vel . E \u00e9 representada por chaves e dois pontos . Ex.: objetos = { 'Morango' : '\u00c9 uma fruta' , 'Caneca' : '\u00c9 um objeto' , 'Carro' : '\u00c9 um automovel' } Listas Cria uma lista alunos = [ 'Marcos' , 'Henrique' , 'Julia' , 'Guilherme' ] Retira um valor da lista pelo \u00edndice alunos . pop ( - 1 ) print ( alunos ) # output: ['Marcos', 'Henrique', 'Julia'] Retira um valor da lista pelo nome alunos . remove ( 'Marcos' ) print ( alunos ) # output: ['Henrique', 'Julia'] Acrescenta um novo valor na lista alunos . append ( 'Renan' ) print ( alunos ) # output: ['Henrique', 'Julia', 'Renan'] Consulta valores na lista pelo \u00edndice alunos [ 1 ] # output: 'Julia' alunos [ 1 : 3 ] # output: ['Julia', 'Renan'] alunos [ 0 ] # output: 'Henrique' alunos [ - 1 ] # output: 'Renan' Valida o tamanho da lista len ( alunos ) # output: 3 Dicionario Cria um dicion\u00e1rio contatos = { 'Marcos' : '1234-5678' , 'Henrique' : '9999-9999' , 'Julia' : '8765-4321' , 'Guilherme' : '8877-7788' } Emite todas as chaves do dicion\u00e1rio contatos . keys () # output: dict_keys(['Marcos', 'Henrique', 'Julia', 'Guilherme']) Emite todos os valores de cada chave do dicion\u00e1rio contatos . values () # output: dict_values(['1234-5678', '9999-9999', '8765-4321', '8877-7788']) Emite todos os valores registrados no dicionario - (chave(s) e valor(es)) contatos . items () # output: dict_items([('Marcos', '1234-5678'), ('Henrique', '9999-9999'), ('Julia', '8765-4321'), ('Guilherme', '8877-7788')]) Deleta valores atrav\u00e9s da chave: del ( contatos [ 'Marcos' ]) # output: {'Henrique': '9999-9999', 'Julia': '8765-4321', 'Guilherme': '8877-7788'} Acessa valores de uma chave: contatos . get ( 'Julia' ) # output: '8765-4321' # ou contatos [ 'Julia' ] # output: '8765-4321' Adiciona uma nova chave com seu respectivo valor contatos [ 'Ana' ] = '0000-9999' print ( contatos ) # output: {'Marcos': '1234-5678', 'Henrique': '9999-9999', 'Julia': '8765-4321', 'Guilherme': '8877-7788', 'Ana': '0000-9999'} Cria um dicion\u00e1rio atrav\u00e9s de uma lista de tuplas contatos_listas = [ ( 'Marcos' , '1234-5678' ), ( 'Henrique' , '9999-9999' ), ( 'Julia' , '8765-4321' ), ( 'Guilherme' , '8877-7788' ) ] contatos = dict ( contatos_listas ) print ( contatos ) # output: {'Marcos': '1234-5678', 'Henrique': '9999-9999', 'Julia': '8765-4321', 'Guilherme': '8877-7788'}","title":"Aula 4 - Variaveis Compostas"},{"location":"S02/Aula%204%20-%20Variaveis%20Compostas/#o-que-e-uma-variavel-composta-e-para-que-serve","text":"","title":"O que \u00e9 uma vari\u00e1vel composta (e para que serve)?"},{"location":"S02/Aula%204%20-%20Variaveis%20Compostas/#explicacao-simplificada","text":"Assim como \u00e9 poss\u00edvel armazenar um valor dentro da vari\u00e1vel, o Python tamb\u00e9m permite armazenar v\u00e1rios valores dentro de uma \u00fanica vari\u00e1vel. Ex.: Uma lista de compras pode conter um ou mais produtos, ou seja, a vari\u00e1vel consegue comportar N valores para serem acessados posteriormente.","title":"Explica\u00e7\u00e3o - Simplificada"},{"location":"S02/Aula%204%20-%20Variaveis%20Compostas/#quais-os-tipos-de-variaveis-compostas","text":"tuple : Armazena N valores e s\u00e3o imut\u00e1veis . \u00c9 representada por par\u00eanteses . Ex.: frutas = ( 'Lim\u00e3o' , 'Ma\u00e7a' , 'Melancia' , 'Banana' ) list : Armazena N valores e s\u00e3o mut\u00e1veis . \u00c9 representada por colchetes . Ex.: nomes = [ 'Thomas' , 'Matheus' , 'Felipe' , 'Fernanda' ] set : Armazena N valores, s\u00e3o imut\u00e1veis e n\u00e3o permite duplicatas . \u00c9 representada por chaves . Ex.: numeros = { 1 , 2 , 3 , 4 , 5 } dict : Armazena N valores, tendo como princ\u00edpio uma chave e um valor , podendo tamb\u00e9m ter uma chave para v\u00e1rios valores (lista). \u00c9 mut\u00e1vel . E \u00e9 representada por chaves e dois pontos . Ex.: objetos = { 'Morango' : '\u00c9 uma fruta' , 'Caneca' : '\u00c9 um objeto' , 'Carro' : '\u00c9 um automovel' }","title":"Quais os tipos de vari\u00e1veis compostas?"},{"location":"S02/Aula%204%20-%20Variaveis%20Compostas/#listas","text":"Cria uma lista alunos = [ 'Marcos' , 'Henrique' , 'Julia' , 'Guilherme' ] Retira um valor da lista pelo \u00edndice alunos . pop ( - 1 ) print ( alunos ) # output: ['Marcos', 'Henrique', 'Julia'] Retira um valor da lista pelo nome alunos . remove ( 'Marcos' ) print ( alunos ) # output: ['Henrique', 'Julia'] Acrescenta um novo valor na lista alunos . append ( 'Renan' ) print ( alunos ) # output: ['Henrique', 'Julia', 'Renan'] Consulta valores na lista pelo \u00edndice alunos [ 1 ] # output: 'Julia' alunos [ 1 : 3 ] # output: ['Julia', 'Renan'] alunos [ 0 ] # output: 'Henrique' alunos [ - 1 ] # output: 'Renan' Valida o tamanho da lista len ( alunos ) # output: 3","title":"Listas"},{"location":"S02/Aula%204%20-%20Variaveis%20Compostas/#dicionario","text":"Cria um dicion\u00e1rio contatos = { 'Marcos' : '1234-5678' , 'Henrique' : '9999-9999' , 'Julia' : '8765-4321' , 'Guilherme' : '8877-7788' } Emite todas as chaves do dicion\u00e1rio contatos . keys () # output: dict_keys(['Marcos', 'Henrique', 'Julia', 'Guilherme']) Emite todos os valores de cada chave do dicion\u00e1rio contatos . values () # output: dict_values(['1234-5678', '9999-9999', '8765-4321', '8877-7788']) Emite todos os valores registrados no dicionario - (chave(s) e valor(es)) contatos . items () # output: dict_items([('Marcos', '1234-5678'), ('Henrique', '9999-9999'), ('Julia', '8765-4321'), ('Guilherme', '8877-7788')]) Deleta valores atrav\u00e9s da chave: del ( contatos [ 'Marcos' ]) # output: {'Henrique': '9999-9999', 'Julia': '8765-4321', 'Guilherme': '8877-7788'} Acessa valores de uma chave: contatos . get ( 'Julia' ) # output: '8765-4321' # ou contatos [ 'Julia' ] # output: '8765-4321' Adiciona uma nova chave com seu respectivo valor contatos [ 'Ana' ] = '0000-9999' print ( contatos ) # output: {'Marcos': '1234-5678', 'Henrique': '9999-9999', 'Julia': '8765-4321', 'Guilherme': '8877-7788', 'Ana': '0000-9999'} Cria um dicion\u00e1rio atrav\u00e9s de uma lista de tuplas contatos_listas = [ ( 'Marcos' , '1234-5678' ), ( 'Henrique' , '9999-9999' ), ( 'Julia' , '8765-4321' ), ( 'Guilherme' , '8877-7788' ) ] contatos = dict ( contatos_listas ) print ( contatos ) # output: {'Marcos': '1234-5678', 'Henrique': '9999-9999', 'Julia': '8765-4321', 'Guilherme': '8877-7788'}","title":"Dicionario"},{"location":"S02/Aula%205%20-%20Identa%C3%A7%C3%A3o%20e%20Condicionais/","text":"Identa\u00e7\u00e3o e Condicionais Identa\u00e7\u00e3o Em muitas linguagens de programa\u00e7\u00e3o, ao utilizarmos alguma fun\u00e7\u00e3o que exija mais de uma linha, \u00e9 posto um s\u00edmbolo que delimite seu come\u00e7o e fim. No Python, usamos os dois pontos e uma identa\u00e7\u00e3o (tecla TAB) para dizer o que est\u00e1 dentro da funcionalidade que estamos chamando. Vamos ver isso na pr\u00e1tica com as condi\u00e7\u00f5es. Condicionais Assim como nem tudo s\u00f3 \u00e9 verdadeiro ou falso, na linguagem de programa\u00e7\u00e3o tamb\u00e9m pode-se ter tomadas de decis\u00e3o para que o c\u00f3digo realize determinadas a\u00e7\u00f5es quando tiver algum comportamento especificado. O condicional \u00e9 composto de: if (a primeira condi\u00e7\u00e3o do c\u00f3digo) elif (uma ou mais condi\u00e7\u00f5es durante as valida\u00e7\u00f5es) else (condi\u00e7\u00e3o final a qual ser\u00e1 ativada se nenhuma das verifica\u00e7\u00f5es acima forem verdadeira) A sintaxe m\u00ednima de uma condicional possui um if e um else : if idade >= 18 : print ( 'Maioridade' ) else : print ( 'Menoridade' ) J\u00e1 quando \u00e9 necess\u00e1rio ter caminhos alternativos, deve ser utilizado o elif : if idade >= 16 and idade < 18 : print ( 'Voc\u00ea est\u00e1 perto da maioridade, seu voto \u00e9 OPCIONAL!' ) elif idade >= 18 and idade < 70 : print ( 'Voc\u00ea \u00e9 de maior e seu voto \u00e9 OBRIGAT\u00d3RIO!' ) elif idade >= 70 : print ( 'Voc\u00ea j\u00e1 nos ajudou bastante at\u00e9 agora, seu voto agora \u00e9 OPCIONAL!' ) else : print ( 'Infelizmente voc\u00ea AINDA N\u00c3O est\u00e1 com a idade m\u00ednima para votar.' )","title":"Aula 5 - Identa\u00e7\u00e3o e Condicionais"},{"location":"S02/Aula%205%20-%20Identa%C3%A7%C3%A3o%20e%20Condicionais/#identacao-e-condicionais","text":"","title":"Identa\u00e7\u00e3o e Condicionais"},{"location":"S02/Aula%205%20-%20Identa%C3%A7%C3%A3o%20e%20Condicionais/#identacao","text":"Em muitas linguagens de programa\u00e7\u00e3o, ao utilizarmos alguma fun\u00e7\u00e3o que exija mais de uma linha, \u00e9 posto um s\u00edmbolo que delimite seu come\u00e7o e fim. No Python, usamos os dois pontos e uma identa\u00e7\u00e3o (tecla TAB) para dizer o que est\u00e1 dentro da funcionalidade que estamos chamando. Vamos ver isso na pr\u00e1tica com as condi\u00e7\u00f5es.","title":"Identa\u00e7\u00e3o"},{"location":"S02/Aula%205%20-%20Identa%C3%A7%C3%A3o%20e%20Condicionais/#condicionais","text":"Assim como nem tudo s\u00f3 \u00e9 verdadeiro ou falso, na linguagem de programa\u00e7\u00e3o tamb\u00e9m pode-se ter tomadas de decis\u00e3o para que o c\u00f3digo realize determinadas a\u00e7\u00f5es quando tiver algum comportamento especificado. O condicional \u00e9 composto de: if (a primeira condi\u00e7\u00e3o do c\u00f3digo) elif (uma ou mais condi\u00e7\u00f5es durante as valida\u00e7\u00f5es) else (condi\u00e7\u00e3o final a qual ser\u00e1 ativada se nenhuma das verifica\u00e7\u00f5es acima forem verdadeira) A sintaxe m\u00ednima de uma condicional possui um if e um else : if idade >= 18 : print ( 'Maioridade' ) else : print ( 'Menoridade' ) J\u00e1 quando \u00e9 necess\u00e1rio ter caminhos alternativos, deve ser utilizado o elif : if idade >= 16 and idade < 18 : print ( 'Voc\u00ea est\u00e1 perto da maioridade, seu voto \u00e9 OPCIONAL!' ) elif idade >= 18 and idade < 70 : print ( 'Voc\u00ea \u00e9 de maior e seu voto \u00e9 OBRIGAT\u00d3RIO!' ) elif idade >= 70 : print ( 'Voc\u00ea j\u00e1 nos ajudou bastante at\u00e9 agora, seu voto agora \u00e9 OPCIONAL!' ) else : print ( 'Infelizmente voc\u00ea AINDA N\u00c3O est\u00e1 com a idade m\u00ednima para votar.' )","title":"Condicionais"},{"location":"S02/Aula%206%20-%20Operadores%20Aritm%C3%A9ticos/","text":"Operadores Aritm\u00e9ticos Explica\u00e7\u00e3o O Python \u00e9 uma linguagem de programa\u00e7\u00e3o extremamente poderosa no assunto \"estat\u00edstica\", com isso, o mesmo permite fazer opera\u00e7\u00f5es matem\u00e1ticas de pequeno e grande porte. Tipos de Operadores Aritm\u00e9ticos Adi\u00e7\u00e3o a = 10 b = 8 soma = a + b print ( soma ) # output: 18 Subtra\u00e7\u00e3o a = 10 b = 8 sub = a - b print ( sub ) # output: 2 Multiplica\u00e7\u00e3o a = 10 b = 8 mult = a b print ( mult ) # output: 80 Divis\u00e3o a = 10 b = 8 div = a / b print ( div ) # output: 1.25 Divis\u00e3o Inteira a = 10 b = 8 div_inteira = a // b print ( div_inteira ) # output: 1 M\u00f3dulo a = 10 b = 8 modulo = a % b print ( modulo ) # output: 2 Exponencia\u00e7\u00e3o a = 10 b = 8 exp = a ** b print ( exp ) # output: 100000000","title":"Aula 6 - Operadores Aritm\u00e9ticos"},{"location":"S02/Aula%206%20-%20Operadores%20Aritm%C3%A9ticos/#operadores-aritmeticos","text":"","title":"Operadores Aritm\u00e9ticos"},{"location":"S02/Aula%206%20-%20Operadores%20Aritm%C3%A9ticos/#explicacao","text":"O Python \u00e9 uma linguagem de programa\u00e7\u00e3o extremamente poderosa no assunto \"estat\u00edstica\", com isso, o mesmo permite fazer opera\u00e7\u00f5es matem\u00e1ticas de pequeno e grande porte.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%206%20-%20Operadores%20Aritm%C3%A9ticos/#tipos-de-operadores-aritmeticos","text":"Adi\u00e7\u00e3o a = 10 b = 8 soma = a + b print ( soma ) # output: 18 Subtra\u00e7\u00e3o a = 10 b = 8 sub = a - b print ( sub ) # output: 2 Multiplica\u00e7\u00e3o a = 10 b = 8 mult = a b print ( mult ) # output: 80 Divis\u00e3o a = 10 b = 8 div = a / b print ( div ) # output: 1.25 Divis\u00e3o Inteira a = 10 b = 8 div_inteira = a // b print ( div_inteira ) # output: 1 M\u00f3dulo a = 10 b = 8 modulo = a % b print ( modulo ) # output: 2 Exponencia\u00e7\u00e3o a = 10 b = 8 exp = a ** b print ( exp ) # output: 100000000","title":"Tipos de Operadores Aritm\u00e9ticos"},{"location":"S02/Aula%207%20-%20Operadores%20Comparativos/","text":"Operadores Comparativos Explica\u00e7\u00e3o O Python possui formas de comparar valores ou verificar se tal informa\u00e7\u00e3o est\u00e1 inserida em algum elemento. O retorno dessa compara\u00e7\u00e3o sempre retornar\u00e1 um valor boolean (True ou False). Tipos de Operadores Comparativos Maior que a = 10 b = 8 verifica = a > b print ( verifica ) # output: True Menor que a = 10 b = 8 verifica = a < b print ( verifica ) # output: False Igual a = 10 b = 8 verifica = a == b print ( verifica ) # output: False Diferente a = 10 b = 8 verifica = a != b print ( verifica ) # output: True Maior ou igual a = 10 b = 8 verifica = a >= b print ( verifica ) # output: True Menor ou igual a = 10 b = 8 verifica = a <= b print ( verifica ) # output: False","title":"Aula 7 - Operadores Comparativos"},{"location":"S02/Aula%207%20-%20Operadores%20Comparativos/#operadores-comparativos","text":"","title":"Operadores Comparativos"},{"location":"S02/Aula%207%20-%20Operadores%20Comparativos/#explicacao","text":"O Python possui formas de comparar valores ou verificar se tal informa\u00e7\u00e3o est\u00e1 inserida em algum elemento. O retorno dessa compara\u00e7\u00e3o sempre retornar\u00e1 um valor boolean (True ou False).","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%207%20-%20Operadores%20Comparativos/#tipos-de-operadores-comparativos","text":"Maior que a = 10 b = 8 verifica = a > b print ( verifica ) # output: True Menor que a = 10 b = 8 verifica = a < b print ( verifica ) # output: False Igual a = 10 b = 8 verifica = a == b print ( verifica ) # output: False Diferente a = 10 b = 8 verifica = a != b print ( verifica ) # output: True Maior ou igual a = 10 b = 8 verifica = a >= b print ( verifica ) # output: True Menor ou igual a = 10 b = 8 verifica = a <= b print ( verifica ) # output: False","title":"Tipos de Operadores Comparativos"},{"location":"S02/Aula%208%20-%20Fun%C3%A7%C3%B5es/","text":"Fun\u00e7\u00f5es Explica\u00e7\u00e3o Durante a escrita de c\u00f3digos, pode ser necess\u00e1rio a repeti\u00e7\u00e3o de trechos para efetuar determinadas valida\u00e7\u00f5es ou tratamentos nas informa\u00e7\u00f5es. Para que isso seja evitado, surgem as fun\u00e7\u00f5es . Para constru\u00ed-la, os passos ser\u00e3o: Inicializar com a palavra reservada def ; Dar um nome para ela (utilizando os mesmos conceitos de nomenclatura das vari\u00e1veis); Informar os par\u00e2metros \u00e0 serem passados para ela realizar a(s) devida(s) funcionalidade(s) (vale destacar que podem ser quantos forem necess\u00e1rios e sempre estar\u00e3o dentro de um par\u00eanteses); Se caso houver necessidade de retornar um valor, dever\u00e1 ser feito o uso da palavra reservada return no final, informado a vari\u00e1vel \u00e0 ser devolvida. Exemplo def soma ( n1 , n2 ): return n1 + n2","title":"Aula 8 - Fun\u00e7\u00f5es"},{"location":"S02/Aula%208%20-%20Fun%C3%A7%C3%B5es/#funcoes","text":"","title":"Fun\u00e7\u00f5es"},{"location":"S02/Aula%208%20-%20Fun%C3%A7%C3%B5es/#explicacao","text":"Durante a escrita de c\u00f3digos, pode ser necess\u00e1rio a repeti\u00e7\u00e3o de trechos para efetuar determinadas valida\u00e7\u00f5es ou tratamentos nas informa\u00e7\u00f5es. Para que isso seja evitado, surgem as fun\u00e7\u00f5es . Para constru\u00ed-la, os passos ser\u00e3o: Inicializar com a palavra reservada def ; Dar um nome para ela (utilizando os mesmos conceitos de nomenclatura das vari\u00e1veis); Informar os par\u00e2metros \u00e0 serem passados para ela realizar a(s) devida(s) funcionalidade(s) (vale destacar que podem ser quantos forem necess\u00e1rios e sempre estar\u00e3o dentro de um par\u00eanteses); Se caso houver necessidade de retornar um valor, dever\u00e1 ser feito o uso da palavra reservada return no final, informado a vari\u00e1vel \u00e0 ser devolvida.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%208%20-%20Fun%C3%A7%C3%B5es/#exemplo","text":"def soma ( n1 , n2 ): return n1 + n2","title":"Exemplo"},{"location":"S02/Aula%209%20-%20Looping/","text":"Looping Explica\u00e7\u00e3o Muitas vezes durante um desenvolvimento, faz-se necess\u00e1rio percorrer uma lista ou at\u00e9 mesmo realizar contagens e para isso, o Python possui os loopings . Existem duas formas de fazer isso, o For e o While . Looping For Permite percorrer os itens de uma cole\u00e7\u00e3o e para cada um deles executar o bloco de c\u00f3digos declarado dentro da estrutura do looping. Exemplos Looping com uma quantidade definida de itera\u00e7\u00f5es for numero in range ( 5 ): print ( numero ) # output: # 0 # 1 # 2 # 3 # 4 Looping usando intervalo de n\u00fameros for numero in range ( 3 , 10 ): print ( numero ) # output: # 3 # 4 # 5 # 6 # 7 # 8 # 9 Looping usando listas/tuplas como delimitador lista_de_filmes = [ 'Kill Bill' , 'Madagascar' , 'Harry Potter' ] # ou lista_de_filmes = ( 'Kill Bill' , 'Madagascar' , 'Harry Potter' ) for filme in lista_de_filmes : print ( filme ) # output: # 'Kill Bill' # 'Madagascar' # 'Harry Potter' Looping usando listas com seus respectivos \u00edndices lista_de_filmes = [ 'Kill Bill' , 'Madagascar' , 'Harry Potter' ] for indice , filme in enumerate ( lista_de_filmes ): print ( indice , '-' , filme ) # output: # 0 - Kill Bill # 1 - Madagascar # 2 - Harry Potter Looping While O comando while faz com que um conjunto de instru\u00e7\u00f5es seja executado enquanto uma condi\u00e7\u00e3o \u00e9 atendida. Exemplos Looping condicional utilizando incrementador Cria-se uma condi\u00e7\u00e3o para o looping em cima de uma variavel incrementavel. Toda vez que rodar o bloco de codigos, essa vari\u00e1vel ir\u00e1 ter um valor somado. O looping rodar\u00e1 at\u00e9 que a condi\u00e7\u00e3o passe a ser falsa. Ex.: contador = 0 while contador < 5 : print ( f 'O valor do contador \u00e9 { contador } e ainda \u00e9 menor que 5!' ) contador += 1 # output: # O valor do contador \u00e9 0 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 1 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 2 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 3 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 4 e ainda \u00e9 menor que 5! Looping condicional infinito com 'input' O comando input permite que o usuario escreva valores para dentro do codigo durante a execu\u00e7\u00e3o, com isso, no momento em que o usuario colocar a informa\u00e7\u00e3o desejada, o looping encerrar\u00e1 a rotina. Ex.: comando = '' while comando != 'cancelar' : print ( 'Programa rodando....' ) comando = input ( 'Voc\u00ea desejar cancelar? Se sim digite \"cancelar\": ' ) . lower () print ( 'Seu programa foi cancelado com sucesso!' ) Looping condicional infinito com \"break\" e \"continue\" Este formato permite que a rotina rode eternamente. Isto ocorre, pois n\u00e3o \u00e9 especificado nenhuma condi\u00e7\u00e3o \"False\" , com isso, \u00e9 necess\u00e1rio deixar implicito no codigo quando deve continuar rodando e quando deve parar a execu\u00e7\u00e3o. Para isso, existem as palavras reservadas \"break\" e \"continue\" . Ex.\" python valor = 0 while True: num = input('Insira um valor para a soma: ') if num != 'q': valor += int(num) print(f'\\nAgora o valor \u00e9: {valor}\\n') continue else: print(f'Voce digitou \"q\" isso ir\u00e1 encerrar o programa.') break print('Looping encerrado!')","title":"Aula 9 - Looping"},{"location":"S02/Aula%209%20-%20Looping/#looping","text":"","title":"Looping"},{"location":"S02/Aula%209%20-%20Looping/#explicacao","text":"Muitas vezes durante um desenvolvimento, faz-se necess\u00e1rio percorrer uma lista ou at\u00e9 mesmo realizar contagens e para isso, o Python possui os loopings . Existem duas formas de fazer isso, o For e o While .","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%209%20-%20Looping/#looping-for","text":"Permite percorrer os itens de uma cole\u00e7\u00e3o e para cada um deles executar o bloco de c\u00f3digos declarado dentro da estrutura do looping.","title":"Looping For"},{"location":"S02/Aula%209%20-%20Looping/#exemplos","text":"Looping com uma quantidade definida de itera\u00e7\u00f5es for numero in range ( 5 ): print ( numero ) # output: # 0 # 1 # 2 # 3 # 4 Looping usando intervalo de n\u00fameros for numero in range ( 3 , 10 ): print ( numero ) # output: # 3 # 4 # 5 # 6 # 7 # 8 # 9 Looping usando listas/tuplas como delimitador lista_de_filmes = [ 'Kill Bill' , 'Madagascar' , 'Harry Potter' ] # ou lista_de_filmes = ( 'Kill Bill' , 'Madagascar' , 'Harry Potter' ) for filme in lista_de_filmes : print ( filme ) # output: # 'Kill Bill' # 'Madagascar' # 'Harry Potter' Looping usando listas com seus respectivos \u00edndices lista_de_filmes = [ 'Kill Bill' , 'Madagascar' , 'Harry Potter' ] for indice , filme in enumerate ( lista_de_filmes ): print ( indice , '-' , filme ) # output: # 0 - Kill Bill # 1 - Madagascar # 2 - Harry Potter","title":"Exemplos"},{"location":"S02/Aula%209%20-%20Looping/#looping-while","text":"O comando while faz com que um conjunto de instru\u00e7\u00f5es seja executado enquanto uma condi\u00e7\u00e3o \u00e9 atendida.","title":"Looping While"},{"location":"S02/Aula%209%20-%20Looping/#exemplos_1","text":"Looping condicional utilizando incrementador Cria-se uma condi\u00e7\u00e3o para o looping em cima de uma variavel incrementavel. Toda vez que rodar o bloco de codigos, essa vari\u00e1vel ir\u00e1 ter um valor somado. O looping rodar\u00e1 at\u00e9 que a condi\u00e7\u00e3o passe a ser falsa. Ex.: contador = 0 while contador < 5 : print ( f 'O valor do contador \u00e9 { contador } e ainda \u00e9 menor que 5!' ) contador += 1 # output: # O valor do contador \u00e9 0 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 1 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 2 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 3 e ainda \u00e9 menor que 5! # O valor do contador \u00e9 4 e ainda \u00e9 menor que 5! Looping condicional infinito com 'input' O comando input permite que o usuario escreva valores para dentro do codigo durante a execu\u00e7\u00e3o, com isso, no momento em que o usuario colocar a informa\u00e7\u00e3o desejada, o looping encerrar\u00e1 a rotina. Ex.: comando = '' while comando != 'cancelar' : print ( 'Programa rodando....' ) comando = input ( 'Voc\u00ea desejar cancelar? Se sim digite \"cancelar\": ' ) . lower () print ( 'Seu programa foi cancelado com sucesso!' ) Looping condicional infinito com \"break\" e \"continue\" Este formato permite que a rotina rode eternamente. Isto ocorre, pois n\u00e3o \u00e9 especificado nenhuma condi\u00e7\u00e3o \"False\" , com isso, \u00e9 necess\u00e1rio deixar implicito no codigo quando deve continuar rodando e quando deve parar a execu\u00e7\u00e3o. Para isso, existem as palavras reservadas \"break\" e \"continue\" . Ex.\" python valor = 0 while True: num = input('Insira um valor para a soma: ') if num != 'q': valor += int(num) print(f'\\nAgora o valor \u00e9: {valor}\\n') continue else: print(f'Voce digitou \"q\" isso ir\u00e1 encerrar o programa.') break print('Looping encerrado!')","title":"Exemplos"},{"location":"S02/Aula%20990%20-%20Datetime/","text":"Datetime O que \u00e9? Datetime \u00e9 uma biblioteca interna do Python que permite atuar com datas, tanto pra coleta, quanto pra efetuar opera\u00e7\u00f5es entre per\u00edodos de tempo. Exemplo Importar a biblioteca: import datetime Coletar somente a data: hoje = datetime . date . today () # output: datetime.date(2022, 4, 15) Coleta a data e hora do dia vigente: hoje = datetime . datetime . today () # output: datetime.datetime(2022, 4, 15, 23, 17, 18, 892310) Converter a data para um formato visual e no formato string: A formata\u00e7\u00e3o de data \"%d/%m/%Y\" e \"%Y/%m/%d\" usadas nesse exemplo e no abaixo s\u00e3o tiradas diretamente da documenta\u00e7\u00e3o . hoje_formatado = hoje . strftime ( ' %d /%m/%Y' ) # output: '15/04/2022' Retornar a string para o formato datetime: data_antes = datetime . datetime . strptime ( hoje_formatado , '%Y/%m/ %d ' ) # output: datetime.datetime(2022, 4, 15, 0, 0) Trazer a data de ontem ou de amanh\u00e3: No uso do timedelta para calcular o dia anterior ou sucessor, \u00e9 importante frisar que o s\u00edmbolo de \"+\" \u00e9 quem dita se ir\u00e1 operar pro passado ou futuro. # Dia anterior ontem = hoje - datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 4, 14, 23, 17, 18, 892310) # Dia seguinte amanha = hoje + datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 4, 16, 23, 17, 18, 892310) Calcular a diferen\u00e7a de dias de uma data para outra: ( amanha - ontem ) . days # output: 2","title":"Aula 990 - Datetime"},{"location":"S02/Aula%20990%20-%20Datetime/#datetime","text":"","title":"Datetime"},{"location":"S02/Aula%20990%20-%20Datetime/#o-que-e","text":"Datetime \u00e9 uma biblioteca interna do Python que permite atuar com datas, tanto pra coleta, quanto pra efetuar opera\u00e7\u00f5es entre per\u00edodos de tempo.","title":"O que \u00e9?"},{"location":"S02/Aula%20990%20-%20Datetime/#exemplo","text":"Importar a biblioteca: import datetime Coletar somente a data: hoje = datetime . date . today () # output: datetime.date(2022, 4, 15) Coleta a data e hora do dia vigente: hoje = datetime . datetime . today () # output: datetime.datetime(2022, 4, 15, 23, 17, 18, 892310) Converter a data para um formato visual e no formato string: A formata\u00e7\u00e3o de data \"%d/%m/%Y\" e \"%Y/%m/%d\" usadas nesse exemplo e no abaixo s\u00e3o tiradas diretamente da documenta\u00e7\u00e3o . hoje_formatado = hoje . strftime ( ' %d /%m/%Y' ) # output: '15/04/2022' Retornar a string para o formato datetime: data_antes = datetime . datetime . strptime ( hoje_formatado , '%Y/%m/ %d ' ) # output: datetime.datetime(2022, 4, 15, 0, 0) Trazer a data de ontem ou de amanh\u00e3: No uso do timedelta para calcular o dia anterior ou sucessor, \u00e9 importante frisar que o s\u00edmbolo de \"+\" \u00e9 quem dita se ir\u00e1 operar pro passado ou futuro. # Dia anterior ontem = hoje - datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 4, 14, 23, 17, 18, 892310) # Dia seguinte amanha = hoje + datetime . timedelta ( days = 1 ) # output: datetime.datetime(2021, 4, 16, 23, 17, 18, 892310) Calcular a diferen\u00e7a de dias de uma data para outra: ( amanha - ontem ) . days # output: 2","title":"Exemplo"},{"location":"S02/Aula%20991%20-%20Decoradores/","text":"Decorators Explica\u00e7\u00e3o \"Decorators\" conseguem modificar o comportamento de uma fun\u00e7\u00e3o/m\u00e9todo sem alterar seu c\u00f3digo fonte. Eles s\u00e3o como uma camada extra que voc\u00ea pode adicionar em torno de uma fun\u00e7\u00e3o, permitindo que seja executado um c\u00f3digo adicional antes ou depois dela, ou at\u00e9 mesmo substituir completamente sua funcionalidade. Como Funcionam os Decorators na pr\u00e1tica? Um \"decorator\" \u00e9 basicamente uma fun\u00e7\u00e3o que recebe outra fun\u00e7\u00e3o como argumento e retorna uma nova fun\u00e7\u00e3o que geralmente estende ou modifica o comportamento da fun\u00e7\u00e3o original. A fun\u00e7\u00e3o original \u00e9 ent\u00e3o substitu\u00edda pela nova fun\u00e7\u00e3o retornada pelo decorator. Demonstra\u00e7\u00e3o Importa as bibliotecas necess\u00e1rias para o exemplo: from time import perf_counter # coleta de tempo from datetime import timedelta # formata tempo fornecido pela lib acima from selenium import webdriver # navega\u00e7\u00e3o na web from selenium.webdriver.chrome.service import Service # instancia webdriver from selenium.webdriver.common.by import By # apoia busca de elementos na p\u00e1gina web Para esse exemplo, ser\u00e1 necess\u00e1rio ter o Selenium. Caso n\u00e3o tenha, basta executar o comando no CMD/Terminal : ```bash pip install selenium ``` Cria o decorator \"@tempo_medio_funcao\": def tempo_medio_funcao ( func ): # o nome dessa fun\u00e7\u00e3o representa o decorator e ira fornecer a fun\u00e7\u00e3o encapsulada def wrapper ( * args , ** kwargs ): # funcao interna com nome generico que conter\u00e1 as funcionalidades desejadas inicial = perf_counter () # coleta tempo inicial func ( * args , ** kwargs ) # executa fun\u00e7\u00e3o a ser cronometrada final = perf_counter () # coleta tempo final tempo = final - inicial # efetua subtracao para identificar tempo m\u00e9dio da execu\u00e7\u00e3o return f 'O tempo da fun\u00e7\u00e3o \" { func . __name__ } \" foi de { timedelta ( seconds = tempo ) } (sem formata\u00e7\u00e3o: { tempo } )' # Retorna mensagem final return wrapper Atribui o decorator \"@tempo_medio_funcao\" na fun\u00e7\u00e3o \"requisite_site\" para checar o tempo m\u00e9dio da sua execu\u00e7\u00e3o @tempo_medio_funcao def requisita_site ( site ): driver = webdriver . Chrome ( service = Service ( 'caminho/do/seu/chromedriver.exe' ) ) driver . implicitly_wait ( 30 ) driver . get ( site ) driver . find_element ( By . ID , \"search\" ) driver . quit () Executa a fun\u00e7\u00e3o \"requisite_site\" e emite o resultado na tela print ( requisita_site ( 'https://www.google.com.br/search?q=Python' )) # retorno: O tempo da fun\u00e7\u00e3o \"requisita_site\" foi de 0:00:09.990927 (sem formata\u00e7\u00e3o: 9.9909265)","title":"Aula 991 - Decoradores"},{"location":"S02/Aula%20991%20-%20Decoradores/#decorators","text":"","title":"Decorators"},{"location":"S02/Aula%20991%20-%20Decoradores/#explicacao","text":"\"Decorators\" conseguem modificar o comportamento de uma fun\u00e7\u00e3o/m\u00e9todo sem alterar seu c\u00f3digo fonte. Eles s\u00e3o como uma camada extra que voc\u00ea pode adicionar em torno de uma fun\u00e7\u00e3o, permitindo que seja executado um c\u00f3digo adicional antes ou depois dela, ou at\u00e9 mesmo substituir completamente sua funcionalidade.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%20991%20-%20Decoradores/#como-funcionam-os-decorators-na-pratica","text":"Um \"decorator\" \u00e9 basicamente uma fun\u00e7\u00e3o que recebe outra fun\u00e7\u00e3o como argumento e retorna uma nova fun\u00e7\u00e3o que geralmente estende ou modifica o comportamento da fun\u00e7\u00e3o original. A fun\u00e7\u00e3o original \u00e9 ent\u00e3o substitu\u00edda pela nova fun\u00e7\u00e3o retornada pelo decorator.","title":"Como Funcionam os Decorators na pr\u00e1tica?"},{"location":"S02/Aula%20991%20-%20Decoradores/#demonstracao","text":"Importa as bibliotecas necess\u00e1rias para o exemplo: from time import perf_counter # coleta de tempo from datetime import timedelta # formata tempo fornecido pela lib acima from selenium import webdriver # navega\u00e7\u00e3o na web from selenium.webdriver.chrome.service import Service # instancia webdriver from selenium.webdriver.common.by import By # apoia busca de elementos na p\u00e1gina web Para esse exemplo, ser\u00e1 necess\u00e1rio ter o Selenium. Caso n\u00e3o tenha, basta executar o comando no CMD/Terminal : ```bash pip install selenium ``` Cria o decorator \"@tempo_medio_funcao\": def tempo_medio_funcao ( func ): # o nome dessa fun\u00e7\u00e3o representa o decorator e ira fornecer a fun\u00e7\u00e3o encapsulada def wrapper ( * args , ** kwargs ): # funcao interna com nome generico que conter\u00e1 as funcionalidades desejadas inicial = perf_counter () # coleta tempo inicial func ( * args , ** kwargs ) # executa fun\u00e7\u00e3o a ser cronometrada final = perf_counter () # coleta tempo final tempo = final - inicial # efetua subtracao para identificar tempo m\u00e9dio da execu\u00e7\u00e3o return f 'O tempo da fun\u00e7\u00e3o \" { func . __name__ } \" foi de { timedelta ( seconds = tempo ) } (sem formata\u00e7\u00e3o: { tempo } )' # Retorna mensagem final return wrapper Atribui o decorator \"@tempo_medio_funcao\" na fun\u00e7\u00e3o \"requisite_site\" para checar o tempo m\u00e9dio da sua execu\u00e7\u00e3o @tempo_medio_funcao def requisita_site ( site ): driver = webdriver . Chrome ( service = Service ( 'caminho/do/seu/chromedriver.exe' ) ) driver . implicitly_wait ( 30 ) driver . get ( site ) driver . find_element ( By . ID , \"search\" ) driver . quit () Executa a fun\u00e7\u00e3o \"requisite_site\" e emite o resultado na tela print ( requisita_site ( 'https://www.google.com.br/search?q=Python' )) # retorno: O tempo da fun\u00e7\u00e3o \"requisita_site\" foi de 0:00:09.990927 (sem formata\u00e7\u00e3o: 9.9909265)","title":"Demonstra\u00e7\u00e3o"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/","text":"Fila e Threads Explica\u00e7\u00e3o Queue Em termos simples, uma fila \u00e9 como uma linha de pessoas esperando para serem atendidas. As pessoas s\u00f3 podem entrar no final da fila e sair pelo come\u00e7o. Da mesma forma, em uma fila de programa\u00e7\u00e3o, as tarefas (ou \"itens\") s\u00f3 podem ser adicionadas ao final da fila e removidas do come\u00e7o. Isso \u00e9 conhecido como FIFO (First In, First Out), ou seja, o primeiro a entrar \u00e9 o primeiro a sair. Threads Imagine que voc\u00ea tem uma grande quantidade de trabalhos que precisam ser feitos, mas cada trabalho leva algum tempo para ser conclu\u00eddo. Em vez de fazer todos os trabalhos um ap\u00f3s o outro (o que seria muito lento), voc\u00ea decide dividir o trabalho entre v\u00e1rios funcion\u00e1rios. Cada funcion\u00e1rio pode trabalhar em um trabalho de cada vez, e assim todos os trabalhos s\u00e3o conclu\u00eddos mais r\u00e1pido. No mundo da programa\u00e7\u00e3o, esses \"trabalhos\" s\u00e3o chamados de \"tarefas\" e os \"funcion\u00e1rios\" s\u00e3o chamados de \"threads\". O ThreadPoolExecutor \u00e9 como um gerente que organiza esses funcion\u00e1rios e distribui as tarefas entre eles. Ele cria um grupo de threads e gerencia a execu\u00e7\u00e3o das tarefas para que todas sejam conclu\u00eddas de maneira eficiente. Demonstra\u00e7\u00e3o Simplificada - Queue Importa a Fila from queue import Queue Inicializa a fila fila = Queue () Insere um valor na fila fila . put ( 'qualquer valor' ) Retira um valor da fila para processar valor = fila . get () Simplificada - ThreadPoolExecutor Importa o Executor de Threads from concurrent.futures import ThreadPoolExecutor Gera alguma var\u00edavel de inter\u00e1veis (filas, listas, tuples, etc...) itens_x = [ 1 , 2 , 3 , 4 , 5 ] Define a fun\u00e7\u00e3o que ir\u00e1 processar os valores def funcao_y ( x ): pass Executa os processos de acordo com quantidade de Threads estipulada with ThreadPoolExecutor ( max_workers = 3 ) as executor : resultados = [ executor . submit ( funcao_y , valor ) for valor in itens_x ] Completa - Pr\u00e1tica Importa as bibliotecas necess\u00e1rias para o exemplo from queue import Queue # Funcionalidade da fila import requests # Efetua requisi\u00e7\u00f5es HTTP import xml.etree.ElementTree as ET # Permite analisar arquivos XMLs import json # Permite analisar arquivos JSON from concurrent.futures import ThreadPoolExecutor # Funcionalidade das Threads Instancia a fila para ser preenchida fila = Queue () Adiciona moedas para dentro da fila (fun\u00e7\u00e3o qsize() mostra a quantidade de itens na fila) for moeda in [ 'USD' , 'EUR' , 'JPY' , 'GBP' , 'ARS' ]: fila . put ( moeda ) print ( fila . qsize ()) # resultado: 5 Cria fun\u00e7\u00e3o para fazer a coleta da cota\u00e7\u00e3o para diferentes moedas def coleta_cotacao ( moeda , datas ): cotacoes = { moeda : []} # Dicionario vazio para popular futuramente com as cota\u00e7\u00f5es siglas = { 'USD' : '220' , 'EUR' : '978' , 'JPY' : '470' , 'GBP' : '540' , 'ARS' : '706' } # Dicion\u00e1rio contendo a sigla e qual o c\u00f3digo da moeda for data in datas : # Para cada data informada, fazer 1 intera\u00e7\u00e3o retorno = requests . get ( f 'https://www3.bcb.gov.br/bc_moeda/rest/converter/1/1/ { siglas [ moeda ] } /790/ { data } ' ) # Faz requisi\u00e7\u00e3o da cota\u00e7\u00e3o root = ET . fromstring ( retorno . text ) # Converte o retorno XML em algo modific\u00e1vel pelo Python cotacoes [ moeda ] . append ({ data : root . text }) # Adiciona data e o valor da cota\u00e7\u00e3o na chave contendo a sigla with open ( f 'cotacoes_ { moeda } .json' , 'w' ) as arqv : # Salva um arquivo .json final json . dump ( cotacoes , arqv ) Instancia as \"threads\" para cada uma rodar uma moeda with ThreadPoolExecutor ( max_workers = 5 ) as executor : # Gerenciador de contexto instanciado para executar as threads results = [ executor . submit ( coleta_cotacao , fila . get (), [ '2024-02-09' , '2024-02-08' , '2024-02-07' , '2024-02-06' , '2024-02-05' , '2024-02-02' , '2024-02-01' , '2024-01-31' , '2024-01-30' , '2024-01-29' ]) for _ in range ( 5 )] # List Comprehension interando uma \"queue\" com data padr\u00f5es","title":"Aula 992 - Fila e Threads"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#fila-e-threads","text":"","title":"Fila e Threads"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#explicacao","text":"","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#queue","text":"Em termos simples, uma fila \u00e9 como uma linha de pessoas esperando para serem atendidas. As pessoas s\u00f3 podem entrar no final da fila e sair pelo come\u00e7o. Da mesma forma, em uma fila de programa\u00e7\u00e3o, as tarefas (ou \"itens\") s\u00f3 podem ser adicionadas ao final da fila e removidas do come\u00e7o. Isso \u00e9 conhecido como FIFO (First In, First Out), ou seja, o primeiro a entrar \u00e9 o primeiro a sair.","title":"Queue"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#threads","text":"Imagine que voc\u00ea tem uma grande quantidade de trabalhos que precisam ser feitos, mas cada trabalho leva algum tempo para ser conclu\u00eddo. Em vez de fazer todos os trabalhos um ap\u00f3s o outro (o que seria muito lento), voc\u00ea decide dividir o trabalho entre v\u00e1rios funcion\u00e1rios. Cada funcion\u00e1rio pode trabalhar em um trabalho de cada vez, e assim todos os trabalhos s\u00e3o conclu\u00eddos mais r\u00e1pido. No mundo da programa\u00e7\u00e3o, esses \"trabalhos\" s\u00e3o chamados de \"tarefas\" e os \"funcion\u00e1rios\" s\u00e3o chamados de \"threads\". O ThreadPoolExecutor \u00e9 como um gerente que organiza esses funcion\u00e1rios e distribui as tarefas entre eles. Ele cria um grupo de threads e gerencia a execu\u00e7\u00e3o das tarefas para que todas sejam conclu\u00eddas de maneira eficiente.","title":"Threads"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#demonstracao","text":"","title":"Demonstra\u00e7\u00e3o"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#simplificada-queue","text":"Importa a Fila from queue import Queue Inicializa a fila fila = Queue () Insere um valor na fila fila . put ( 'qualquer valor' ) Retira um valor da fila para processar valor = fila . get ()","title":"Simplificada - Queue"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#simplificada-threadpoolexecutor","text":"Importa o Executor de Threads from concurrent.futures import ThreadPoolExecutor Gera alguma var\u00edavel de inter\u00e1veis (filas, listas, tuples, etc...) itens_x = [ 1 , 2 , 3 , 4 , 5 ] Define a fun\u00e7\u00e3o que ir\u00e1 processar os valores def funcao_y ( x ): pass Executa os processos de acordo com quantidade de Threads estipulada with ThreadPoolExecutor ( max_workers = 3 ) as executor : resultados = [ executor . submit ( funcao_y , valor ) for valor in itens_x ]","title":"Simplificada - ThreadPoolExecutor"},{"location":"S02/Aula%20992%20-%20Fila%20e%20Threads/#completa-pratica","text":"Importa as bibliotecas necess\u00e1rias para o exemplo from queue import Queue # Funcionalidade da fila import requests # Efetua requisi\u00e7\u00f5es HTTP import xml.etree.ElementTree as ET # Permite analisar arquivos XMLs import json # Permite analisar arquivos JSON from concurrent.futures import ThreadPoolExecutor # Funcionalidade das Threads Instancia a fila para ser preenchida fila = Queue () Adiciona moedas para dentro da fila (fun\u00e7\u00e3o qsize() mostra a quantidade de itens na fila) for moeda in [ 'USD' , 'EUR' , 'JPY' , 'GBP' , 'ARS' ]: fila . put ( moeda ) print ( fila . qsize ()) # resultado: 5 Cria fun\u00e7\u00e3o para fazer a coleta da cota\u00e7\u00e3o para diferentes moedas def coleta_cotacao ( moeda , datas ): cotacoes = { moeda : []} # Dicionario vazio para popular futuramente com as cota\u00e7\u00f5es siglas = { 'USD' : '220' , 'EUR' : '978' , 'JPY' : '470' , 'GBP' : '540' , 'ARS' : '706' } # Dicion\u00e1rio contendo a sigla e qual o c\u00f3digo da moeda for data in datas : # Para cada data informada, fazer 1 intera\u00e7\u00e3o retorno = requests . get ( f 'https://www3.bcb.gov.br/bc_moeda/rest/converter/1/1/ { siglas [ moeda ] } /790/ { data } ' ) # Faz requisi\u00e7\u00e3o da cota\u00e7\u00e3o root = ET . fromstring ( retorno . text ) # Converte o retorno XML em algo modific\u00e1vel pelo Python cotacoes [ moeda ] . append ({ data : root . text }) # Adiciona data e o valor da cota\u00e7\u00e3o na chave contendo a sigla with open ( f 'cotacoes_ { moeda } .json' , 'w' ) as arqv : # Salva um arquivo .json final json . dump ( cotacoes , arqv ) Instancia as \"threads\" para cada uma rodar uma moeda with ThreadPoolExecutor ( max_workers = 5 ) as executor : # Gerenciador de contexto instanciado para executar as threads results = [ executor . submit ( coleta_cotacao , fila . get (), [ '2024-02-09' , '2024-02-08' , '2024-02-07' , '2024-02-06' , '2024-02-05' , '2024-02-02' , '2024-02-01' , '2024-01-31' , '2024-01-30' , '2024-01-29' ]) for _ in range ( 5 )] # List Comprehension interando uma \"queue\" com data padr\u00f5es","title":"Completa - Pr\u00e1tica"},{"location":"S02/Aula%20993%20-%20Gerenciador%20de%20Contexto/","text":"Gerenciador de Contexto Explica\u00e7\u00e3o Um context manager no Python \u00e9 um objeto que define m\u00e9todos especiais __enter__() e __exit__() que permitem gerenciar recursos de maneira eficiente durante a execu\u00e7\u00e3o de um bloco de c\u00f3digo. Esses recursos podem ser qualquer coisa que precise ser aberto e fechado, como arquivos, conex\u00f5es de rede, locks ou qualquer outro recurso que requer uma abertura e fechamento expl\u00edcito. Os context managers s\u00e3o usados com a instru\u00e7\u00e3o with , que garante que o m\u00e9todo __exit__() seja chamado quando o bloco de c\u00f3digo dentro do with \u00e9 conclu\u00eddo, mesmo que isso aconte\u00e7a devido a uma exce\u00e7\u00e3o. Isso ajuda a garantir que os recursos sejam liberados corretamente e evita vazamentos de recursos, como arquivos n\u00e3o fechados ou conex\u00f5es de rede abertas indefinidamente. Paradigma Funcional Importar a fun\u00e7\u00e3o contextmanager da biblioteca embarcada contextlib : from contextlib import contextmanager import sqlite3 Criar a fun\u00e7\u00e3o passando o decorador @contextmanager : @contextmanager def banco ( base_dados = 'tutorial.db' ): Escrever o resto da fun\u00e7\u00e3o passando a funcionalidade yield no lugar do return garantindo que ela n\u00e3o se encerre, mas sim, devolva o cursor para uso externo e ao concluir os processamentos, retorne \u00e0 fun\u00e7\u00e3o banco para fechar a conectividade. try : conn = sqlite3 . connect ( base_dados ) cursor = conn . cursor () except : print ( 'Erro' ) else : yield cursor conn . commit () finally : cursor . close () conn . close () E para chamar a fun\u00e7\u00e3o utilizando a abertura e fechamento da conex\u00e3o em Banco de Dados, basta utilizar a instru\u00e7\u00e3o with : with banco () as db : db . execute ( 'CREATE TABLE movie(title, year, score)' ) Paradigma de Orienta\u00e7\u00e3o \u00e0 Objetos Importar as bibliotecas desejadas no projeto: import sqlite3 Criar a classe instanciando a funcionalidade de inicializa\u00e7\u00e3o: class Banco : def __init__ ( self , base_dados = 'tutorial.db' ): self . conn = sqlite3 . connect ( base_dados ) Escrever a fun\u00e7\u00e3o __enter__ que far\u00e1 a abertura do cursor e devolver\u00e1 o mesmo para uso externo: def __enter__ ( self ): self . cursor = self . conn . cursor () return self . cursor Implementar a fun\u00e7\u00e3o __exit__ para que seja chamada assim que todo o uso do cursor acima tenha sido conclu\u00eddo: def __exit__ ( self , * args ): self . conn . commit () self . cursor . close () self . conn . close () E para chamar a fun\u00e7\u00e3o utilizando a abertura e fechamento da conex\u00e3o em Banco de Dados, basta utilizar a instru\u00e7\u00e3o with : with Banco () as db : db . execute ( \"\"\"INSERT INTO movie VALUES ('Monty Python and the Holy Grail', 1975, 8.2), ('And Now Something Different', 1971, 7.5)\"\"\" )","title":"Aula 993 - Gerenciador de Contexto"},{"location":"S02/Aula%20993%20-%20Gerenciador%20de%20Contexto/#gerenciador-de-contexto","text":"","title":"Gerenciador de Contexto"},{"location":"S02/Aula%20993%20-%20Gerenciador%20de%20Contexto/#explicacao","text":"Um context manager no Python \u00e9 um objeto que define m\u00e9todos especiais __enter__() e __exit__() que permitem gerenciar recursos de maneira eficiente durante a execu\u00e7\u00e3o de um bloco de c\u00f3digo. Esses recursos podem ser qualquer coisa que precise ser aberto e fechado, como arquivos, conex\u00f5es de rede, locks ou qualquer outro recurso que requer uma abertura e fechamento expl\u00edcito. Os context managers s\u00e3o usados com a instru\u00e7\u00e3o with , que garante que o m\u00e9todo __exit__() seja chamado quando o bloco de c\u00f3digo dentro do with \u00e9 conclu\u00eddo, mesmo que isso aconte\u00e7a devido a uma exce\u00e7\u00e3o. Isso ajuda a garantir que os recursos sejam liberados corretamente e evita vazamentos de recursos, como arquivos n\u00e3o fechados ou conex\u00f5es de rede abertas indefinidamente.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%20993%20-%20Gerenciador%20de%20Contexto/#paradigma-funcional","text":"Importar a fun\u00e7\u00e3o contextmanager da biblioteca embarcada contextlib : from contextlib import contextmanager import sqlite3 Criar a fun\u00e7\u00e3o passando o decorador @contextmanager : @contextmanager def banco ( base_dados = 'tutorial.db' ): Escrever o resto da fun\u00e7\u00e3o passando a funcionalidade yield no lugar do return garantindo que ela n\u00e3o se encerre, mas sim, devolva o cursor para uso externo e ao concluir os processamentos, retorne \u00e0 fun\u00e7\u00e3o banco para fechar a conectividade. try : conn = sqlite3 . connect ( base_dados ) cursor = conn . cursor () except : print ( 'Erro' ) else : yield cursor conn . commit () finally : cursor . close () conn . close () E para chamar a fun\u00e7\u00e3o utilizando a abertura e fechamento da conex\u00e3o em Banco de Dados, basta utilizar a instru\u00e7\u00e3o with : with banco () as db : db . execute ( 'CREATE TABLE movie(title, year, score)' )","title":"Paradigma Funcional"},{"location":"S02/Aula%20993%20-%20Gerenciador%20de%20Contexto/#paradigma-de-orientacao-a-objetos","text":"Importar as bibliotecas desejadas no projeto: import sqlite3 Criar a classe instanciando a funcionalidade de inicializa\u00e7\u00e3o: class Banco : def __init__ ( self , base_dados = 'tutorial.db' ): self . conn = sqlite3 . connect ( base_dados ) Escrever a fun\u00e7\u00e3o __enter__ que far\u00e1 a abertura do cursor e devolver\u00e1 o mesmo para uso externo: def __enter__ ( self ): self . cursor = self . conn . cursor () return self . cursor Implementar a fun\u00e7\u00e3o __exit__ para que seja chamada assim que todo o uso do cursor acima tenha sido conclu\u00eddo: def __exit__ ( self , * args ): self . conn . commit () self . cursor . close () self . conn . close () E para chamar a fun\u00e7\u00e3o utilizando a abertura e fechamento da conex\u00e3o em Banco de Dados, basta utilizar a instru\u00e7\u00e3o with : with Banco () as db : db . execute ( \"\"\"INSERT INTO movie VALUES ('Monty Python and the Holy Grail', 1975, 8.2), ('And Now Something Different', 1971, 7.5)\"\"\" )","title":"Paradigma de Orienta\u00e7\u00e3o \u00e0 Objetos"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/","text":"Lambda, List Comprehension, map e filter List Comprehension Explica\u00e7\u00e3o List comprehension \u00e9 uma maneira concisa e eficiente de criar listas em Python. \u00c9 como uma forma abreviada de escrever um loop for que cria uma nova lista com base em uma lista existente ou em uma sequ\u00eancia de n\u00fameros. Demonstra\u00e7\u00e3o - Dobrar N\u00fameros Imagine que exista uma lista de n\u00fameros e deseja-se criar uma nova lista que seja o dobro de cada n\u00famero. Sem list comprehension, seria algo assim: numeros = [ 1 , 2 , 3 , 4 , 5 ] dobro = [] for num in numeros : dobro . append ( num * 2 ) print ( dobro ) # retorno: [2, 4, 6, 8, 10] Com list comprehension, \u00e9 poss\u00edvel fazer isso de uma maneira mais simples e direta: numeros = [ 1 , 2 , 3 , 4 , 5 ] dobro = [ num * 2 for num in numeros ] print ( dobro ) # retorno: [2, 4, 6, 8, 10] Demonstra\u00e7\u00e3o - Filtrar N\u00fameros Pares Agora, tendo com lista de n\u00fameros, busca-se separar somente os n\u00fameros pares. Sem list comprehension, seria algo assim: numeros = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] pares = [] for num in numeros : if num % 2 == 0 : pares . append ( num ) print ( pares ) Com list comprehension, pode-se fazer isso da seguinte forma: numeros = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] pares = [ num for num in numeros if num % 2 == 0 ] print ( pares ) Demonstra\u00e7\u00e3o - Transformar Strings em Mai\u00fasculas Imagine que fora criado uma lista de nomes e busca-se criar uma nova lista com os nomes em mai\u00fasculas. Sem list comprehension, voc\u00ea faria algo assim: nomes = [ 'Ana' , 'Bruno' , 'Carla' , 'David' ] maiusculas = [] for nome in nomes : maiusculas . append ( nome . upper ()) print ( maiusculas ) Com list comprehension, voc\u00ea pode fazer isso de uma maneira muito mais simples: nomes = [ 'Ana' , 'Bruno' , 'Carla' , 'David' ] maiusculas = [ nome . upper () for nome in nomes ] print ( maiusculas )","title":"Aula 994 - List Comprehension, Map e Filter"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/#lambda-list-comprehension-map-e-filter","text":"","title":"Lambda, List Comprehension, map e filter"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/#list-comprehension","text":"","title":"List Comprehension"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/#explicacao","text":"List comprehension \u00e9 uma maneira concisa e eficiente de criar listas em Python. \u00c9 como uma forma abreviada de escrever um loop for que cria uma nova lista com base em uma lista existente ou em uma sequ\u00eancia de n\u00fameros.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/#demonstracao-dobrar-numeros","text":"Imagine que exista uma lista de n\u00fameros e deseja-se criar uma nova lista que seja o dobro de cada n\u00famero. Sem list comprehension, seria algo assim: numeros = [ 1 , 2 , 3 , 4 , 5 ] dobro = [] for num in numeros : dobro . append ( num * 2 ) print ( dobro ) # retorno: [2, 4, 6, 8, 10] Com list comprehension, \u00e9 poss\u00edvel fazer isso de uma maneira mais simples e direta: numeros = [ 1 , 2 , 3 , 4 , 5 ] dobro = [ num * 2 for num in numeros ] print ( dobro ) # retorno: [2, 4, 6, 8, 10]","title":"Demonstra\u00e7\u00e3o - Dobrar N\u00fameros"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/#demonstracao-filtrar-numeros-pares","text":"Agora, tendo com lista de n\u00fameros, busca-se separar somente os n\u00fameros pares. Sem list comprehension, seria algo assim: numeros = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] pares = [] for num in numeros : if num % 2 == 0 : pares . append ( num ) print ( pares ) Com list comprehension, pode-se fazer isso da seguinte forma: numeros = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] pares = [ num for num in numeros if num % 2 == 0 ] print ( pares )","title":"Demonstra\u00e7\u00e3o - Filtrar N\u00fameros Pares"},{"location":"S02/Aula%20994%20-%20List%20Comprehension%2C%20Map%20e%20Filter/#demonstracao-transformar-strings-em-maiusculas","text":"Imagine que fora criado uma lista de nomes e busca-se criar uma nova lista com os nomes em mai\u00fasculas. Sem list comprehension, voc\u00ea faria algo assim: nomes = [ 'Ana' , 'Bruno' , 'Carla' , 'David' ] maiusculas = [] for nome in nomes : maiusculas . append ( nome . upper ()) print ( maiusculas ) Com list comprehension, voc\u00ea pode fazer isso de uma maneira muito mais simples: nomes = [ 'Ana' , 'Bruno' , 'Carla' , 'David' ] maiusculas = [ nome . upper () for nome in nomes ] print ( maiusculas )","title":"Demonstra\u00e7\u00e3o - Transformar Strings em Mai\u00fasculas"},{"location":"S02/Aula%20995%20-%20Serializa%C3%A7%C3%A3o/","text":"Serializa\u00e7\u00e3o Explica\u00e7\u00e3o A serializa\u00e7\u00e3o \u00e9 o processo de converter um objeto em um formato que pode ser facilmente armazenado ou transmitido e depois reconstru\u00eddo j\u00e1 do jeito que o Python ir\u00e1 conseguir ler. Esse arquivo possui a extens\u00e3o .pkl . Seria basicamente uma forma de salvar o progesso daquilo que estava sendo processado para que em caso de interrup\u00e7\u00e3o, n\u00e3o precise ser reprocessado tudo. Obs.: Embora os arquivos pickle sejam convenientes, \u00e9 importante estar ciente de que eles podem ser usados para executar c\u00f3digo arbitr\u00e1rio durante a desserializa\u00e7\u00e3o. Portanto, deve-se sempre abrir arquivos de fontes confi\u00e1veis e considerar o uso de alternativas mais seguras, como json para dados que n\u00e3o s\u00e3o sens\u00edveis, ou implementar medidas de seguran\u00e7a adicionais ao trabalhar com determinadas informa\u00e7\u00f5es. Demonstra\u00e7\u00e3o Importa a biblioteca pickle : import pickle Declara uma lista com valores e emite qual o tipo da vari\u00e1vel \"nomes_estudantes\": nomes_estudantes = [ 'Alice' , 'Jos\u00e9' , 'Helena' , 'Maria' , 'Caio' ] print ( type ( nomes_estudantes )) # retorno: <class 'list'> Gera um arquivo serializado de extens\u00e3o .pkl : with open ( 'nomes_estudantes.pkl' , 'wb' ) as arqv_escrita : pickle . dump ( nomes_estudantes , arqv_escrita ) L\u00ea o arquivo serializado gerado anteriormente: with open ( 'nomes_estudantes.pkl' , 'rb' ) as arqv_leitura : retorno_nomes = pickle . load ( arqv_leitura ) Emite na tela a tipagem da informa\u00e7\u00e3o contida na vari\u00e1vel \"retorno_nomes\": print ( type ( retorno_nomes )) # retorno: <class 'list'>","title":"Aula 995 - Serializa\u00e7\u00e3o"},{"location":"S02/Aula%20995%20-%20Serializa%C3%A7%C3%A3o/#serializacao","text":"","title":"Serializa\u00e7\u00e3o"},{"location":"S02/Aula%20995%20-%20Serializa%C3%A7%C3%A3o/#explicacao","text":"A serializa\u00e7\u00e3o \u00e9 o processo de converter um objeto em um formato que pode ser facilmente armazenado ou transmitido e depois reconstru\u00eddo j\u00e1 do jeito que o Python ir\u00e1 conseguir ler. Esse arquivo possui a extens\u00e3o .pkl . Seria basicamente uma forma de salvar o progesso daquilo que estava sendo processado para que em caso de interrup\u00e7\u00e3o, n\u00e3o precise ser reprocessado tudo. Obs.: Embora os arquivos pickle sejam convenientes, \u00e9 importante estar ciente de que eles podem ser usados para executar c\u00f3digo arbitr\u00e1rio durante a desserializa\u00e7\u00e3o. Portanto, deve-se sempre abrir arquivos de fontes confi\u00e1veis e considerar o uso de alternativas mais seguras, como json para dados que n\u00e3o s\u00e3o sens\u00edveis, ou implementar medidas de seguran\u00e7a adicionais ao trabalhar com determinadas informa\u00e7\u00f5es.","title":"Explica\u00e7\u00e3o"},{"location":"S02/Aula%20995%20-%20Serializa%C3%A7%C3%A3o/#demonstracao","text":"Importa a biblioteca pickle : import pickle Declara uma lista com valores e emite qual o tipo da vari\u00e1vel \"nomes_estudantes\": nomes_estudantes = [ 'Alice' , 'Jos\u00e9' , 'Helena' , 'Maria' , 'Caio' ] print ( type ( nomes_estudantes )) # retorno: <class 'list'> Gera um arquivo serializado de extens\u00e3o .pkl : with open ( 'nomes_estudantes.pkl' , 'wb' ) as arqv_escrita : pickle . dump ( nomes_estudantes , arqv_escrita ) L\u00ea o arquivo serializado gerado anteriormente: with open ( 'nomes_estudantes.pkl' , 'rb' ) as arqv_leitura : retorno_nomes = pickle . load ( arqv_leitura ) Emite na tela a tipagem da informa\u00e7\u00e3o contida na vari\u00e1vel \"retorno_nomes\": print ( type ( retorno_nomes )) # retorno: <class 'list'>","title":"Demonstra\u00e7\u00e3o"}]}